[{"path":"https://cemos-mannheim.github.io/MALDIcellassay/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 MALDIcellassay authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/articles/Example.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"MALDI cell based assay Example","text":"document apply automated screening possible candidate signals show response treatment compound. details experimental part check Nature Protocols publication Unger 2021 “Label-free Cell Assays Compound Uptake Drug Action using MALDI-TOF Mass Spectrometry”. Briefly, cells treated following concentration compound: 0, 0.04, 0.12, 0.37, 1.11, 3.33, 10, 30 uM. incubation cells washed, transferred MALDI target plate matrix applied. concentration 4 spots applied means also 4 “measurement replicates” concentration. important function package fitCurve(). fit dose response curve compute score values also necessary steps needed prepare data fitting like normalization alignment. tutorial want first look steps individually apply fitCurve() function helps us combine . sake keep package small, spectra used example trimmed 400-900 Da mass-range stored compact form example data.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/articles/Example.html","id":"example-data-and-quality-check","dir":"Articles","previous_headings":"","what":"Example data and quality check","title":"MALDI cell based assay Example","text":"First check spectra general quality.","code":"library(MALDIcellassay) library(MALDIquant) #>  #> This is MALDIquant version 1.22.3 #> Quantitative Analysis of Mass Spectrometry Data #>  See '?MALDIquant' for more information about this package. data(\"Blank2022spec\") MALDIquant::plot(Blank2022spec[[1]], main = \"0uM, replicate 1\")"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/articles/Example.html","id":"preprocessing","dir":"Articles","previous_headings":"","what":"Preprocessing","title":"MALDI cell based assay Example","text":"baseline spectra already looks ok sake tutorial apply baseline correction. first want save names spectra (concentrations used treat cells). Also get better overview data compute mean spectra concentration (4 measurement replicates concentration) plot around m/z 760 want use signal normalize also lock mass.  see alignment spectra quite good intensity varies peak around m/z 760. get best results necessary normalize spectra . One way add standard measurement spot (internal standard). always possible another option use endogenous peaks high abundance like signal around 760 m/z. example now find m/z deviation signal spectrum. First need detect peaks, use getMzShift() find mass shift/mass deviation spectrum. already suspected shift quite small. Now lets use align/re-calibrate spectra (single point re-calibration). Now aligned spectra next step normalize . Also , internal standard great don’t one use m/z 760 endogenous signal. First extract intensities spectrum signal use normalization factor. final check now plot aligned normalizes mean spectra concentration.","code":"conc <- as.numeric(names(Blank2022spec)) spec_prc <- MALDIquant::removeBaseline(Blank2022spec) names(spec_prc) <- conc  avg <- MALDIquant::averageMassSpectra(spec_prc, labels = conc) MALDIquant::plot(avg[[1]], main = \"Overview of mean spectra\", xlim = c(755, 765)) for(i in 2:length(avg)) {   MALDIquant::lines(avg[[i]], col = i) } legend(\"topright\", legend = paste0(names(avg), \"uM\"), col = 1:8, lty=1) peaks <- MALDIquant::detectPeaks(Blank2022spec, method = \"SuperSmoother\", SNR = 5) names(peaks) <- names(Blank2022spec) mz_shift <- getMzShift(peaks = peaks, targetMz = 760.585, tol = 0.1) #> found mz 760.585 in 32 / 32 spectra #> 13:36 mzshift was -0.0796625 in mean and 0.0828  abs. max. summary(mz_shift$mzshift) #>     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.  #> -0.08280 -0.08280 -0.08280 -0.07966 -0.08280 -0.05770 spec_align <- shiftMassAxis(Blank2022spec, mz_shift$mzshift) peaks_align <- MALDIquant::detectPeaks(spec_align, method = \"SuperSmoother\", SNR = 3) norm <- getNormFactors(peaksdf = peaks2df(peaks_align), targetMz = 760.585, tol = 0.1) summary(norm$norm_factor) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    7949   12842   14492   14099   16145   19570 spec_rdy <- normalizeByFactor(spec_align, norm$norm_factor) avg_rdy <- MALDIquant::averageMassSpectra(spec_rdy, labels = conc) MALDIquant::plot(avg_rdy[[1]], main = \"Overview of mean spectra\", xlim = c(755, 765)) for(i in 2:length(avg_rdy)) {   MALDIquant::lines(avg_rdy[[i]], col = i) } legend(\"topright\", legend = paste0(names(avg), \"uM\"), col = 1:8, lty=1)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/articles/Example.html","id":"high-variance-filtering","dir":"Articles","previous_headings":"","what":"High variance filtering","title":"MALDI cell based assay Example","text":"expected find spectra perfectly aligned normalized 760.585. Now can detect peaks, bin compose intensity matrix peaks. get intensity matrix 211 peaks total. next step screen high variant peaks.","code":"peaks_rdy <- MALDIquant::detectPeaks(avg_rdy, method = \"SuperSmoother\", SNR = 3) peaks_rdy <- MALDIquant::binPeaks(peaks_rdy) intmat <- MALDIquant::intensityMatrix(peaks_rdy, avg_rdy) dim(intmat) #> [1]   8 211 vars <- apply(intmat, 2, var) idx <- which(vars > mean(vars)) highVarIntmat <- intmat[,idx] dim(highVarIntmat) #> [1]  8 20"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/articles/Example.html","id":"fit-curve","dir":"Articles","previous_headings":"","what":"Fit Curve","title":"MALDI cell based assay Example","text":"end 20 candidate peaks want fit IC50 curve. Lets fitting one exemplary signal.  finished! said introduction step manually.","code":"concLog <- log10(unique(conc))     if(any(concLog == -Inf)) {       concLog[which(concLog == -Inf)] <- (min(concLog[which(!concLog == -Inf)])-1)     } resp <- nplr::convertToProp(y = intmat[,10]) model <- nplr::nplr(x = concLog, y = resp, useLog = FALSE, npars = 4) title <- paste0(\"m/z =\", round(as.numeric(colnames(intmat)[12]), 2)) plot(model, main = title)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/articles/Example.html","id":"maldicellassay-workflow","dir":"Articles","previous_headings":"","what":"MALDIcellassay Workflow","title":"MALDI cell based assay Example","text":"automated way signal interest use following function. Note, use pre-processed spectra (baseline removed). Baseline removal smoothing can (needed) performed MALDIquant.","code":"res <- fitCurve(spec = spec_prc,          SinglePointRecal = TRUE,           normMeth = \"mz\",          varFilterMethod = \"none\",          normMz = 760.585,           alignTol = 0,           normTol = 0.1,           verbose = FALSE)  res #> ------MALDIassay object------ #>  #> Including 8 concentrations, #> ranging from 0 to 30 . #> Normalization on m/z 760.58 ± 0.1 Da. #>  #> Single point recalibation on 760.58 with 0.1 Da tolerance. #> Avg. mass shift before recal.: -0.0797 Da. Max abs. shift: 0.0828 Da. #> Avg. mass shift after recal. : 0 Da. Max abs. shift: 0 Da. #>  #> Found 249 peaks (SNR 3) and 249 high variance peaks #> using variance filtering method: none. #>  #> Top5-features based on Fold-Change and R²: #>        mz mzIdx pEC50   R2 log2FC SSMD   V'   Z'  CRS #> 1 620.383   111 -0.31 0.97   3.23 5.56 0.82 0.37 85.4 #> 2 662.422   134 -0.62 0.99   3.00 4.11 0.91 0.13 72.0 #> 3 634.398   120 -0.48 0.99   2.61 4.15 0.89 0.13 71.7 #> 4 810.604   208 -0.62 1.00   1.79 5.03 0.92 0.27 71.4 #> 5 811.602   209 -0.64 0.99   1.90 4.68 0.90 0.22 68.8"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/articles/Example.html","id":"screen-the-results-for-interesting-signals","dir":"Articles","previous_headings":"MALDIcellassay Workflow","what":"Screen the results for interesting signals","title":"MALDI cell based assay Example","text":"can also extract data.frame peaks quality metrics. actually got sneak peak results show() method MALDIassay-class. can see mzIdx 111 (m/z 620.4) scored highest CRS score around 85%. Depending experimental setup (targeted .e. know m/z interest un-targeted) might also want look V’, Z’ log2FC individually. take look highest hit observe good fit curve (V’), high distance lower upper part curve (log2FC) combined low variance (Z’). Still don’t sigmoidal shape either use right concentration range need look deeper data.   might slightly better curve lower CRS. CRS intended quickly filter signals make sense makes sense visually check top hits.","code":"stats <- getPeakStatistics(res, summarise = TRUE) plotPeak(res, mzIdx = 111, tol = 0.8) plotCurves(res, mzIdx = 111, errorbars = \"sd\") plotPeak(res, mzIdx = 193, tol = 0.8) plotCurves(res, mzIdx = 193, errorbars = \"sd\")"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/articles/Example.html","id":"session-info","dir":"Articles","previous_headings":"MALDIcellassay Workflow","what":"Session Info","title":"MALDI cell based assay Example","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] MALDIquant_1.22.3          MALDIcellassay_0.4.47.9000 #>  #> loaded via a namespace (and not attached): #>  [1] sass_0.4.9               utf8_1.2.4               generics_0.1.3           #>  [4] tidyr_1.3.1              nplr_0.1-7               digest_0.6.37            #>  [7] magrittr_2.0.3           evaluate_0.24.0          grid_4.4.1               #> [10] fastmap_1.2.0            jsonlite_1.8.8           purrr_1.0.2              #> [13] fansi_1.0.6              viridisLite_0.4.2        scales_1.3.0             #> [16] XML_3.99-0.17            textshaping_0.4.0        jquerylib_0.1.4          #> [19] cli_3.6.3                rlang_1.1.4              MALDIquantForeign_0.14.1 #> [22] munsell_0.5.1            withr_3.0.1              base64enc_0.1-3          #> [25] cachem_1.1.0             yaml_2.3.10              tools_4.4.1              #> [28] parallel_4.4.1           dplyr_1.1.4              colorspace_2.1-1         #> [31] ggplot2_3.5.1            forcats_1.0.0            vctrs_0.6.5              #> [34] readBrukerFlexData_1.9.2 R6_2.5.1                 lifecycle_1.0.4          #> [37] fs_1.6.4                 ragg_1.3.2               pkgconfig_2.0.3          #> [40] desc_1.4.3               readMzXmlData_2.8.3      pkgdown_2.1.0            #> [43] pillar_1.9.0             bslib_0.8.0              gtable_0.3.5             #> [46] glue_1.7.0               systemfonts_1.1.0        highr_0.11               #> [49] xfun_0.47                tibble_3.2.1             tidyselect_1.2.1         #> [52] knitr_1.48               farver_2.1.2             htmltools_0.5.8.1        #> [55] labeling_0.4.3           rmarkdown_2.28           svMisc_1.2.3             #> [58] compiler_4.4.1"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Enzlein. Author, maintainer, copyright holder.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Unger MS, Blank M, Enzlein T, Hopf C (2021). “Label-free cell assays determine compound uptake drug action using MALDI-TOF mass spectrometry.” Nature Protocols, 16(12), 5533-5558. doi:10.1038/s41596-021-00624-z.","code":"@Article{,   title = {Label-free cell assays to determine compound uptake or drug action using MALDI-TOF mass spectrometry},   author = {Melissa S Unger and Martina Blank and Thomas Enzlein and Carsten Hopf},   journal = {Nature Protocols},   year = {2021},   volume = {16},   number = {12},   pages = {5533-5558},   doi = {10.1038/s41596-021-00624-z}, }"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/index.html","id":"maldicellassay-","dir":"","previous_headings":"","what":"Automated MALDI Cell Assays Using Dose-Response Curve Fitting","title":"Automated MALDI Cell Assays Using Dose-Response Curve Fitting","text":"Conduct automated cell-based assays using Matrix-Assisted Laser Desorption/Ionization (MALDI) methods high-throughput screening signals responsive treatments. package efficiently identifies high variance signals fits dose-response curves . Quality metrics Z’, V’, log2-Fold-Change Curve response score (CRS) provided evaluating potential signals biomarkers. methodologies introduced Weigt et al. (2018) first release MALDIcellassay-package Unger et al. (2021).","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/index.html","id":"main-functionality","dir":"","previous_headings":"","what":"Main Functionality","title":"Automated MALDI Cell Assays Using Dose-Response Curve Fitting","text":"primary function package fitCurve() performs logistic regression variance filtering also handles necessary preprocessing steps: Spectral alignment (“single-point recalibration”) Normalization internal standard known endogenous signal functions can also called independently. package makes heavy use MALDIquant framework.","code":""},{"path":[]},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/index.html","id":"from-cran","dir":"","previous_headings":"Installation","what":"From CRAN","title":"Automated MALDI Cell Assays Using Dose-Response Curve Fitting","text":"can install released version MALDIcellassay CRAN :","code":"install.packages(\"MALDIcellassay\")"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/index.html","id":"from-github","dir":"","previous_headings":"Installation","what":"From GitHub","title":"Automated MALDI Cell Assays Using Dose-Response Curve Fitting","text":"install development version package, use devtools:","code":"# Install devtools if you haven't already install.packages(\"devtools\")  # Install MALDIcellassay from GitHub devtools::install_github(\"CeMOS-Mannheim/MALDIcellassay\")"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example Usage","title":"Automated MALDI Cell Assays Using Dose-Response Curve Fitting","text":"’s simple example get started MALDIcellassay package: detailed examples, check vignette. Also take look pkgdown-site details specific functions.","code":"library(MALDIcellassay) library(MALDIquant)  # Load example data data(\"Blank2022spec\")  # Preprocess data spec_prc <- MALDIquant::removeBaseline(Blank2022spec) conc <- as.numeric(names(Blank2022spec)) names(spec_prc) <- conc  # Fit dose-response curve res <- fitCurve(spec = spec_prc,                 SinglePointRecal = TRUE,                  normMeth = \"mz\",                 varFilterMethod = \"none\",                 normMz = 760.585,                  alignTol = 0,                  normTol = 0.1,                  verbose = FALSE)  # View the results print(res)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/index.html","id":"gui","dir":"","previous_headings":"","what":"GUI","title":"Automated MALDI Cell Assays Using Dose-Response Curve Fitting","text":"want use MALDIcellassay interactively explore data, might interested M²ara, offers Shiny-based interface. also available docker container stand-alone Windows installer. can find details preprint M²ara.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/index.html","id":"contribution-and-contact","dir":"","previous_headings":"","what":"Contribution and Contact","title":"Automated MALDI Cell Assays Using Dose-Response Curve Fitting","text":"welcome contributions MALDIcellassay! encounter issues suggestions improvement, please open issue GitHub submit pull request. questions information, can contact maintainer:","code":"Name: Thomas Enzlein Email: t.enzlein@hs-mannheim.de"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Automated MALDI Cell Assays Using Dose-Response Curve Fitting","text":"use MALDIcellassay research, please cite: Unger et al., 2021, “Label-free Cell Assays Compound Uptake Drug Action using MALDI-TOF Mass Spectrometry”, Nature Protocols. DOI: https://doi.org/10.1038/s41596-021-00624-z.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/Blank2022intmat.html","id":null,"dir":"Reference","previous_headings":"","what":"Example intensity matrix from Blank 2022 — Blank2022intmat","title":"Example intensity matrix from Blank 2022 — Blank2022intmat","text":"Intensity matrix MALDI mass spectrometry data EOC cells treated different concentrations SAHA. used demonstrate usage MALDIcellassay.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/Blank2022intmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example intensity matrix from Blank 2022 — Blank2022intmat","text":"","code":"data(Blank2022intmat)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/Blank2022intmat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example intensity matrix from Blank 2022 — Blank2022intmat","text":"Matrix concentrations original spectra rownames m/z-values colnames.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/Blank2022intmat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example intensity matrix from Blank 2022 — Blank2022intmat","text":"concentrations include: 0, 0.04, 0.12, 0.37, 1.11, 3.33, 10 30 uM SAHA 4 replicates . original spectra trimmed 400-900 Da mass-range keep file size small. peaks result MALDIquant::intensityMatrix(Blank2022peaks, Blank2022spec)","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/Blank2022intmat.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example intensity matrix from Blank 2022 — Blank2022intmat","text":"Blank, M., Enzlein, T. & Hopf, C. LPS-induced lipid alterations microglia revealed MALDI mass spectrometry-based cell fingerprinting neuroinflammation studies. Sci Rep 12, 2908 (2022). https://doi.org/10.1038/s41598-022-06894-1","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/Blank2022peaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Example peaks from Blank 2022 — Blank2022peaks","title":"Example peaks from Blank 2022 — Blank2022peaks","text":"Peaks MALDI mass spectrometry data EOC cells treated different concentrations SAHA. used demonstrate usage MALDIcellassay.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/Blank2022peaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example peaks from Blank 2022 — Blank2022peaks","text":"","code":"data(Blank2022peaks)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/Blank2022peaks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example peaks from Blank 2022 — Blank2022peaks","text":"list MALDIquant::MassPeaks-objects named respective concentration.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/Blank2022peaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example peaks from Blank 2022 — Blank2022peaks","text":"concentrations include: 0, 0.04, 0.12, 0.37, 1.11, 3.33, 10 30 uM SAHA 4 replicates . original spectra trimmed 400-900 Da mass-range keep file size small. peaks result applying MALDIquant::detectPeaks Blank2022spec arguments SNR = 3, method = \"SuperSmoother\".","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/Blank2022peaks.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example peaks from Blank 2022 — Blank2022peaks","text":"Blank, M., Enzlein, T. & Hopf, C. LPS-induced lipid alterations microglia revealed MALDI mass spectrometry-based cell fingerprinting neuroinflammation studies. Sci Rep 12, 2908 (2022). https://doi.org/10.1038/s41598-022-06894-1","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/Blank2022res.html","id":null,"dir":"Reference","previous_headings":"","what":"Example MALDIassay object from Blank 2022 — Blank2022res","title":"Example MALDIassay object from Blank 2022 — Blank2022res","text":"Object class MALDIcellassay MALDI mass spectrometry data EOC cells treated different concentrations SAHA. used demonstrate usage MALDIcellassay.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/Blank2022res.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example MALDIassay object from Blank 2022 — Blank2022res","text":"","code":"data(Blank2022res)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/Blank2022res.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example MALDIassay object from Blank 2022 — Blank2022res","text":"Matrix concentrations original spectra rownames m/z-values colnames.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/Blank2022res.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example MALDIassay object from Blank 2022 — Blank2022res","text":"concentrations include: 0, 0.04, 0.12, 0.37, 1.11, 3.33, 10 30 uM SAHA 4 replicates . original spectra trimmed 400-900 Da mass-range keep file size small. peaks result fitCurve(spec = Blank2022spec, SinglePointRecal = TRUE,  normMz = 760.585,  alignTol = 0.1,  normTol = 0.1)","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/Blank2022res.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example MALDIassay object from Blank 2022 — Blank2022res","text":"Blank, M., Enzlein, T. & Hopf, C. LPS-induced lipid alterations microglia revealed MALDI mass spectrometry-based cell fingerprinting neuroinflammation studies. Sci Rep 12, 2908 (2022). https://doi.org/10.1038/s41598-022-06894-1","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/Blank2022spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Example spectra from Blank 2022 — Blank2022spec","title":"Example spectra from Blank 2022 — Blank2022spec","text":"MALDI mass spectrometry data EOC cells treated different concentrations SAHA. used demonstrate usage MALDIcellassay.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/Blank2022spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example spectra from Blank 2022 — Blank2022spec","text":"","code":"data(Blank2022spec)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/Blank2022spec.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example spectra from Blank 2022 — Blank2022spec","text":"list MALDIquant::MassSpectrum-objects named respective concentration.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/Blank2022spec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example spectra from Blank 2022 — Blank2022spec","text":"concentrations include: 0, 0.04, 0.12, 0.37, 1.11, 3.33, 10 30 uM SAHA 4 replicates . original spectra trimmed 400-900 Da mass-range keep file size small.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/Blank2022spec.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example spectra from Blank 2022 — Blank2022spec","text":"Blank, M., Enzlein, T. & Hopf, C. LPS-induced lipid alterations microglia revealed MALDI mass spectrometry-based cell fingerprinting neuroinflammation studies. Sci Rep 12, 2908 (2022). https://doi.org/10.1038/s41598-022-06894-1","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/MALDIassay-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class MALDIassay — MALDIassay-class","title":"Class MALDIassay — MALDIassay-class","text":"class holding MALDI assay related information.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/MALDIassay-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class MALDIassay — MALDIassay-class","text":"object MALDIassay.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateChauvenetCriterion.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Chauvenet's criterion for outlier detection — calculateChauvenetCriterion","title":"Calculate Chauvenet's criterion for outlier detection — calculateChauvenetCriterion","text":"Calculate Chauvenet's criterion outlier detection","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateChauvenetCriterion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Chauvenet's criterion for outlier detection — calculateChauvenetCriterion","text":"","code":"calculateChauvenetCriterion(x)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateChauvenetCriterion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Chauvenet's criterion for outlier detection — calculateChauvenetCriterion","text":"x numeric, values (e.g. intensities) test outliers","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateChauvenetCriterion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Chauvenet's criterion for outlier detection — calculateChauvenetCriterion","text":"logical vector, TRUE detected outliers.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateChauvenetCriterion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Chauvenet's criterion for outlier detection — calculateChauvenetCriterion","text":"Note , outlier detection criteria: Excluding data points measurement conducted extreme care. Even () function tells data point outlier, might still want sample population especially sure data normal distributed. See Wikipedia details algorithm.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateChauvenetCriterion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Chauvenet's criterion for outlier detection — calculateChauvenetCriterion","text":"","code":"set.seed(42)   #no outlier sample <- rnorm(n = 8, mean = 0, sd = 0.01) calculateChauvenetCriterion(sample) #> [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  # introduce outlier sample[1] <- 1 calculateChauvenetCriterion(sample) #> [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateCurveFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the fit for a dose-response curve — calculateCurveFit","title":"Calculate the fit for a dose-response curve — calculateCurveFit","text":"Calculate fit dose-response curve","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateCurveFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the fit for a dose-response curve — calculateCurveFit","text":"","code":"calculateCurveFit(intmat, idx, verbose = TRUE, ...)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateCurveFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the fit for a dose-response curve — calculateCurveFit","text":"intmat Intensity matrix generated MALDIquant::intensityMatrix() rownames respective concentrations spectra. idx Numeric vector mz indices perform fit. verbose Logical, print logs console. ... Additional arguments passed nplr::nplr().","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateCurveFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the fit for a dose-response curve — calculateCurveFit","text":"List curve fits.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateCurveFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the fit for a dose-response curve — calculateCurveFit","text":"","code":"data(Blank2022intmat)  # for faster runtime we let it run on 5 peaks only fits <- calculateCurveFit(Blank2022intmat, idx = 1:5) #> fitting 402.407 (1/5) #> fitting 406.997 (2/5) #> fitting 407.016 (3/5) #> fitting 408.043 (4/5) #> fitting 408.062 (5/5)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateSSMD.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate strictly standardized mean difference (SSMD) — calculateSSMD","title":"Calculate strictly standardized mean difference (SSMD) — calculateSSMD","text":"Calculate strictly standardized mean difference (SSMD)","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateSSMD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate strictly standardized mean difference (SSMD) — calculateSSMD","text":"","code":"calculateSSMD(res, internal = TRUE, nConc = 2)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateSSMD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate strictly standardized mean difference (SSMD) — calculateSSMD","text":"res Object class MALDIassay internal Logical, currently internal implementation, using nConc top bottom concentrations, implemented. nConc Numeric, number top bottom concentrations used calculate pseudo positive negative control. used internal TRUE","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateSSMD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate strictly standardized mean difference (SSMD) — calculateSSMD","text":"Numeric vector strictly standardized mean differences (SSMD)","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateSSMD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate strictly standardized mean difference (SSMD) — calculateSSMD","text":"strictly standardized mean difference (SSMD) measure effect size. mean divided standard deviation difference positive negative control. $$\\gamma=\\frac{\\mid\\mu_n - \\mu_p\\mid}{\\sqrt{\\sigma_n^2 + \\sigma_p^2}}$$ SSMD can easily interpreted denotes difference positve negative controls units standard deviation.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateSSMD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate strictly standardized mean difference (SSMD) — calculateSSMD","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res)  calculateSSMD(Blank2022res, nConc = 2)        #>  [1] 0.9929269 1.8295971 0.4589847 0.5734228 1.2892462 1.7888130 3.1918283 #>  [8] 1.8648946 1.6817642 1.6596281 1.6481736 1.2971227 4.0481543 2.3039603 #> [15] 2.4210874 3.8748702 3.8690381 3.9669764 5.0425580 4.6732764 4.3425562 #> [22] 4.3308703 3.6642894"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateVPrime.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate V'-Factor — calculateVPrime","title":"Calculate V'-Factor — calculateVPrime","text":"Calculate V'-Factor","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateVPrime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate V'-Factor — calculateVPrime","text":"","code":"calculateVPrime(res, internal = TRUE)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateVPrime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate V'-Factor — calculateVPrime","text":"res Object class MALDIassay internal Logical, currently internal implementation, using nConc top bottom concentrations, implemented.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateVPrime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate V'-Factor — calculateVPrime","text":"Numeric vector V'-factors","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateVPrime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate V'-Factor — calculateVPrime","text":"V'-factor generalization Z'-factor dose-response curve. See M.-. Bray . Carpenter, Advanced assay development guidelines image-based high content screening analysis details. defined : $$V' = 1 - 6 * \\sigma_f/|\\mu_p - \\mu_n|$$ $$\\sigma_f = \\sqrt{1/N * \\sum{y_fit - y_measured}^2}$$ words, \\(\\sigma_f\\) standard deviation residuals. Note, need estimate variance mean positive negative value. , function uses top bottom asymptote directly instead taking top bottom concentrations consideration.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateVPrime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate V'-Factor — calculateVPrime","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res)  calculateVPrime(Blank2022res)  #> 406.914163450922 428.004132260612 438.890824557592 439.042346897966  #>      -0.16705820       0.59861762       0.99681015       0.09886635  #> 566.961527775518 676.485447847528 703.586286847746 725.549662904297  #>       0.32258091       0.52759605       0.54818121       0.42672045  #> 726.555208487752 727.552245980755 741.536315662242 756.548750613787  #>       0.51068609       0.76295188       0.32371110      -0.11915923  #> 772.540528346963  782.57644400297 783.582654272217 798.563919325163  #>       0.25670312       0.90600765       0.90835642       0.59311636  #> 799.567517217833 804.556260133438 810.622915627018 811.624361313474  #>       0.51790518       0.83299718       0.91141686       0.90021277  #> 824.581961130221 832.600992026117  835.67738341154  #>       0.33031185       0.97768687       0.78933321"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateZPrime.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Z'-factor of assay quality — calculateZPrime","title":"Calculate Z'-factor of assay quality — calculateZPrime","text":"Calculate Z'-factor assay quality","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateZPrime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Z'-factor of assay quality — calculateZPrime","text":"","code":"calculateZPrime(res, internal = TRUE, nConc = 2)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateZPrime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Z'-factor of assay quality — calculateZPrime","text":"res Object class MALDIassay internal Logical, currently internal implementation, using nConc top bottom concentrations, implemented. nConc Numeric, number top bottom concentrations used calculate pseudo positive negative control. used internal TRUE","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateZPrime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Z'-factor of assay quality — calculateZPrime","text":"Numeric vector Z'-factors.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateZPrime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Z'-factor of assay quality — calculateZPrime","text":"common way measure quality assay -called Z'-factor, describes separation positive negative control terms standard deviations \\(\\sigma_p\\) \\(\\sigma_n\\). Z'-factor defined Ji-Hu Zhang et al., simple statistical parameter use evaluation validation high throughput screening assays. $$Z' = 1 - (3 * (\\sigma_p+\\sigma_n))/|\\mu_p-\\mu_n|$$ \\(\\mu_p\\) \\(\\mu_p\\) mean value positive (response expected) negative (response expected) control, respectively. Therefore, assay quality independent shape concentration response curve solely depend two control values. Note, internal set TRUE, nConc highest concentrations assumed positive control, whereas nConc lowest concentrations used negative.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/calculateZPrime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Z'-factor of assay quality — calculateZPrime","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) calculateZPrime(Blank2022res, nConc = 2)        #>  [1] -3.237607219 -1.252868716 -5.541275313 -4.970064620 -1.631465147 #>  [6] -0.957522437 -0.223832609 -0.902466878 -1.017670816 -1.058958794 #> [11] -1.562843832 -2.115946846 -0.024041256 -0.812729462 -0.691440743 #> [16] -0.009526589  0.030512012  0.077456813  0.266325098  0.216154352 #> [21]  0.151846342  0.140734203 -0.020104856"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/checkRecalibration.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the recalibration of spectra from a MALDIassay object — checkRecalibration","title":"Check the recalibration of spectra from a MALDIassay object — checkRecalibration","text":"Dashed gray lines indicate mz used re-calibration ± tolerance. Red dashed line indicate mz used re-calibration solid lines indicate peaks. spectrum show peak used re-calibration ± 10x tolerance.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/checkRecalibration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the recalibration of spectra from a MALDIassay object — checkRecalibration","text":"","code":"checkRecalibration(object, idx)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/checkRecalibration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the recalibration of spectra from a MALDIassay object — checkRecalibration","text":"object Object class MALDIassay idx Numeric, index spectrum plot","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/checkRecalibration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the recalibration of spectra from a MALDIassay object — checkRecalibration","text":"ggplot object","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/checkRecalibration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the recalibration of spectra from a MALDIassay object — checkRecalibration","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) checkRecalibration(Blank2022res, idx = 1:8)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/extractIntensity.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract intensity using peaks as template — extractIntensity","title":"Extract intensity using peaks as template — extractIntensity","text":"Extract intensity using peaks template","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/extractIntensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract intensity using peaks as template — extractIntensity","text":"","code":"extractIntensity(mz, peaks, spec, tol)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/extractIntensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract intensity using peaks as template — extractIntensity","text":"mz numeric, mz values extracted peaks/spectra peaks MALDIquant::MassPeaks list spec MALDIquant::MassSpectrum list tol numeric, tolerance Da","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/extractIntensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract intensity using peaks as template — extractIntensity","text":"MALDIquant::MassPeaks list extracted intensities spec m/z peaks = pseudo peaks. Useful combination sdMassSpectrum get standard deviation peaks intensity matrix.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/extractIntensity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract intensity using peaks as template — extractIntensity","text":"","code":"data(Blank2022peaks) data(Blank2022spec)  int <- extractIntensity(mz = c(409, 423, 440),                          peaks = Blank2022peaks,                          spec = Blank2022spec,                          tol = 0.2) head(int) #> $`0` #> S4 class type            : MassPeaks            #> Number of m/z values     : 3                    #> Range of m/z values      : 409 - 440            #> Range of intensity values: 4.91e+02 - 1.497e+03 #> Range of snr values      : 10.777 - 31.482      #> Memory usage             : 10.719 KiB           #> Name                     : 0.O13                #> File                     : Y:\\9-Martina Blank\\R\\Example_data_Rscript\\20191209_EOC_plate24hR1\\SAHA\\0\\0_O13\\1\\1SRef\\fid #>  #> $`0` #> S4 class type            : MassPeaks            #> Number of m/z values     : 3                    #> Range of m/z values      : 409 - 440            #> Range of intensity values: 3.76e+02 - 1.128e+03 #> Range of snr values      : 10.359 - 29.223      #> Memory usage             : 10.719 KiB           #> Name                     : 0.O14                #> File                     : Y:\\9-Martina Blank\\R\\Example_data_Rscript\\20191209_EOC_plate24hR1\\SAHA\\0\\0_O14\\1\\1SRef\\fid #>  #> $`0` #> S4 class type            : MassPeaks            #> Number of m/z values     : 3                    #> Range of m/z values      : 409 - 440            #> Range of intensity values: 5.16e+02 - 1.276e+03 #> Range of snr values      : 10.839 - 25.391      #> Memory usage             : 10.719 KiB           #> Name                     : 0.P13                #> File                     : Y:\\9-Martina Blank\\R\\Example_data_Rscript\\20191209_EOC_plate24hR1\\SAHA\\0\\0_P13\\1\\1SRef\\fid #>  #> $`0` #> S4 class type            : MassPeaks            #> Number of m/z values     : 3                    #> Range of m/z values      : 409 - 440            #> Range of intensity values: 3.39e+02 - 1.025e+03 #> Range of snr values      : 9.707 - 27.484       #> Memory usage             : 10.719 KiB           #> Name                     : 0.P14                #> File                     : Y:\\9-Martina Blank\\R\\Example_data_Rscript\\20191209_EOC_plate24hR1\\SAHA\\0\\0_P14\\1\\1SRef\\fid #>  #> $`0.04` #> S4 class type            : MassPeaks            #> Number of m/z values     : 3                    #> Range of m/z values      : 409 - 440            #> Range of intensity values: 5.24e+02 - 1.214e+03 #> Range of snr values      : 11.025 - 25.344      #> Memory usage             : 10.734 KiB           #> Name                     : 0_04.M13             #> File                     : Y:\\9-Martina Blank\\R\\Example_data_Rscript\\20191209_EOC_plate24hR1\\SAHA\\0.04\\0_M13\\1\\1SRef\\fid #>  #> $`0.04` #> S4 class type            : MassPeaks           #> Number of m/z values     : 3                   #> Range of m/z values      : 409 - 440           #> Range of intensity values: 3.13e+02 - 7.93e+02 #> Range of snr values      : 10.578 - 24.118     #> Memory usage             : 10.734 KiB          #> Name                     : 0_04.M14            #> File                     : Y:\\9-Martina Blank\\R\\Example_data_Rscript\\20191209_EOC_plate24hR1\\SAHA\\0.04\\0_M14\\1\\1SRef\\fid #>"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/extractSpots.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the spot coordinates — extractSpots","title":"Extract the spot coordinates — extractSpots","text":"Extract spot coordinates","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/extractSpots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the spot coordinates — extractSpots","text":"","code":"extractSpots(spec)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/extractSpots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the spot coordinates — extractSpots","text":"spec list MALDIquant::MassSpectrum MALDIquant::MassPeaks objects","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/extractSpots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the spot coordinates — extractSpots","text":"Character vector spot names. multiple spots used (e.g. average spectra) concatenate.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/extractSpots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the spot coordinates — extractSpots","text":"","code":"data(Blank2022spec) head(extractSpots(Blank2022spec)) #>     0     0     0     0  0.04  0.04  #> \"O13\" \"O14\" \"P13\" \"P14\" \"M13\" \"M14\""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/filterVariance.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter for high variance signals — filterVariance","title":"Filter for high variance signals — filterVariance","text":"Filter high variance signals","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/filterVariance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter for high variance signals — filterVariance","text":"","code":"filterVariance(   vars,   method = c(\"mean\", \"median\", \"q25\", \"q75\", \"none\"),   verbose = TRUE )"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/filterVariance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter for high variance signals — filterVariance","text":"vars Numeric vector, variances signals method Character, filtering method. One \"mean\" (default), \"median\", \"q25\", \"q75\" (25 75% quantile) \"none\". verbose Logical, print logs console.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/filterVariance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter for high variance signals — filterVariance","text":"Indices spectra high variance","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/filterVariance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter for high variance signals — filterVariance","text":"","code":"data(Blank2022intmat) # get variance of each peak vars <- apply(Blank2022intmat, 2, var) highVarIndicies <- filterVariance(vars, method = \"mean\", verbose = TRUE) #>       Found 57 peaks with high variance using `mean` method."},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/fitCurve.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit dose-response curves — fitCurve","title":"Fit dose-response curves — fitCurve","text":"Fit dose-response curves","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/fitCurve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit dose-response curves — fitCurve","text":"","code":"fitCurve(   spec,   unit = c(\"M\", \"mM\", \"uM\", \"nM\", \"pM\", \"fM\"),   varFilterMethod = c(\"mean\", \"median\", \"q25\", \"q75\", \"none\"),   monoisotopicFilter = FALSE,   averageMethod = c(\"mean\", \"median\", \"sum\"),   normMz = NULL,   normTol = 0.1,   alignTol = 0.01,   binTol = 2e-04,   SNR = 3,   halfWindowSize = 3,   allowNoMatches = TRUE,   normMeth = c(\"mz\", \"TIC\", \"PQN\", \"median\", \"none\"),   SinglePointRecal = TRUE,   verbose = TRUE )"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/fitCurve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit dose-response curves — fitCurve","text":"spec List MALDIquant::MassSpectrum unit Character, unit concentration. Used calculate concentration Moles pIC50 correct. Set \"M\" dont want changes concentrations. varFilterMethod Character, function applied high variance filtering. One following options mean (default), median, q25, q75 none (filtering). monoisotopicFilter Logical, filter peaks just use monoisotopic peaks curve fit. averageMethod Character, aggregation method average mass spectra (\"mean\" \"median\") normMz Numeric, mz used normalization single point recalibration. normTol Numeric, tolerance Dalton match normMz alignTol Numeric, tolerance spectral alignment Dalton. binTol Numeric, tolerance binning peaks. SNR Numeric, signal noise ratio peak detection. halfWindowSize 2ction. See MALDIquant::detectPeaks(). allowNoMatches Logical, normMz can found spectrum, proceed exclude spectrum stop normMeth Character, normalization method. Can either \"TIC\", \"PQM\", \"median\" \"mz\". \"mz\" normMz used. none normalization done. SinglePointRecal Logical, perform single point recalibration normMz verbose Logical, print logs console.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/fitCurve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit dose-response curves — fitCurve","text":"Object class MALDIassay. important slot fits contains IC50 curve fits.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/fitCurve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit dose-response curves — fitCurve","text":"","code":"data(Blank2022spec)  fitCurve(spec = Blank2022spec,          SinglePointRecal = TRUE,           normMz = 760.585,           alignTol = 0.1,           normTol = 0.1,          varFilterMethod = \"mean\")  #> found mz 760.585 in 32 / 32 spectra #> 13:36 mzshift was -0.0796625 in mean and 0.0828  abs. max. #> 13:36 normalizing...  #> 13:36 aligning spectra...  #> 13:36 calculating mean spectra...  #> 13:36 building intensity matrix and applying variance filter...  #>       Found 216 peaks in total. #> 13:36 fitting curves...  #>       Found 23 peaks with high variance using `mean` method. #> fitting 406.775 (1/23) #> fitting 406.914 (2/23) #> fitting 407.933 (3/23) #> fitting 408.897 (4/23) #> fitting 409.006 (5/23) #> fitting 409.96 (6/23) #> fitting 412.753 (7/23) #> fitting 412.906 (8/23) #> fitting 422.889 (9/23) #> fitting 423.933 (10/23) #> fitting 424.746 (11/23) #> fitting 424.903 (12/23) #> fitting 425.784 (13/23) #> fitting 425.836 (14/23) #> fitting 425.913 (15/23) #> fitting 427.873 (16/23) #> fitting 428.004 (17/23) #> fitting 428.848 (18/23) #> fitting 428.971 (19/23) #> fitting 437.903 (20/23) #> fitting 438.04 (21/23) #> fitting 438.891 (22/23) #> fitting 439.042 (23/23) #> 13:36 Done!  #> ------MALDIassay object------ #>  #> Including 8 concentrations, #> ranging from 0 to 30 . #> Normalization on m/z 760.58 ± 0.1 Da. #>  #> Single point recalibation on 760.58 with 0.1 Da tolerance. #> Avg. mass shift before recal.: -0.0797 Da. Max abs. shift: 0.0828 Da. #> Avg. mass shift after recal. : -0.0126 Da. Max abs. shift: 0.0126 Da. #>  #> Found 216 peaks (SNR 3) and 23 high variance peaks #> using variance filtering method: mean. #>  #> Top5-features based on Fold-Change and R²: #>        mz mzIdx pEC50   R2 log2FC SSMD   V'    Z'  CRS #> 1 832.601    22 -0.66 0.99   4.18 4.33 0.98  0.14 75.3 #> 2 810.623    19 -0.54 1.00   1.49 5.04 0.91  0.27 67.3 #> 3 811.624    20 -0.58 1.00   1.59 4.67 0.90  0.22 64.9 #> 4 804.556    18 -0.72 0.99   1.81 3.97 0.83  0.08 56.2 #> 5 835.677    23 -0.95 0.99   1.24 3.66 0.79 -0.02 40.9"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAllMz.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all mz value of an MALDIassay-object — getAllMz","title":"Get all mz value of an MALDIassay-object — getAllMz","text":"Get mz value MALDIassay-object","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAllMz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all mz value of an MALDIassay-object — getAllMz","text":"","code":"getAllMz(object, excludeNormMz = FALSE)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAllMz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all mz value of an MALDIassay-object — getAllMz","text":"object Object class MALDIassay excludeNormMz Logical, remove normMz list mz values.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAllMz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all mz value of an MALDIassay-object — getAllMz","text":"numeric vector mz values","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAllMz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all mz value of an MALDIassay-object — getAllMz","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) head(getAllMz(Blank2022res)) #> [1] 406.9142 428.0041 438.8908 439.0423 566.9615 676.4854"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAppliedMzShift.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract applied mz-shift — getAppliedMzShift","title":"Extract applied mz-shift — getAppliedMzShift","text":"Extract applied mz-shift","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAppliedMzShift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract applied mz-shift — getAppliedMzShift","text":"","code":"getAppliedMzShift(object)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAppliedMzShift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract applied mz-shift — getAppliedMzShift","text":"object Object class MALDIassay","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAppliedMzShift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract applied mz-shift — getAppliedMzShift","text":"Numeric vector mz-shits applied spectra","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAppliedMzShift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract applied mz-shift — getAppliedMzShift","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) head(getAppliedMzShift(Blank2022res)) #> [1] -0.0828 -0.0828 -0.0828 -0.0828 -0.0828 -0.0828"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAppliedNormFactors.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract applied normalization factors — getAppliedNormFactors","title":"Extract applied normalization factors — getAppliedNormFactors","text":"Extract applied normalization factors","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAppliedNormFactors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract applied normalization factors — getAppliedNormFactors","text":"","code":"getAppliedNormFactors(object)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAppliedNormFactors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract applied normalization factors — getAppliedNormFactors","text":"object Object class MALDIassay","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAppliedNormFactors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract applied normalization factors — getAppliedNormFactors","text":"Numeric vector normalization factors applied spectra","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAppliedNormFactors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract applied normalization factors — getAppliedNormFactors","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) head(getAppliedNormFactors(Blank2022res)) #> [1] 16141 17827 16463 15979 11687 14565"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAvgPeaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract peaks of average spectra — getAvgPeaks","title":"Extract peaks of average spectra — getAvgPeaks","text":"Extract peaks average spectra","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAvgPeaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract peaks of average spectra — getAvgPeaks","text":"","code":"getAvgPeaks(object)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAvgPeaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract peaks of average spectra — getAvgPeaks","text":"object Object class MALDIassay","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAvgPeaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract peaks of average spectra — getAvgPeaks","text":"List MALDIquantMassPeaks","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAvgPeaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract peaks of average spectra — getAvgPeaks","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) getAvgPeaks(Blank2022res)[[1]] #> S4 class type            : MassPeaks             #> Number of m/z values     : 169                   #> Range of m/z values      : 406.914 - 896.58      #> Range of intensity values: 3.853e-03 - 1.805e+00 #> Range of snr values      : 3 - 268.316           #> Memory usage             : 16.977 KiB            #> Name1                    : 0.O13                 #> Name2                    : 0.O14                 #> Name3                    : 0.P13                 #> Name4                    : 0.P14                 #> File1                    : Y:\\9-Martina Blank\\R\\Example_data_Rscript\\20191209_EOC_plate24hR1\\SAHA\\0\\0_O13\\1\\1SRef\\fid #> File2                    : Y:\\9-Martina Blank\\R\\Example_data_Rscript\\20191209_EOC_plate24hR1\\SAHA\\0\\0_O14\\1\\1SRef\\fid #> File3                    : Y:\\9-Martina Blank\\R\\Example_data_Rscript\\20191209_EOC_plate24hR1\\SAHA\\0\\0_P13\\1\\1SRef\\fid #> File4                    : Y:\\9-Martina Blank\\R\\Example_data_Rscript\\20191209_EOC_plate24hR1\\SAHA\\0\\0_P14\\1\\1SRef\\fid"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAvgSpectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract average spectra — getAvgSpectra","title":"Extract average spectra — getAvgSpectra","text":"Extract average spectra","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAvgSpectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract average spectra — getAvgSpectra","text":"","code":"getAvgSpectra(object)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAvgSpectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract average spectra — getAvgSpectra","text":"object Object class MALDIassay","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAvgSpectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract average spectra — getAvgSpectra","text":"List MALDIquantMassSpectrum","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getAvgSpectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract average spectra — getAvgSpectra","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) getAvgSpectra(Blank2022res)[[1]] #> S4 class type            : MassSpectrum          #> Number of m/z values     : 21985                 #> Range of m/z values      : 399.861 - 899.94      #> Range of intensity values: 6.717e-05 - 1.805e+00 #> Memory usage             : 356.375 KiB           #> Name1                    : 0.O13                 #> Name2                    : 0.O14                 #> Name3                    : 0.P13                 #> Name4                    : 0.P14                 #> File1                    : Y:\\9-Martina Blank\\R\\Example_data_Rscript\\20191209_EOC_plate24hR1\\SAHA\\0\\0_O13\\1\\1SRef\\fid #> File2                    : Y:\\9-Martina Blank\\R\\Example_data_Rscript\\20191209_EOC_plate24hR1\\SAHA\\0\\0_O14\\1\\1SRef\\fid #> File3                    : Y:\\9-Martina Blank\\R\\Example_data_Rscript\\20191209_EOC_plate24hR1\\SAHA\\0\\0_P13\\1\\1SRef\\fid #> File4                    : Y:\\9-Martina Blank\\R\\Example_data_Rscript\\20191209_EOC_plate24hR1\\SAHA\\0\\0_P14\\1\\1SRef\\fid"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getBinTol.html","id":null,"dir":"Reference","previous_headings":"","what":"Get binning tolerance — getBinTol","title":"Get binning tolerance — getBinTol","text":"Get binning tolerance","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getBinTol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get binning tolerance — getBinTol","text":"","code":"getBinTol(object)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getBinTol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get binning tolerance — getBinTol","text":"object Object class MALDIassay","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getBinTol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get binning tolerance — getBinTol","text":"Numeric, tolerance used binning Dalton.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getBinTol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get binning tolerance — getBinTol","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) getBinTol(Blank2022res) #> [1] 2e-04"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getConc.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the concentrations used in a MALDIassay — getConc","title":"Extract the concentrations used in a MALDIassay — getConc","text":"Extract concentrations used MALDIassay","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getConc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the concentrations used in a MALDIassay — getConc","text":"","code":"getConc(object)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getConc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the concentrations used in a MALDIassay — getConc","text":"object Object class MALDIassay","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getConc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the concentrations used in a MALDIassay — getConc","text":"Numeric vector, concentrations used MALDIassay","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getConc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the concentrations used in a MALDIassay — getConc","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) head(getConc(Blank2022res)) #> [1] 0.00 0.00 0.00 0.00 0.04 0.04"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getCurveFits.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract curve fits — getCurveFits","title":"Extract curve fits — getCurveFits","text":"Extract curve fits","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getCurveFits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract curve fits — getCurveFits","text":"","code":"getCurveFits(object)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getCurveFits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract curve fits — getCurveFits","text":"object Object class MALDIassay","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getCurveFits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract curve fits — getCurveFits","text":"List, containing data used fits well nlpr curve fit .","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getCurveFits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract curve fits — getCurveFits","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) fits <- getCurveFits(Blank2022res)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getFittingParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get fitting parameters — getFittingParameters","title":"Get fitting parameters — getFittingParameters","text":"Get fitting parameters","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getFittingParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get fitting parameters — getFittingParameters","text":"","code":"getFittingParameters(object)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getFittingParameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get fitting parameters — getFittingParameters","text":"object Object class MALDIassay","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getFittingParameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get fitting parameters — getFittingParameters","text":"tibble fitting parameters fitted m/z-value","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getFittingParameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get fitting parameters — getFittingParameters","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) head(getFittingParameters(Blank2022res)) #> # A tibble: 6 × 8 #>   mzIdx mz                npar  bottom   top   xmid   scal     s #>   <dbl> <chr>            <dbl>   <dbl> <dbl>  <dbl>  <dbl> <dbl> #> 1     1 406.914163450922     4 0.112   0.252 -0.251 -0.772     1 #> 2     2 428.004132260612     4 0.0595  0.212 -0.217 -5.57      1 #> 3     3 438.890824557592     4 0.00130 0.584  1.08   6.22      1 #> 4     4 439.042346897966     4 0.652   1.08   0.686  1.39      1 #> 5     5 566.961527775518     4 0.0706  0.203  0.694  2.37      1 #> 6     6 676.485447847528     4 0.551   1.04   1.04   1.95      1"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getIntensityMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the intensity matrix of single spectra for all fitted curves — getIntensityMatrix","title":"Get the intensity matrix of single spectra for all fitted curves — getIntensityMatrix","text":"Get intensity matrix single spectra fitted curves","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getIntensityMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the intensity matrix of single spectra for all fitted curves — getIntensityMatrix","text":"","code":"getIntensityMatrix(object, avg = FALSE, excludeNormMz = FALSE)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getIntensityMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the intensity matrix of single spectra for all fitted curves — getIntensityMatrix","text":"object Object class MALDIassay avg Logical, return single spectra intensity matrix (default) average spectra intensity matrix excludeNormMz Logical, exclude normMz intensity matrix.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getIntensityMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the intensity matrix of single spectra for all fitted curves — getIntensityMatrix","text":"matrix columns m/z values rows concentrations/spectra","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getIntensityMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the intensity matrix of single spectra for all fitted curves — getIntensityMatrix","text":"Note returned matrix contains m/z values actually fitted. variance filtering step applied include m/z values. wish get matrix m/z values use MALDIquant::intensityMatrix(getSinglePeaks(object)). average spectra intensity matrix m/z values use MALDIquant::intensityMatrix(getAvgPeaks(object), getAvgSpectra(object)).","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getIntensityMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the intensity matrix of single spectra for all fitted curves — getIntensityMatrix","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) head(getIntensityMatrix(Blank2022res, avg = TRUE, excludeNormMz = TRUE) ) #> Warning: Could not find normMz. No exlusion possible. #> [1] NA NA NA NA NA NA"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getMzFromMzIdx.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the mz value associated with a mzIdx — getMzFromMzIdx","title":"Get the mz value associated with a mzIdx — getMzFromMzIdx","text":"Get mz value associated mzIdx","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getMzFromMzIdx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the mz value associated with a mzIdx — getMzFromMzIdx","text":"","code":"getMzFromMzIdx(object, mzIdx)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getMzFromMzIdx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the mz value associated with a mzIdx — getMzFromMzIdx","text":"object Object class MALDIassay mzIdx numeric, index mass interest (see getPeakStatistics())","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getMzFromMzIdx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the mz value associated with a mzIdx — getMzFromMzIdx","text":"numeric, mz value","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getMzFromMzIdx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the mz value associated with a mzIdx — getMzFromMzIdx","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) getMzFromMzIdx(Blank2022res, mzIdx = 2) #> [1] 428.004"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getMzShift.html","id":null,"dir":"Reference","previous_headings":"","what":"Get mass shift for target mz — getMzShift","title":"Get mass shift for target mz — getMzShift","text":"Get mass shift target mz","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getMzShift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get mass shift for target mz — getMzShift","text":"","code":"getMzShift(peaks, targetMz, tol, tolppm = FALSE, verbose = TRUE)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getMzShift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get mass shift for target mz — getMzShift","text":"peaks List MALDIquant::MassPeak targetMz Numeric, target mass tol Numeric, tolerance around targetMz tolppm Logical, tolerance supplied ppm verbose Logical, print logs console.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getMzShift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get mass shift for target mz — getMzShift","text":"List two entries: MzShift mass shift spectrum specIdx index spectra match targetMz","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getMzShift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get mass shift for target mz — getMzShift","text":"","code":"data(Blank2022peaks) getMzShift(Blank2022peaks, targetMz = 760.585, tol = 0.1, tolppm = FALSE) #> found mz 760.585 in 32 / 32 spectra #> 13:36 mzshift was -0.0796625 in mean and 0.0828  abs. max. #> $mzshift #>  [1] -0.0828 -0.0828 -0.0828 -0.0828 -0.0828 -0.0828 -0.0828 -0.0828 -0.0828 #> [10] -0.0828 -0.0828 -0.0828 -0.0828 -0.0828 -0.0828 -0.0828 -0.0828 -0.0828 #> [19] -0.0828 -0.0828 -0.0828 -0.0828 -0.0828 -0.0828 -0.0828 -0.0828 -0.0828 #> [28] -0.0828 -0.0577 -0.0577 -0.0577 -0.0577 #>  #> $specIdx #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 29 30 31 32 #>"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getNormFactors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get normalization factors from peak data.frame — getNormFactors","title":"Get normalization factors from peak data.frame — getNormFactors","text":"Get normalization factors peak data.frame","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getNormFactors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get normalization factors from peak data.frame — getNormFactors","text":"","code":"getNormFactors(peaksdf, targetMz, tol, tolppm = TRUE, allowNoMatch = TRUE)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getNormFactors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get normalization factors from peak data.frame — getNormFactors","text":"peaksdf data.frame peaks information generated peaks2df() targetMz Numeric, target mass tol Numeric, tolerance around targetMz tolppm Logical, tolerance provided ppm (TRUE) Daltion (FALSE) allowNoMatch Logical, stop targetMz fround single spectrum? TRUE spectra without targetMz match excluded.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getNormFactors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get normalization factors from peak data.frame — getNormFactors","text":"","code":"List with two entries:                                   norm_factor The normalization factor for each spectrum                                   specIdx     The index of the spectra with a match for targetMz"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getNormFactors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get normalization factors from peak data.frame — getNormFactors","text":"","code":"data(Blank2022peaks) getNormFactors(peaks2df(Blank2022peaks), targetMz = 760.585, tol = 0.1, tolppm = FALSE) #> $norm_factor #>  [1] 16141 17827 16463 15979 11687 14565 15224 11857  7949 13138 19570 13271 #> [13] 10036 12771 16056 16157 17366 14420 15080 18108 10366 17430 12866 14851 #> [25] 12895 14920 16715 13496  8735 14091 13168  7955 #>  #> $specIdx #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 29 30 31 32 #>"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getNormMethod.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract normalization method — getNormMethod","title":"Extract normalization method — getNormMethod","text":"Extract normalization method","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getNormMethod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract normalization method — getNormMethod","text":"","code":"getNormMethod(object)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getNormMethod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract normalization method — getNormMethod","text":"object Object class MALDIassay","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getNormMethod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract normalization method — getNormMethod","text":"Character, normalization method used.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getNormMethod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract normalization method — getNormMethod","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) getNormMethod(Blank2022res) #> [1] \"mz\""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getNormMz.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract m/z used for normalization — getNormMz","title":"Extract m/z used for normalization — getNormMz","text":"Extract m/z used normalization","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getNormMz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract m/z used for normalization — getNormMz","text":"","code":"getNormMz(object)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getNormMz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract m/z used for normalization — getNormMz","text":"object Object class MALDIassay","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getNormMz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract m/z used for normalization — getNormMz","text":"Numeric, m/z used normalization","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getNormMz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract m/z used for normalization — getNormMz","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) getNormMz(Blank2022res)  #> [1] 760.585"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getNormMzTol.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract tolerance used for normalization — getNormMzTol","title":"Extract tolerance used for normalization — getNormMzTol","text":"Extract tolerance used normalization","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getNormMzTol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract tolerance used for normalization — getNormMzTol","text":"","code":"getNormMzTol(object)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getNormMzTol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract tolerance used for normalization — getNormMzTol","text":"object Object class MALDIassay","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getNormMzTol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract tolerance used for normalization — getNormMzTol","text":"Numeric, tolerance used normalization","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getNormMzTol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract tolerance used for normalization — getNormMzTol","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) getNormMzTol(Blank2022res) #> [1] 0.1"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getPeakStatistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract peak statistics — getPeakStatistics","title":"Extract peak statistics — getPeakStatistics","text":"Extract peak statistics","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getPeakStatistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract peak statistics — getPeakStatistics","text":"","code":"getPeakStatistics(object, summarise = FALSE)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getPeakStatistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract peak statistics — getPeakStatistics","text":"object Object class MALDIassay summarise Logical, return summarized results (one result per mz per mz spectra)","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getPeakStatistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract peak statistics — getPeakStatistics","text":"tibble peak statistics (R², fold-change, CV%, etc.)","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getPeakStatistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract peak statistics — getPeakStatistics","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) head(getPeakStatistics(Blank2022res, summarise = TRUE)) #> # A tibble: 6 × 9 #>      mz mzIdx pEC50    R2 log2FC  SSMD  `V'`  `Z'`   CRS #>   <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  407.     1  0.28  0.76  -1.17  0.99 -0.17 -3.24     0 #> 2  428.     2  0.22  0.98  -1.84  1.83  0.6  -1.25     0 #> 3  439.     3 -1.07  1      8.81  0.46  1    -5.54     0 #> 4  439.     4 -0.64  0.84   0.73  0.57  0.1  -4.97     0 #> 5  567.     5 -0.7   0.92   1.53  1.29  0.32 -1.63     0 #> 6  676.     6 -0.99  0.93   0.92  1.79  0.53 -0.96     0"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getRecalibrationError.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate remaining calibration error of a MALDIassay object — getRecalibrationError","title":"Calculate remaining calibration error of a MALDIassay object — getRecalibrationError","text":"Calculate remaining calibration error MALDIassay object","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getRecalibrationError.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate remaining calibration error of a MALDIassay object — getRecalibrationError","text":"","code":"getRecalibrationError(object)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getRecalibrationError.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate remaining calibration error of a MALDIassay object — getRecalibrationError","text":"object Object class MALDIassay","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getRecalibrationError.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate remaining calibration error of a MALDIassay object — getRecalibrationError","text":"tibble containing statistics remaining calibration error","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getRecalibrationError.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate remaining calibration error of a MALDIassay object — getRecalibrationError","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) getRecalibrationError(Blank2022res) #> # A tibble: 1 × 5 #>   meanAbs sdAbs maxAbs    mean    sd #>     <dbl> <dbl>  <dbl>   <dbl> <dbl> #> 1  0.0126     0 0.0126 -0.0126     0"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getSNR.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract SNR used for peak detection — getSNR","title":"Extract SNR used for peak detection — getSNR","text":"Extract SNR used peak detection","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getSNR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract SNR used for peak detection — getSNR","text":"","code":"getSNR(object)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getSNR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract SNR used for peak detection — getSNR","text":"object Object class MALDIassay","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getSNR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract SNR used for peak detection — getSNR","text":"Numeric, SNR used peak detection","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getSNR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract SNR used for peak detection — getSNR","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) getSNR(Blank2022res) #> [1] 3"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getSinglePeaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract peaks of single spectra spectra (before average calculation) — getSinglePeaks","title":"Extract peaks of single spectra spectra (before average calculation) — getSinglePeaks","text":"Extract peaks single spectra spectra (average calculation)","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getSinglePeaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract peaks of single spectra spectra (before average calculation) — getSinglePeaks","text":"","code":"getSinglePeaks(object)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getSinglePeaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract peaks of single spectra spectra (before average calculation) — getSinglePeaks","text":"object Object class MALDIassay","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getSinglePeaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract peaks of single spectra spectra (before average calculation) — getSinglePeaks","text":"List MALDIquantMassPeaks","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getSinglePeaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract peaks of single spectra spectra (before average calculation) — getSinglePeaks","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) getSinglePeaks(Blank2022res)[[1]] #> S4 class type            : MassPeaks             #> Number of m/z values     : 216                   #> Range of m/z values      : 406.775 - 898.561     #> Range of intensity values: 4.956e-04 - 1.909e+00 #> Range of snr values      : NA - NA               #> Memory usage             : 15.688 KiB            #> Name                     : 0.O13                 #> File                     : Y:\\9-Martina Blank\\R\\Example_data_Rscript\\20191209_EOC_plate24hR1\\SAHA\\0\\0_O13\\1\\1SRef\\fid"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getSingleSpecIntensity.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the intensities of single spectra for a given mzIdx — getSingleSpecIntensity","title":"Extract the intensities of single spectra for a given mzIdx — getSingleSpecIntensity","text":"Extract intensities single spectra given mzIdx","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getSingleSpecIntensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the intensities of single spectra for a given mzIdx — getSingleSpecIntensity","text":"","code":"getSingleSpecIntensity(object, mz_idx)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getSingleSpecIntensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the intensities of single spectra for a given mzIdx — getSingleSpecIntensity","text":"object Object class MALDIassay mz_idx Integer, index mz","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getSingleSpecIntensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the intensities of single spectra for a given mzIdx — getSingleSpecIntensity","text":"Numeric vector, intensities mzIdx","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getSingleSpecIntensity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the intensities of single spectra for a given mzIdx — getSingleSpecIntensity","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) head(getSingleSpecIntensity(Blank2022res, 2)) #>         0         0         0         0      0.04      0.04  #> 0.2338765 0.1602625 0.3010994 0.1878716 0.3570634 0.1138345"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getSpots.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the spot coordinates of spectra — getSpots","title":"Get the spot coordinates of spectra — getSpots","text":"Get spot coordinates spectra","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getSpots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the spot coordinates of spectra — getSpots","text":"","code":"getSpots(object, singleSpec = TRUE)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getSpots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the spot coordinates of spectra — getSpots","text":"object Object class MALDIassay singleSpec Logical, extract spot coordinates single spectra (default) average spectra.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getSpots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the spot coordinates of spectra — getSpots","text":"character vector spot coordinates. case average spectra multiple spots concatenated.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getSpots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the spot coordinates of spectra — getSpots","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) # spots per spectrum getSpots(Blank2022res, singleSpec = TRUE) #>     0     0     0     0  0.04  0.04  0.04  0.04  0.12  0.12  0.12  0.12  0.37  #> \"O13\" \"O14\" \"P13\" \"P14\" \"M13\" \"M14\" \"N13\" \"N14\" \"K13\" \"K14\" \"L13\" \"L14\" \"I13\"  #>  0.37  0.37  0.37  1.11  1.11  1.11  1.11  3.33  3.33  3.33  3.33    10    10  #> \"I14\" \"J13\" \"J14\" \"G13\" \"G14\" \"H13\" \"H14\" \"E13\" \"E14\" \"F13\" \"F14\" \"C13\" \"C14\"  #>    10    10    30    30    30    30  #> \"D13\" \"D14\" \"A13\" \"A14\" \"B13\" \"B14\"   #spots per concentration getSpots(Blank2022res, singleSpec = FALSE) #>                 0              0.04              0.12              0.37  #> \"O13 O14 P13 P14\" \"M13 M14 N13 N14\" \"K13 K14 L13 L14\" \"I13 I14 J13 J14\"  #>              1.11              3.33                10                30  #> \"G13 G14 H13 H14\" \"E13 E14 F13 F14\" \"C13 C14 D13 D14\" \"A13 A14 B13 B14\""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getVarFilterMethod.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract variance filtering method — getVarFilterMethod","title":"Extract variance filtering method — getVarFilterMethod","text":"Extract variance filtering method","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getVarFilterMethod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract variance filtering method — getVarFilterMethod","text":"","code":"getVarFilterMethod(object)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getVarFilterMethod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract variance filtering method — getVarFilterMethod","text":"object Object class MALDIassay","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getVarFilterMethod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract variance filtering method — getVarFilterMethod","text":"Character variance filtering method used","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/getVarFilterMethod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract variance filtering method — getVarFilterMethod","text":"","code":"# see example for `fitCurve()` to see how this data was generated data(Blank2022res) getVarFilterMethod(Blank2022res) #> [1] \"mean\""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/isMALDIassay.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if object is of class MALDIassay — isMALDIassay","title":"Check if object is of class MALDIassay — isMALDIassay","text":"Check object class MALDIassay","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/isMALDIassay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if object is of class MALDIassay — isMALDIassay","text":"","code":"isMALDIassay(object)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/isMALDIassay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if object is of class MALDIassay — isMALDIassay","text":"object object text","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/isMALDIassay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if object is of class MALDIassay — isMALDIassay","text":"logical, TRUE object class MALDIassay","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/isMALDIassay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if object is of class MALDIassay — isMALDIassay","text":"","code":"x <- 1 # FALSE isMALDIassay(x) #> [1] FALSE # TRUE isMALDIassay(Blank2022res) #> [1] TRUE"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/loadSpectra.html","id":null,"dir":"Reference","previous_headings":"","what":"load bruker MALDI target plate spectra — loadSpectra","title":"load bruker MALDI target plate spectra — loadSpectra","text":"load bruker MALDI target plate spectra","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/loadSpectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"load bruker MALDI target plate spectra — loadSpectra","text":"","code":"loadSpectra(Dir, filter = NA, nameSpectra = TRUE, verbose = TRUE)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/loadSpectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"load bruker MALDI target plate spectra — loadSpectra","text":"Dir Character, parent directory spectra. filter Character vector, filter spectra match given vector. nameSpectra Logical, TRUE spectra resulting list named according dirname. verbose Logical, print logs console.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/loadSpectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"load bruker MALDI target plate spectra — loadSpectra","text":"List MALDIquant::MassSpectra","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/loadSpectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"load bruker MALDI target plate spectra — loadSpectra","text":"","code":"dataDir <- system.file(\"extdata\", package=\"MALDIcellassay\") unzip(file.path(dataDir, \"example-raw-spectra.zip\"))  loadSpectra(\"example-raw-spectra/\") #> 13:36 Loading spectra... #>  #> Progress: 100%   #> $`0.0001` #> S4 class type            : MassSpectrum          #> Number of m/z values     : 86835                 #> Range of m/z values      : 1802.533 - 24896.647  #> Range of intensity values: 1.225e+05 - 8.714e+05 #> Memory usage             : 1.336 MiB             #> Name                     : 0_0001.J1             #> File                     : /home/runner/work/MALDIcellassay/MALDIcellassay/docs/reference/example-raw-spectra/0.0001/0_J1/1/1SLin/fid #>   unlink(\"example-raw-spectra/\", recursive = TRUE)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/loadSpectraMzML.html","id":null,"dir":"Reference","previous_headings":"","what":"load mzML spectra — loadSpectraMzML","title":"load mzML spectra — loadSpectraMzML","text":"load mzML spectra","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/loadSpectraMzML.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"load mzML spectra — loadSpectraMzML","text":"","code":"loadSpectraMzML(Dir, filter = NA, nameSpectra = TRUE, verbose = TRUE)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/loadSpectraMzML.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"load mzML spectra — loadSpectraMzML","text":"Dir Character, parent directory spectra. filter Character vector, filter spectra match given vector. nameSpectra Logical, TRUE spectra resulting list named according dirname. verbose Logical, print logs console","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/loadSpectraMzML.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"load mzML spectra — loadSpectraMzML","text":"List MALDIquant::MassSpectra","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/loadSpectraMzML.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"load mzML spectra — loadSpectraMzML","text":"","code":"dataDir <- system.file(\"extdata\", package=\"MALDIcellassay\")  loadSpectraMzML(file.path(dataDir, \"Koch2024mzML\")) #> 13:36 Loading spectra... #>  #> Progress: 100%   #> $`0.0001` #> S4 class type            : MassSpectrum          #> Number of m/z values     : 86835                 #> Range of m/z values      : 1802.533 - 24896.647  #> Range of intensity values: 1.225e+05 - 8.714e+05 #> Memory usage             : 1.327 MiB             #> File                     : /home/runner/work/_temp/Library/MALDIcellassay/extdata/Koch2024mzML/0.0001.mzML #>"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize spectra and peaks — normalize","title":"Normalize spectra and peaks — normalize","text":"Normalize spectra peaks","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize spectra and peaks — normalize","text":"","code":"normalize(spec, peaks, normMeth, normMz, normTol)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize spectra and peaks — normalize","text":"spec List MALDIquant::MassSpectrum peaks List MALDIquant::MassPeaks normMeth Character, normalization method. Options \"TIC\", \"median\" \"mz\". normMz Numeric, mz used normalize. normTol Numeric, tolerance around normMz.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize spectra and peaks — normalize","text":"List lists normalized MALDIquant::MassSpectrum, normalized MALDIquant::MassPeaks, normalization factors well indicies spectra containing normMz case normMeth = \"mz\",","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize spectra and peaks — normalize","text":"","code":"data(Blank2022spec) data(Blank2022peaks) norm <- normalize(Blank2022spec, Blank2022peaks, normMeth = \"mz\", normMz = 760.585, normTol = 0.1)  # normalization factors norm$factor  #>  [1] 16141 17827 16463 15979 11687 14565 15224 11857  7949 13138 19570 13271 #> [13] 10036 12771 16056 16157 17366 14420 15080 18108 10366 17430 12866 14851 #> [25] 12895 14920 16715 13496  8735 14091 13168  7955"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/normalizeByFactor.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply normalization factors to spectra — normalizeByFactor","title":"Apply normalization factors to spectra — normalizeByFactor","text":"Apply normalization factors spectra","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/normalizeByFactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply normalization factors to spectra — normalizeByFactor","text":"","code":"normalizeByFactor(spec, factors)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/normalizeByFactor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply normalization factors to spectra — normalizeByFactor","text":"spec List MALDIquant::MassSpectrum MALDIquant::MassPeaks factors Numeric vector normalization factors. See getNormFactors().","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/normalizeByFactor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply normalization factors to spectra — normalizeByFactor","text":"","code":"List of normalized Spectra or Peaks"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/normalizeByFactor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply normalization factors to spectra — normalizeByFactor","text":"","code":"#' data(Blank2022peaks) normFactors <-  getNormFactors(peaks2df(Blank2022peaks),                                 targetMz = 760.585,                                 tol = 0.1,                                 tolppm = FALSE) normPeaks <- normalizeByFactor(Blank2022peaks,                                 normFactors$norm_factor)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/peaks2df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a list of peaks to a data.frame — peaks2df","title":"Convert a list of peaks to a data.frame — peaks2df","text":"Convert list peaks data.frame","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/peaks2df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a list of peaks to a data.frame — peaks2df","text":"","code":"peaks2df(peaks)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/peaks2df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a list of peaks to a data.frame — peaks2df","text":"peaks (list ) MALDIquant::MassPeaks","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/peaks2df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a list of peaks to a data.frame — peaks2df","text":"Data.frame peak data","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/peaks2df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a list of peaks to a data.frame — peaks2df","text":"","code":"data(Blank2022peaks)  peakdf <- peaks2df(Blank2022peaks[1:2]) head(peakdf) #>   ID plotIdx peakIdx       mz  int        SNR #> 1  0       2     2_1 407.0157 3644 100.477834 #> 2  0       2     2_2 408.0435  329   9.067815 #> 3  0       2     2_3 409.1093  376  10.358639 #> 4  0       2     2_4 422.9992  679  18.316389 #> 5  0       2     2_5 424.0283  233   6.268098 #> 6  0       2     2_6 428.1196 2857  75.987790"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/plotCurves.html","id":null,"dir":"Reference","previous_headings":"","what":"generate ggplot objects for each of the curve fits in a MALDIassay object — plotCurves","title":"generate ggplot objects for each of the curve fits in a MALDIassay object — plotCurves","text":"generate ggplot objects curve fits MALDIassay object","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/plotCurves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate ggplot objects for each of the curve fits in a MALDIassay object — plotCurves","text":"","code":"plotCurves(object, mzIdx = NULL, errorbars = c(\"none\", \"sd\", \"sem\"))"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/plotCurves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate ggplot objects for each of the curve fits in a MALDIassay object — plotCurves","text":"object object class MALDIassay mzIdx numeric, indicies mz values plot (see getPeakStatistics()). Note, fc_thresh R2_thresh filters apply mzIdx set! errorbars character, add error bars plot. Either standard error mean (sem) standard deviation (sd) regards measurement replicates errorbars (none).","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/plotCurves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate ggplot objects for each of the curve fits in a MALDIassay object — plotCurves","text":"list ggplot objects","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/plotCurves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generate ggplot objects for each of the curve fits in a MALDIassay object — plotCurves","text":"","code":"data(Blank2022res) plotCurves(Blank2022res, mzIdx = 2, errorbars = \"sd\")"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/plotPeak.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a peak of interest from a MALDIassay object — plotPeak","title":"Plot a peak of interest from a MALDIassay object — plotPeak","text":"Plot peak interest MALDIassay object","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/plotPeak.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a peak of interest from a MALDIassay object — plotPeak","text":"","code":"plotPeak(object, mzIdx, tol = 0.8)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/plotPeak.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a peak of interest from a MALDIassay object — plotPeak","text":"object object class MALDIassay mzIdx numeric, index mass interest (see getPeakStatistics()) tol numeric, tolerance around peak plot","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/plotPeak.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a peak of interest from a MALDIassay object — plotPeak","text":"ggplot object","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/plotPeak.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a peak of interest from a MALDIassay object — plotPeak","text":"","code":"data(Blank2022res) plotPeak(Blank2022res, mzIdx = 2)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/shiftMassAxis.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift mass axis — shiftMassAxis","title":"Shift mass axis — shiftMassAxis","text":"Shift mass axis","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/shiftMassAxis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shift mass axis — shiftMassAxis","text":"","code":"shiftMassAxis(spec, mzdiff)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/shiftMassAxis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shift mass axis — shiftMassAxis","text":"spec List MALDIquant::MassSpectrum MALDIquant::MassPeaks mzdiff Numeric vector, see getMzShift()","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/shiftMassAxis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shift mass axis — shiftMassAxis","text":"List MALDIquant::MassSpectrum MALDIquant::MassPeaks shifted mass axis.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/shiftMassAxis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shift mass axis — shiftMassAxis","text":"","code":"data(Blank2022spec) # raw mz head(Blank2022spec[[1]]@mass) #> [1] 400.0029 400.0210 400.0392 400.0574 400.0756 400.0938  # shifted mz shifted <-shiftMassAxis(Blank2022spec[1:2], c(0.5, 0.5)) head(shifted[[1]]@mass) #> [1] 400.5029 400.5210 400.5392 400.5574 400.5756 400.5938"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/transformConc2Log.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert concentration to log10 and replace zero's — transformConc2Log","title":"Convert concentration to log10 and replace zero's — transformConc2Log","text":"Convert concentration log10 replace zero's","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/transformConc2Log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert concentration to log10 and replace zero's — transformConc2Log","text":"","code":"transformConc2Log(conc)"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/transformConc2Log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert concentration to log10 and replace zero's — transformConc2Log","text":"conc numeric, concentrations.","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/transformConc2Log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert concentration to log10 and replace zero's — transformConc2Log","text":"numeric, log10 transformed concentrations","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/reference/transformConc2Log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert concentration to log10 and replace zero's — transformConc2Log","text":"","code":"transformConc2Log(c(0.1, 0.01,0.001)) #> [1] -1 -2 -3"},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/news/index.html","id":"maldicellassay-development-version","dir":"Changelog","previous_headings":"","what":"MALDIcellassay (development version)","title":"MALDIcellassay (development version)","text":"explain acronyms DESCRIPTION file make readme informative add logo add citation corrections example-vignette","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/news/index.html","id":"maldicellassay-0447","dir":"Changelog","previous_headings":"","what":"MALDIcellassay 0.4.47","title":"MALDIcellassay 0.4.47","text":"CRAN release: 2024-08-29 fix problems description title field DESCRITPION file","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/news/index.html","id":"maldicellassay-0446","dir":"Changelog","previous_headings":"","what":"MALDIcellassay 0.4.46","title":"MALDIcellassay 0.4.46","text":"fix problems related invalid file URI man/calculateZPrime.Rd add examples functions add example data add verbose argument functions print via cat substituted cat warning stop whenever possible","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/news/index.html","id":"maldicellassay-0445","dir":"Changelog","previous_headings":"","what":"MALDIcellassay 0.4.45","title":"MALDIcellassay 0.4.45","text":"fix problems CRAN submission using ::: import functions","code":""},{"path":"https://cemos-mannheim.github.io/MALDIcellassay/news/index.html","id":"maldicellassay-0440","dir":"Changelog","previous_headings":"","what":"MALDIcellassay 0.4.40","title":"MALDIcellassay 0.4.40","text":"Initial CRAN submission.","code":""}]
