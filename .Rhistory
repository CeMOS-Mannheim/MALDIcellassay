plot(prc$spec[[1]], xlim = c(724, 727))
plot(prc$spec[[1]], xlim = c(725, 726))
plot(Blank2022spec[[1]], xlim = c(725, 726))
covr::report(()
covr::report()
pak::pak("covr")
covr::report()
devtools::document()
covr::report()
covr::report()
covr::report()
library(MALDIcellassay)
extractSpots(1)
debugonce(extract(spots))
debugonce(extractSpots)
extractSpots(1)
usethis::use_test(getMzShift())
usethis::use_test(getMzShift)
usethis::use_test("getMzShift")
getMzShift(Blank2022spec)
getMzShift(Blank2022peaks)
peakListConstructor <- function(n = 3, metaData = list(test = "test")) {
l <- lapply(1:n,
function(x)
{MALDIquant::createMassPeaks(mass = 1:10,
intensity = abs(rnorm(10, 0, 1)),
snr = 1:10
metaData = metaData)
getMzShift(peakListConstructor())
peakListConstructor <- function(n = 3, metaData = list(test = "test")) {
l <- lapply(1:n,
function(x)
{MALDIquant::createMassPeaks(mass = 1:10,
intensity = abs(rnorm(10, 0, 1)),
snr = 1:10
metaData = metaData)
peakListConstructor <- function(n = 3, metaData = list(test = "test")) {
l <- lapply(1:n,
function(x)
{MALDIquant::createMassPeaks(mass = 1:10,
intensity = abs(rnorm(10, 0, 1)),
snr = 1:10,
metaData = metaData)
})
return(l)
}
getMzShift(peakListConstructor())
dummyPeaks <- peakListConstructor()
names(dummyPeaks) <- LETTERS[1:3]
getMzShift(dummyPeaks
)
is.numeric(as.numeric(dummyPeaks))
is.numeric(as.numeric(names(dummyPeaks)))
names(dummyPeaks)
as.numeric(names(dummyPeaks))
!is.na(as.numeric(names(dummyPeaks)))
any(!is.na(as.numeric(names(dummyPeaks))))
any(is.na(as.numeric(names(dummyPeaks))))
all(is.na(as.numeric(names(dummyPeaks))))
all(!is.na(as.numeric(names(dummyPeaks))))
names(dummyPeaks) <- 1:3
getMzShift(dummyPeaks, 5.1, tol = 0.15)
shift <- getMzShift(dummyPeaks, targetMz = 5.1, tol = 0.15, verbose = FALSE)
library(testthat)
names(shift)
dummyPeaks <- peakListConstructor()
names(dummyPeaks) <- 1:3
shift <- getMzShift(dummyPeaks, targetMz = 5.5, tol = 0.15, verbose = FALSE)
shift <- getMzShift(Blank2022peaks, targetMz = 760.585, tol = 0.15, verbose = FALSE)
length(Blank2022peaks)
c(1:3, 5, 6:11)
c(1:4, 6, 7:11)
covr::report()
5/1e6
5/1e6*1000
5/1e6*100
5/1e6*1000
covr::report()
5/1e6*1000
# successful shift
dummyPeaks <- peakListConstructor()
names(dummyPeaks) <- 1:3
shift <- getMzShift(dummyPeaks, targetMz = 5.001, tol = 1000, verbose = FALSE, tolppm = TRUE)
library(MALDIcellassay)
shift <- getMzShift(dummyPeaks, targetMz = 5.001, tol = 1000, verbose = FALSE, tolppm = TRUE)
# successful shift
dummyPeaks <- peakListConstructor()
peakListConstructor <- function(n = 3, metaData = list(test = "test")) {
l <- lapply(1:n,
function(x)
{MALDIquant::createMassPeaks(mass = 1:10,
intensity = abs(rnorm(10, 0, 1)),
snr = 1:10,
metaData = metaData)
})
return(l)
}
# successful shift
dummyPeaks <- peakListConstructor()
names(dummyPeaks) <- 1:3
shift <- getMzShift(dummyPeaks, targetMz = 5.001, tol = 1000, verbose = FALSE, tolppm = TRUE)
debugonce(getMzShift)
shift <- getMzShift(dummyPeaks, targetMz = 5.001, tol = 1000, verbose = FALSE, tolppm = TRUE)
peaks2df(peaks)
tol
peaksdf %>%
mutate(match = .data$mz > targetMz - tol & .data$mz < targetMz + tol)
targetMz - tol
devtools::load_all()
covr::report()
covr::report()
usethis::use_test("fitCurve")
library(MALDIcellassay)
data("Blank2022spec")
res <- fitCurve(spec = Blank2022spec,
SinglePointRecal = TRUE,
normMz = 760.585,
alignTol = 0.1,
normTol = 0.1,
varFilterMethod = "mean")
View(res)
View(res)
View(res)
getPeakStatistics(res, summarise = TRUE)
stats <- getPeakStatistics(res, summarise = TRUE)
colnames(stats)
dim(stats)
View(stats)
View(res)
View(stats)
View(res)
getNormMethod(res)
covr::report()
usethis::use_test("plotCurve")
library(MALDIcellassay)
plotCurves(Blank2022res, mzIdx = 1 )
plotCurves(Blank2022res, mzIdx = 1, errorbars = "sd")
p <- plotCurves(Blank2022res, mzIdx = 1, errorbars = "sd")
View(p)
p$layers[[1]]
p$layers[[1]]$geom
p$layers[[1]]$geom$objname
p$layers[[1]]$geom
tpyeof(p$layers[[1]]$geom)
typeof(p$layers[[1]]$geom)
class(p$layers[[1]]$geom)
library(testthat)
class(p$layers[[2]]$geom)
class(p$layers[[3]]$geom)
length(p$layers)
p <- plotCurves(Blank2022res, mzIdx = 1, errorbars = "none")
length(p$layers)
p$layers[[1]]$geom
plotCurves(Blank2022res, mzIdx = 1:2, errorbars = "none")
a <- plotCurves(Blank2022res, mzIdx = 1:2, errorbars = "none")
plotCurves(1)
plotCurves(Blank2022res, mzIdx = -1)
plotCurves(Blank2022res, mzIdx = 99)
getAllMz(res)
getAllMz(Blank2022res)
data(Blank2022res)
force(Blank2022res)
View(Blank2022res)
Blank2022res@stats[["mzIdx"]]
seq_along(getAllMz(res))
seq_along(getAllMz(Blank2022res))
devtools::load_all()
plotCurves(Blank2022res, mzIdx = 99)
devtools::load_all()
plotCurves(Blank2022res, mzIdx = 99)
plotCurves(Blank2022res, mzIdx = -1)
plotCurves(Blank2022res, mzIdx = 1:2)
plotCurves(Blank2022res, mzIdx = 23)
plotCurves(Blank2022res, mzIdx = 24)
plotCurves(Blank2022res, mzIdx = "")
covr::report()
covr::report()
devtools::load_all()
# works with sd bars
p <- plotCurves(Blank2022res, mzIdx = 1, errorbars = "sd")
View(p)
class(p)
p$layers[[1]]$geom
class(p$layers[[1]]$geom)
covr::report()
covr::report()
covr::report()
usethis::use_test("normalizeByFactor")
devtools::load_all
devtools::load_all()
normalizeByFactor(spec = spectraListConstructor(), factors = 1:2)
# helper
spectraListConstructor <- function(n = 3, metaData = list(test = "test")) {
l <- lapply(1:n,
function(x)
{MALDIquant::createMassSpectrum(mass = 1:10,
intensity = 1:10,
metaData = metaData)
})
return(l)
}
normalizeByFactor(spec = spectraListConstructor(), factors = 1:2)
normSpec <- normalizeByFactor(spec = spectraListConstructor(), 1:3)
intensity(normSpec)
intensity(normSpec[[1]])
intensity(normSpec[[2]])
covr::report()
covr::report()
covr::report()
library(testthat)
library(MALDIcellassay)
names(Blank2022spec)
names(Blank2022spec) <- NULL
names(Blank2022spec)
LETTERS[32]
rep("test", 32)
names(spec) <- 1:31
spec <- Blank2022spec
names(spec)
spec <- Blank2022spec
names(spec)
data("Blank2022spec")
spec <- Blank2022spec
names(spec)
names(spec)
names(spec) <- 1:31
names(spec)
covr::report()
names(spec)
names(spec) <- NULL
names(spec) <- 1:31
names(spec)
names(spec) <- NULL
names(spec) <- 1
names(spec)
covr::report()
names(spec)
na.omit(names(spec))
length(na.omit(names(spec)))
!length(na.omit(names(spec))) == length(spec)
covr::report()
usethis::use_test("filterVariance")
library(MALDIcellassay)
filterVariance(1:10, method = "mean")
filterVariance(1:10, method = "median", verbose = FALSE)
filterVariance(c(4, 4, 2:9), method = "median", verbose = FALSE)
c(4, 4, 2:9)
median(filterVariance(1:10, method = "mean", verbose = FALSE))
median(c(4, 4, 2:9))
c(4, 4, 2:9)
filterVariance(c(4, 4, 1:9), method = "median", verbose = FALSE)
length(c(4, 4, 1:9))
filterVariance(c(4, 4, 1:10), method = "median", verbose = FALSE)
filterVariance(1:10, method = "q25", verbose = FALSE)
filterVariance(1:10, method = "q75", verbose = FALSE)
covr::report()
covr::report()
usethis::use_test("checkRecalibration")
library(MALDIcellassay)
checkRecalibration(res)
checkRecalibration(Blank2022res)
class(p)
p <- checkRecalibration(Blank2022res)
class(p)
length(p$layers)
p <- checkRecalibration(Blank2022res, 1)
length(p$layers)
View(p)
class(p$layers[[1]]$geom)
class(p$layers[[2]]$geom)
class(p$layers[[3]]$geom)
class(p$layers[[4]]$geom)
class(p$layers[[5]]$geom)
View(p)
p <- checkRecalibration(Blank2022res)
p <- checkRecalibration(Blank2022res, 1)
usethis::use_test("plotPeak")
plotPeak(1)
plotPeak(1,1)
plotPeak(Blank2022res, mzIdx = NULL)
plotPeak(Blank2022res)
plotPeak(Blank2022res, mzIdx = 1)
plotPeak(Blank2022res, mzIdx = 1, tol = 0)
plotPeak(Blank2022res, mzIdx = 1, tol = -1)
plotPeak(Blank2022res, mzIdx = 1, tol = 0.1)
p <- plotPeak(Blank2022res, mzIdx = 1, tol = 0.1)
class(p)
length(p$layers)
class(p$layers[[1]]$geom)
class(p$layers[[2]]$geom)
covr::report()
usethis::use_test("calculateChauvenetCriterion")
#no outlier
sample <- rnorm(n = 8, mean = 0, sd = 0.01)
calculateChauvenetCriterion(sample)
library(MALDIcellassay)
calculateChauvenetCriterion(sample)
# introduce outlier
sample[1] <- 1
calculateChauvenetCriterion(sample)
calculateChauvenetCriterion(sample)[1]
usethis::use_test("sdMassSpectrum")
data("Blank2022spec")
sdMassSpectrum(Blank2022spec, names(Blank2022spec))
s <- sdMassSpectrum(Blank2022spec, names(Blank2022spec))
plot(s[[1]])
library(MALDIquant)
plot(s[[1]])
debugonce(sdMassSpectrum)
plot(s[[1]])
s <- sdMassSpectrum(Blank2022spec, names(Blank2022spec))
View(tmp)
FUN
FUN(1)
FUN(l)
debugonce(colSdColMeans)
debugonce(MALDIcellassay:::colSdColMeans)
s <- sdMassSpectrum(Blank2022spec, names(Blank2022spec))
x
View(x)
sqrt(colVar * n / (n - 1))
isMassSpectrum(s)
isMassSpectrumList(s)
View(s)
devtools::document()
devtools::document()
covr::report()
#no outlier
sample <- rnorm(n = 8, mean = 0, sd = 0.01)
library(MALDIcellassay)
calculateChauvenetCriterion(sample)
all(!calculateChauvenetCriterion(sample))
all(!calculateChauvenetCriterion(1:10))
calculateChauvenetCriterion(1:10)
covr::report()
covr::report()
sample <- rep(3, 8)
calculateChauvenetCriterion(sample)
library(MALDIcellassay)
calculateChauvenetCriterion(sample)
# introduce outlier
sample[1] <- 1
calculateChauvenetCriterion(sample)
covr::report()
library(MALDIcellassay)
#no outlier
sample <- rep(3, 8)
calculateChauvenetCriterion(sample)
set.seed(42)
#no outlier
sample <- rnorm(n = 8, mean = 0, sd = 0.01)
expect_true(all(!calculateChauvenetCriterion(sample)))
calculateChauvenetCriterion(sample)
# introduce outlier
sample[1] <- 1
calculateChauvenetCriterion(sample)
covr::report()
usethis::use_test("getDirectory")
library(MALDIcellassay)
data("Blank2022res")
dir <- getDirectory(Blank2022res)
View(Blank2022res)
usethis::use_test("getVarFilterMethod")
getVarFilterMethod(Blank2022res)
library(testthat)
usethis::use_test("getSNR")
getSNR(Blank2022res)
usethis::use_test("getSingleSpecIntensity")
getSingleSpecIntensity(Blank2022res)
getSingleSpecIntensity(Blank2022res, 1)
length(getSingleSpecIntensity(Blank2022res, 1))
usethis::use_test("getRecalibrationError")
getRecalibrationError(Blank2022res)
getRecalibrationError(Blank2022res)[1]
is.numeric(getRecalibrationError(Blank2022res)[1])
is.numeric(getRecalibrationError(Blank2022res)[[1]])
usethis::use_test("getAllMz")
getAllMz(Blank2022res)
getAllMz(Blank2022res, excludeNormMz = TRUE)
covr::report()
covr::report()
devtools::document()
devtools::document()
covr::report()
covr::report()
getAllMz(Blank2022res, excludeNormMz = FALSE)
library(MALDIcellassay)
getAllMz(Blank2022res, excludeNormMz = TRUE)
covr::report()
covr::report()
covr::report()
devtools::document()
devtools::document()
covr::report()
library(MALDIcellassay+)
library(MALDIcellassay)
data("Blank2022spec")
normTol = 0.1
normMethod = "mz"
normMz = 760.585
# test no normlization and no re-cal
res <- fitCurve(spec = Blank2022spec,
SinglePointRecal = FALSE,
normMz = normMz,
alignTol = 0.1,
normTol = normTol,
varFilterMethod = "mean",
normMeth = "none",
verbose = TRUE,
monoisotopicFilter = TRUE)
browser()
# test no normlization and no re-cal
res <- fitCurve(spec = Blank2022spec,
SinglePointRecal = FALSE,
normMz = normMz,
alignTol = 0.1,
normTol = normTol,
varFilterMethod = "mean",
normMeth = "none",
verbose = TRUE,
monoisotopicFilter = TRUE)
source("D:/R/MALDIcellassay/R/fitCurve.R", echo=TRUE)
devtools::load_all
devtools::load_all()
# test no normlization and no re-cal
res <- fitCurve(spec = Blank2022spec,
SinglePointRecal = FALSE,
normMz = normMz,
alignTol = 0.1,
normTol = normTol,
varFilterMethod = "mean",
normMeth = "none",
verbose = TRUE,
monoisotopicFilter = TRUE)
new("MALDIassay",
avgSpectra = avg$avgSpec,
avgPeaks = avg$avgPeaksBinned,
singlePeaks = singlePeaks,
singleSpecSpots = spots,
normFactors = prc$normFac,
mzShifts = prc$mzShift,
fits = res_list,
stats = stat_df,
included_specIdx = prc$idx,
settings = list(
Conc = as.numeric(nm),
normMz = normMz,
normTol = normTol,
varFilterMethod = varFilterMethod,
monoisotopicFilter = monoisotopicFilter,
alignTol = alignTol,
SNR = SNR,
normMeth = normMeth,
binTol = binTol,
SinglePointRecal = SinglePointRecal
)
new("MALDIassay",
new("MALDIassay",
avgSpectra = avg$avgSpec,
avgPeaks = avg$avgPeaksBinned,
singlePeaks = singlePeaks,
singleSpecSpots = spots,
normFactors = prc$normFac,
mzShifts = prc$mzShift,
fits = res_list,
stats = stat_df,
included_specIdx = prc$idx,
settings = list(
Conc = as.numeric(nm),
normMz = normMz,
normTol = normTol,
varFilterMethod = varFilterMethod,
monoisotopicFilter = monoisotopicFilter,
alignTol = alignTol,
SNR = SNR,
normMeth = normMeth,
binTol = binTol,
SinglePointRecal = SinglePointRecal
)
)
prc$normFac
typeof(prc$normFac)
class(prc$normFac)
browser()
source("D:/R/MALDIcellassay/R/normalize.R", echo=TRUE)
devtools::load_all()
# test no normlization and no re-cal
res <- fitCurve(spec = Blank2022spec,
SinglePointRecal = FALSE,
normMz = normMz,
alignTol = 0.1,
normTol = normTol,
varFilterMethod = "mean",
normMeth = "none",
verbose = TRUE,
monoisotopicFilter = TRUE)
covr::report()
devtools::document()
devtools::document()
covr::report()
covr::report()
devtools::document()
covr::report()
devtools::document()
covr::report()
usethis::use_github_action("test-coverage")
devtools::document()
devtools::document()
pkgload::dev_help('getFittingParameters')
usethis::use_cran_badge()
covr::report()
covr::report()
