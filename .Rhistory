spec_reduced <- lapply(spec, function(x) {
createMassSpectrum(mass = mass(x)[sel], intensity = intensity(x)[sel], metaData = metaData(x))
})
View(spec_reduced)
spec_reduced <- lapply(spec, function(x) {
createMassSpectrum(mass = mass(x)[sel], intensity = intensity(x)[sel])
})
createMassSpectrum(mass = mass(x)[sel], intensity = intensity(x)[sel], metaData = metaData(x))
spec_reduced <- lapply(spec, function(x) {
createMassSpectrum(mass = mass(x)[sel], intensity = intensity(x)[sel], metaData = metaData(x))
})
spec_org <- spec
spec <- spec_reduced
spec <- lapply(spec_org, function(x) {
createMassSpectrum(mass = mass(x)[sel], intensity = intensity(x)[sel], metaData = metaData(x))
})
names(spec_reduced) <- names(spec)
usethis::use_data(spec)
usethis::use_data(spec, overwrite = TRUE)
MALDIquant::plot(spec[[1]], main = "0µM, replicate 1")
MALDIquant::plot(spec[[1]], main = "0µM, replicate 1")
conc <- as.numeric(names(spec))
spec_prc <- MALDIquant::removeBaseline(spec)
avg <- MALDIquant::averageMassSpectra(spec_prc, labels = conc)
MALDIquant::plot(avg[[1]], main = "Overview of mean spectra", xlim = c(755, 765))
for(i in 2:length(avg)) {
MALDIquant::lines(avg[[i]], col = i)
}
conc <- as.numeric(names(spec))
spec_prc <- MALDIquant::removeBaseline(spec)
avg <- MALDIquant::averageMassSpectra(spec_prc, labels = conc)
MALDIquant::plot(avg[[1]], main = "Overview of mean spectra", xlim = c(755, 765))
for(i in 2:length(avg)) {
MALDIquant::lines(avg[[i]], col = i)
}
conc <- as.numeric(names(spec))
spec_prc <- MALDIquant::removeBaseline(spec)
avg <- MALDIquant::averageMassSpectra(spec_prc, labels = conc)
MALDIquant::plot(avg[[1]], main = "Overview of mean spectra", xlim = c(755, 765))
for(i in 2:length(avg)) {
MALDIquant::lines(avg[[i]], col = i)
}
legend(1, 95, legend = names(avg), col = 1:8)
legend("topright", legend = names(avg), col = 1:8)
conc <- as.numeric(names(spec))
spec_prc <- MALDIquant::removeBaseline(spec)
avg <- MALDIquant::averageMassSpectra(spec_prc, labels = conc)
MALDIquant::plot(avg[[1]], main = "Overview of mean spectra", xlim = c(755, 765))
for(i in 2:length(avg)) {
MALDIquant::lines(avg[[i]], col = i)
}
legend("topright", legend = names(avg), col = 1:8)
conc <- as.numeric(names(spec))
spec_prc <- MALDIquant::removeBaseline(spec)
avg <- MALDIquant::averageMassSpectra(spec_prc, labels = conc)
MALDIquant::plot(avg[[1]], main = "Overview of mean spectra", xlim = c(755, 765))
for(i in 2:length(avg)) {
MALDIquant::lines(avg[[i]], col = i)
}
legend("topright", legend = names(avg), col = 1:8, lty=1)
conc <- as.numeric(names(spec))
spec_prc <- MALDIquant::removeBaseline(spec)
avg <- MALDIquant::averageMassSpectra(spec_prc, labels = conc)
MALDIquant::plot(avg[[1]], main = "Overview of mean spectra", xlim = c(755, 765))
for(i in 2:length(avg)) {
MALDIquant::lines(avg[[i]], col = i)
}
legend("topright", legend = paste0(names(avg), "uM"), col = 1:8, lty=1)
library(MALDIcellassay)
library(MALDIcellassay)
devtools::document()
devtools::document()
library(MALDIcellassay)
library(MALDIcellassay)
peaks <- detectPeaks(spec, method = "SuperSmoother", SNR = 3)
mz_shift <- getMzShift(peaksdf = peaks2df(peaks), targetMz = 760.5)
peaks <- detectPeaks(spec, method = "SuperSmoother", SNR = 3)
mz_shift <- getMzShift(peaksdf = peaks2df(peaks), targetMz = 760.5, tol = 100)
peaks <- detectPeaks(spec, method = "SuperSmoother", SNR = 3)
mz_shift <- getMzShift(peaksdf = peaks2df(peaks), targetMz = 760.5, tol = 500)
peaks <- detectPeaks(spec, method = "SuperSmoother", SNR = 3)
mz_shift <- getMzShift(peaksdf = peaks2df(peaks), targetMz = 760.5, tol = 500)
summary(mz_shift$mzshift)
View(spec)
peaks <- detectPeaks(spec, method = "SuperSmoother", SNR = 3)
mz_shift <- getMzShift(peaksdf = peaks2df(peaks), targetMz = 760.585, tol = 500)
summary(mz_shift$mzshift)
spec_align <- shiftMassAxis(spec, mz_shift$mzshift)
peaks_align <- detectPeaks(spec_aling, method = "SuperSmoother", SNR = 3)
peaks_align <- detectPeaks(spec_align, method = "SuperSmoother", SNR = 3)
norm <- getNormFactors(peaksdf = peaks2df(peaks_align), targetMz = 760.585, tol = 100)
peaks_align <- detectPeaks(spec_align, method = "SuperSmoother", SNR = 3)
norm <- getNormFactors(peaksdf = peaks2df(peaks_align), targetMz = 760.585, tol = 100)
summary(norm$norm_factor)
peaks_align <- detectPeaks(spec_align, method = "SuperSmoother", SNR = 3)
norm <- getNormFactors(peaksdf = peaks2df(peaks_align), targetMz = 760.585, tol = 100)
summary(norm$norm_factor)
spec_rdy <- normalizeByFactor(spec_align, norm$norm_factor)
avg_rdy <- MALDIquant::averageMassSpectra(spec_rdy, labels = conc)
MALDIquant::plot(avg_rdy[[1]], main = "Overview of mean spectra", xlim = c(755, 765))
for(i in 2:length(avg_rdy)) {
MALDIquant::lines(avg_rdy[[i]], col = i)
}
legend("topright", legend = paste0(names(avg), "uM"), col = 1:8, lty=1)
avg_rdy <- MALDIquant::averageMassSpectra(spec_rdy, labels = conc)
MALDIquant::plot(avg_rdy[[1]], main = "Overview of mean spectra", xlim = c(755, 765))
for(i in 2:length(avg_rdy)) {
MALDIquant::lines(avg_rdy[[i]], col = i)
}
legend("topright", legend = paste0(names(avg), "uM"), col = 1:8, lty=1)
peaks_rdy <- detectPeaks(avg_rdy, method = "SuperSmoother", SNR = 3)
peaks_rdy <- binPeaks(peaks_rdy)
intmat <- intensityMatrix(peaks_rdy, avg_rdy)
intmat[1:10, 1:10]
peaks_rdy <- detectPeaks(avg_rdy, method = "SuperSmoother", SNR = 3)
peaks_rdy <- binPeaks(peaks_rdy)
intmat <- intensityMatrix(peaks_rdy, avg_rdy)
intmat[1:10,]
peaks_rdy <- detectPeaks(avg_rdy, method = "SuperSmoother", SNR = 3)
peaks_rdy <- binPeaks(peaks_rdy)
intmat <- intensityMatrix(peaks_rdy, avg_rdy)
intmat[,1:10]
peaks_rdy <- detectPeaks(avg_rdy, method = "SuperSmoother", SNR = 3)
peaks_rdy <- binPeaks(peaks_rdy)
intmat <- intensityMatrix(peaks_rdy, avg_rdy)
intmat[,1:8]
peaks_rdy <- detectPeaks(avg_rdy, method = "SuperSmoother", SNR = 3)
peaks_rdy <- binPeaks(peaks_rdy)
intmat <- intensityMatrix(peaks_rdy, avg_rdy)
intmat[,1:5]
peaks_rdy <- detectPeaks(avg_rdy, method = "SuperSmoother", SNR = 3)
peaks_rdy <- binPeaks(peaks_rdy)
intmat <- intensityMatrix(peaks_rdy, avg_rdy)
dim(intmat)
vars <- apply(intmat, 2, var)
idx <- which(vars > mean(vars))
highVarIntmat <- intmat[,idx]
dim(highVarIntmat)
vars <- apply(intmat, 2, var)
idx <- which(vars > mean(vars))
highVarIntmat <- intmat[,idx]
dim(highVarIntmat)
resp <- convertToProp(y = intmat[,1])
resp <- nplr::convertToProp(y = intmat[,1])
model <- nplr::nplr(x = log10(conc), y = resp, useLog = FALSE, npars = 4)
resp <- nplr::convertToProp(y = intmat[,1])
model <- nplr::nplr(x = log10(unique(conc)), y = resp, useLog = FALSE, npars = 4)
resp
log10(unique(conc))
concLog <- log10(unique(conc))
if(any(concLog == -Inf)) {
concLog[which(concLog == -Inf)] <- (min(concLog[which(!concLog == -Inf)])-1)
}
resp <- nplr::convertToProp(y = intmat[,1])
model <- nplr::nplr(x = concLog, y = resp, useLog = FALSE, npars = 4)
concLog <- log10(unique(conc))
if(any(concLog == -Inf)) {
concLog[which(concLog == -Inf)] <- (min(concLog[which(!concLog == -Inf)])-1)
}
resp <- nplr::convertToProp(y = intmat[,1])
model <- nplr::nplr(x = concLog, y = resp, useLog = FALSE, npars = 4)
plot(model)
concLog <- log10(unique(conc))
if(any(concLog == -Inf)) {
concLog[which(concLog == -Inf)] <- (min(concLog[which(!concLog == -Inf)])-1)
}
resp <- nplr::convertToProp(y = intmat[,2])
model <- nplr::nplr(x = concLog, y = resp, useLog = FALSE, npars = 4)
plot(model, main = colnames(intmat)[2])
concLog <- log10(unique(conc))
if(any(concLog == -Inf)) {
concLog[which(concLog == -Inf)] <- (min(concLog[which(!concLog == -Inf)])-1)
}
resp <- nplr::convertToProp(y = intmat[,3])
model <- nplr::nplr(x = concLog, y = resp, useLog = FALSE, npars = 4)
plot(model, main = colnames(intmat)[3])
concLog <- log10(unique(conc))
if(any(concLog == -Inf)) {
concLog[which(concLog == -Inf)] <- (min(concLog[which(!concLog == -Inf)])-1)
}
resp <- nplr::convertToProp(y = intmat[,4])
model <- nplr::nplr(x = concLog, y = resp, useLog = FALSE, npars = 4)
plot(model, main = colnames(intmat)[4])
concLog <- log10(unique(conc))
if(any(concLog == -Inf)) {
concLog[which(concLog == -Inf)] <- (min(concLog[which(!concLog == -Inf)])-1)
}
resp <- nplr::convertToProp(y = intmat[,5])
model <- nplr::nplr(x = concLog, y = resp, useLog = FALSE, npars = 4)
plot(model, main = colnames(intmat)[5])
concLog <- log10(unique(conc))
if(any(concLog == -Inf)) {
concLog[which(concLog == -Inf)] <- (min(concLog[which(!concLog == -Inf)])-1)
}
resp <- nplr::convertToProp(y = intmat[,6])
model <- nplr::nplr(x = concLog, y = resp, useLog = FALSE, npars = 4)
plot(model, main = colnames(intmat)[6])
concLog <- log10(unique(conc))
if(any(concLog == -Inf)) {
concLog[which(concLog == -Inf)] <- (min(concLog[which(!concLog == -Inf)])-1)
}
resp <- nplr::convertToProp(y = intmat[,7])
model <- nplr::nplr(x = concLog, y = resp, useLog = FALSE, npars = 4)
plot(model, main = colnames(intmat)[7])
concLog <- log10(unique(conc))
if(any(concLog == -Inf)) {
concLog[which(concLog == -Inf)] <- (min(concLog[which(!concLog == -Inf)])-1)
}
resp <- nplr::convertToProp(y = intmat[,8])
model <- nplr::nplr(x = concLog, y = resp, useLog = FALSE, npars = 4)
plot(model, main = colnames(intmat)[8])
concLog <- log10(unique(conc))
if(any(concLog == -Inf)) {
concLog[which(concLog == -Inf)] <- (min(concLog[which(!concLog == -Inf)])-1)
}
resp <- nplr::convertToProp(y = intmat[,9])
model <- nplr::nplr(x = concLog, y = resp, useLog = FALSE, npars = 4)
plot(model, main = colnames(intmat)[9])
concLog <- log10(unique(conc))
if(any(concLog == -Inf)) {
concLog[which(concLog == -Inf)] <- (min(concLog[which(!concLog == -Inf)])-1)
}
resp <- nplr::convertToProp(y = intmat[,10])
model <- nplr::nplr(x = concLog, y = resp, useLog = FALSE, npars = 4)
plot(model, main = colnames(intmat)[10])
concLog <- log10(unique(conc))
if(any(concLog == -Inf)) {
concLog[which(concLog == -Inf)] <- (min(concLog[which(!concLog == -Inf)])-1)
}
resp <- nplr::convertToProp(y = intmat[,10])
model <- nplr::nplr(x = concLog, y = resp, useLog = FALSE, npars = 4)
title <- paste0("m/z =", round(colnames(intmat)[10], 2))
concLog <- log10(unique(conc))
if(any(concLog == -Inf)) {
concLog[which(concLog == -Inf)] <- (min(concLog[which(!concLog == -Inf)])-1)
}
resp <- nplr::convertToProp(y = intmat[,10])
model <- nplr::nplr(x = concLog, y = resp, useLog = FALSE, npars = 4)
title <- paste0("m/z =", round(as.numeric(colnames(intmat)[10]), 2))
plot(model, main = title)
concLog <- log10(unique(conc))
if(any(concLog == -Inf)) {
concLog[which(concLog == -Inf)] <- (min(concLog[which(!concLog == -Inf)])-1)
}
resp <- nplr::convertToProp(y = intmat[,10])
model <- nplr::nplr(x = concLog, y = resp, useLog = FALSE, npars = 4)
title <- paste0("m/z =", round(as.numeric(colnames(intmat)[10]), 2))
plot(model, main = title)
conc
fitCurve(spec = spec,
dir = "dir/to/write/results/to",conc = conc, saveIntensityMatrix = FALSE, SinglePointRecal = TRUE, normMz = 760.585, alignTol = 500, normTol = 100)
debugonce(fitCurve)
fitCurve(spec = spec,
dir = getwd(),
conc = conc,
saveIntensityMatrix = FALSE,
SinglePointRecal = TRUE,
normMz = 760.585,
alignTol = 500,
normTol = 100)
#' Fit dose-response curves
#'
#' @param spec                List of MALDIquant::MassSpectrum
#' @param dir                 Character, directory for output
#' @param conc                Numeric vector, concentration for each spectrum. Length has to be the same as length of spec
#' @param normMz              Numeric, mz used for normalization AND for single point recalibration.
#' @param normTol             Numeric, tolerance in Dalton to match normMz
#' @param alignTol            Numeric, tolerance for spectral alignment in Dalton.
#' @param binTol              Numeric, tolerance for binning of peaks. D
#' @param SNR                 Numeric, signal to noise ratio for peak detection.
#' @param allowNoMatches      Logical, if normMz can not be found in a spectrum, proceed and exclude spectrum or stop
#' @param normMeth            Character, normalization method. Can either be "TIC" or "mz". If "mz" then the normMz is used.
#' @param saveIntensityMatrix Logical, save the intensity matrix as xlsx to the disk.
#' @param SinglePointRecal    Logical, perform single point recalibration to normMz
#'
#' @return
#' @export
#'
#' @importFrom MALDIquant removeBaseline calibrateIntensity alignSpectra averageMassSpectra detectPeaks binPeaks intensityMatrix match.closest
#' @importFrom nplr nplr convertToProp getXcurve getYcurve getFitValues getX getY
#' @importFrom dplyr summarise mutate group_by %>% as_tibble arrange
#' @importFrom tibble tibble
#' @importFrom tidyr gather
#' @importFrom ggplot2 ggplot geom_line geom_point scale_x_continuous theme_bw theme element_text labs aes ggsave
#' @importFrom xlsx write.xlsx
fitCurve <- function(spec,
dir,
conc = NA,
normMz = 760.585,
normTol = 0.1,
alignTol = 0.05,
binTol = 0.25,
SNR = 3,
allowNoMatches =TRUE,
normMeth = c("mz", "TIC"),
saveIntensityMatrix = TRUE,
SinglePointRecal = TRUE) {
normMeth <- match.arg(normMeth)
if(!any(is.na(conc))) {
names(spec) <- conc
}
nm <- names(spec)
if(SinglePointRecal) {
# perform single point mass recalibration
peaks <- detectPeaks(spec, SNR = SNR, method = "SuperSmoother")
mzShift <- getMzShift(peaksdf = peaks2df(peaks),
tol = normTol,
targetMz = normMz,
tolppm = FALSE,
allowNoMatch = TRUE)
cat("found mz", normMz, "in", length(mzShift$specIdx), "/", length(spec), "spectra\n")
cat(timeNow(), "mzshift was", mean(mzShift$mzshift), "in mean and", max(abs(mzShift$mzshift)), " abs. max.\n")
spec <- shiftMassAxis(spec[mzShift$specIdx], mzShift$mzshift)
}
cat(timeNow(), "normalizing... \n")
switch(normMeth,
"TIC" = {
spec <- calibrateIntensity(spec, method = "TIC")
},
"mz" = {
peaks <- detectPeaks(spec, SNR = SNR, method = "SuperSmoother")
norm_fac <- getNormFactors(peaksdf = peaks2df(peaks),
targetMz = normMz,
tol = normTol,
allowNoMatch = TRUE,
tolppm = TRUE)
spec <- normalizeByFactor(spec[norm_fac$specIdx], norm_fac$norm_factor)
}
)
cat(timeNow(), "aligning spectra... \n")
spec <- alignSpectra(spec, warpingMethod = "linear",
tolerance = alignTol,
allowNoMatches = allowNoMatches,
emptyNoMatches = allowNoMatches)
res_list <- vector("list", length = length(unique(nm)))
names(res_list) <- unique(nm)
current_names <- nm
cat(timeNow(), "calculating average spectra... \n")
avg_spec <- averageMassSpectra(spec, labels = current_names)
cat(timeNow(), "building intensity matrix and applying variance filter... \n")
peaks <- detectPeaks(avg_spec, method = "SuperSmoother", SNR = SNR)
peaksBinned <- binPeaks(peaks, tolerance = binTol)
# perform variance filtering
intmat <- intensityMatrix(peaksBinned, avg_spec)
rownames(intmat) <- names(avg_spec)
vars <- apply(intmat, 2, var)
idx <- which(vars > mean(vars))
cat("found", length(idx), "peaks with high variance.\n")
mzhits <- as.numeric(colnames(intmat))[idx]
cat(timeNow(), "fitting curves... \n")
current_res <- vector("list", length = length(idx))
names(current_res) <- colnames(intmat[,idx])
for(j in 1:length(idx)) {
df <- intmat[,idx[j]] %>%
as_tibble() %>%
mutate(conc = rownames(intmat)) %>%
mutate(conc = as.numeric(conc)) %>%
arrange(conc)
concLog <- log10(df$conc)
if(any(concLog == -Inf)) {
concLog[which(concLog == -Inf)] <- (min(concLog[which(!concLog == -Inf)])-1)
}
df <- df %>%
mutate(concLog = concLog)
resp <- convertToProp(y = df$value)
model <- nplr(x = concLog, y = resp, useLog = FALSE, npars = 4)
current_res[[j]] <- list(model = model,
df = df)
res_list <- current_res
}
cat(timeNow(), "plotting...", "\n")
for(mz in as.numeric(names(res_list))) {
model <- res_list[[as.character(mz)]]$model
df_C <- tibble(xC = getXcurve(model), yC = getYcurve(model))
df_P <- tibble(x = getX(model), y = getY(model))
df_P %>%
mutate(yfit = getFitValues(model)) %>%
mutate(Sres = (y-yfit)^2,
Stot = (y-mean(y))^2) %>%
summarise(SStot = sum(Stot),
SSres =sum(Sres)) %>%
mutate(R2 = 1-SSres/SStot) %>%
pull(R2) -> R2
ggplot(data = df_P, aes(x = x, y = y)) +
geom_line(data = df_C, aes(x = xC, y = yC)) +
geom_point() +
scale_x_continuous(labels = c(0, 10^df_P$x[-1]), breaks = df_P$x) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
labs(x = "Conc.",
y = "relative Int. [% of max Int.]",
title = paste0( "mz ", round(mz,2), " Da, R\u00B2=", round(R2,4))) -> p
ggsave(filename = file.path(dir, paste0(as.character(Sys.Date()),"_plotR2_", normMeth, "norm_", round(mz,2),".png")), plot = p)
}
cat(timeNow(), "plotting done!", "\n")
if(saveIntensityMatrix) {
cat(timeNow(), "writing intensity matrix...", "\n")
write.xlsx(x = as_tibble(intmat[,idx], rownames = NA),
file = file.path(dir,
paste0(as.character(Sys.Date()),
"_intensityMatrix_",
normMeth,
"norm.xlsx")),
sheetName = "avg")
singlePeaks <- detectPeaks(spec, method = "SuperSmoother", SNR = SNR)
singlePeaks <- binPeaks(singlePeaks, tolerance = binTol)
intmatSingle <- intensityMatrix(singlePeaks, spec)
intmatSingle %>%
as_tibble() %>%
mutate(sample = names(spec)) %>%
gather(mz, int, -sample) %>%
group_by(sample, mz) %>%
summarise(min = min(int, na.rm = TRUE),
mean = mean(int, na.rm = TRUE),
max = max(int, na.rm = TRUE),
stdev = sd(int, na.rm = TRUE),
"cv%" = stdev/mean*100) -> stat_df
rownames(intmatSingle) <- names(spec)
mzsingle <- as.numeric(colnames(intmatSingle))
idx_single <- match.closest(mzhits, mzsingle)
write.xlsx(x = as_tibble(intmatSingle[,idx_single], rownames = NA),
file = file.path(dir,
paste0(as.character(Sys.Date()),
"_intensityMatrix_",
normMeth,
"norm.xlsx")),
sheetName = "singleSpec",
append = TRUE)
write.xlsx(x = as.data.frame(stat_df),
file = file.path(dir,
paste0(as.character(Sys.Date()),
"_intensityMatrix_",
normMeth,
"norm.xlsx")),
sheetName = "mzStats",
append = TRUE)
}
cat(timeNow(), "Done!", "\n")
}
fitCurve(spec = spec,
dir = getwd(),
conc = conc,
saveIntensityMatrix = FALSE,
SinglePointRecal = TRUE,
normMz = 760.585,
alignTol = 500,
normTol = 100)
library(MALDIcellassay)
fitCurve(spec = spec,
dir = getwd(),
conc = conc,
saveIntensityMatrix = FALSE,
SinglePointRecal = TRUE,
normMz = 760.585,
alignTol = 500,
normTol = 100)
fitCurve(spec = spec,
dir = getwd(),
conc = conc,
saveIntensityMatrix = FALSE,
SinglePointRecal = TRUE,
normMz = 760.585,
alignTol = 500,
normTol = 100)
library(MALDIcellassay)
fitCurve(spec = spec,
dir = getwd(),
conc = conc,
saveIntensityMatrix = FALSE,
SinglePointRecal = TRUE,
normMz = 760.585,
alignTol = 500,
normTol = 100)
debugonce(fitCurve)
fitCurve(spec = spec,
dir = getwd(),
conc = conc,
saveIntensityMatrix = FALSE,
SinglePointRecal = TRUE,
normMz = 760.585,
alignTol = 500,
normTol = 100)
devtools::document()
rm(fitCurve())
rm(fitCurve
)
fitCurve(spec = spec,
dir = getwd(),
conc = conc,
saveIntensityMatrix = FALSE,
SinglePointRecal = TRUE,
normMz = 760.585,
alignTol = 500,
normTol = 100)
getwd()
concLog <- log10(unique(conc))
if(any(concLog == -Inf)) {
concLog[which(concLog == -Inf)] <- (min(concLog[which(!concLog == -Inf)])-1)
}
resp <- nplr::convertToProp(y = intmat[,10])
model <- nplr::nplr(x = concLog, y = resp, useLog = FALSE, npars = 4)
title <- paste0("m/z =", round(as.numeric(colnames(intmat)[11]), 2))
plot(model, main = title)
concLog <- log10(unique(conc))
if(any(concLog == -Inf)) {
concLog[which(concLog == -Inf)] <- (min(concLog[which(!concLog == -Inf)])-1)
}
resp <- nplr::convertToProp(y = intmat[,10])
model <- nplr::nplr(x = concLog, y = resp, useLog = FALSE, npars = 4)
title <- paste0("m/z =", round(as.numeric(colnames(intmat)[12]), 2))
plot(model, main = title)
knit_with_parameters('//141.19.124.241/2-QNAP2-AGHOPF-Mitarbeiter/17-Thomas Enzlein/R/MALDIassay/vignettes/Example.Rmd', encoding = 'UTF-8')
