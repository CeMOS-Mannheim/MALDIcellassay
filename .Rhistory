return(df)
}) %>% bind_rows() %>% View()
lapply(files, function(x) {
f <- read_file(x)
has_example <- str_detect(f, "examples")
df <- tibble(func = tools::file_path_sans_ext(basename(x)),
has_example = has_example)
return(df)
}) %>% bind_rows()
df <- lapply(files, function(x) {
f <- read_file(x)
has_example <- str_detect(f, "examples")
df <- tibble(func = tools::file_path_sans_ext(basename(x)),
has_example = has_example)
return(df)
}) %>% bind_rows()
read.csv(file = "NAMESPACE")
read.csv(file = "NAMESPACE", header = FALSE)
read.csv(file = "NAMESPACE") %>%
filter(str_detect(V1, "export"))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export"))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_remove(V1, "export(|)"))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_remove(V1, "export("))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_remove(V1, "export("))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_remove(V1, "export\("))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_remove(V1, "export"))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_extract(V1, "/\(([^)]+)\)/"))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_extract(V1, "\(([^)]+)\)/"))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_extract(V1, "\(([^)]+)\)"))
mutate(V1 = str_extract(V1, "\\(.*?\\)))
read.csv(file = "NAMESPACE", FALSE) %>%
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_extract(V1, "\\(.*?\\)"))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_extract(V1, "\\([^()]+\\)"))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_remove(V1, "export"))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_remove(V1, "export")) %>%
mutate(V1 = substring(V1, 2, nchar(k)-1))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_remove(V1, "export")) %>%
mutate(V1 = substring(V1, 2, nchar(V1)-1))
exports <- read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_remove(V1, "export")) %>%
mutate(V1 = substring(V1, 2, nchar(V1)-1))
left_join(exports, df)
left_join(exports, df, by = c("V1", "func"))
df <- lapply(files, function(x) {
f <- read_file(x)
has_example <- str_detect(f, "examples")
df <- tibble(func = tools::file_path_sans_ext(basename(x)),
has_example = has_example)
return(df)
}) %>%
bind_rows()
exports <- read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_remove(V1, "export")) %>%
mutate(V1 = substring(V1, 2, nchar(V1)-1))
left_join(exports, df, by = c("V1", "func"))
df <- lapply(files, function(x) {
f <- read_file(x)
has_example <- str_detect(f, "examples")
df <- tibble(V1 = tools::file_path_sans_ext(basename(x)),
has_example = has_example)
return(df)
}) %>%
bind_rows()
left_join(exports, df, by = join_by("V1"))
exports
df
left_join(exports, df, by = join_by("V1"))
dataDir <- system.file("extdata", package="MALDIcellassay")
unzip(file.path(dataDir, "example-raw-spectra.zip"))
spec <- loadSpectra("example-raw-spectra/")
unlink("example-raw-spectra/", recursive = TRUE)
usethis::use_data_raw("Koch2024_mzML")
source("~/R/MALDIcellassay/data-raw/Koch2024mzML.R", echo=TRUE)
MALDIquantForeign::exportMzMl(spec, file = "inst/extdata/Koch2024mzML.mzML")
source("~/R/MALDIcellassay/data-raw/Koch2024mzML.R", echo=TRUE)
source("~/R/MALDIcellassay/data-raw/Koch2024mzML.R", echo=TRUE)
devtools::document()
devtools::document()
devtools::run_examples()
source("~/.active-rstudio-document", echo=TRUE)
devtools::document()
source("~/.active-rstudio-document", echo=TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
urlchecker::url_update()
devtools::document()
devtools::document()
devtools::run_examples()
usethis::use_data(Blank2022res, overwrite = TRUE, compress = "xz")
rhub::rhub_check()
devtools::document()
usethis::use_version()
devtools::check_win_devel()
cran <- tools::CRAN_package_db()
desc_with_doi <- grep("doi:", cran$Description, value = TRUE)
desc_with_doi[[1]]
View(cran)
devtools::check_win_devel()
usethis::use_release_issue()
revdepcheck::revdep_check()
checkhelper::find_missing_tags()
install.packages("checkhelper")
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
a<-checkhelper::find_missing_tags()
View(a)
View(a[["functions"]])
checkhelper::check_clean_userspace()
all_files_remaining <- checkhelper::check_clean_userspace()
urlchecker::url_check()
devtools::revdep()
usethis::use_release_issue(version = "0.4.46")
usethis::use_cran_comments()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::document()
Sys.which("makeindex")
tinytex::tlmgr_install("makeindex")
tinytex::reinstall_tinytex(repository = "illinois")
tinytex::tlmgr_install("makeindex")
Sys.which("makeindex")
Sys.which("makeindex")
devtools::check(remote = TRUE, manual = TRUE)
devtools::submit_cran()
withr::with_options(list(repos = c(CRAN = "https://cloud.r-project.org/")),
{callr::default_repos()
rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran")) })
nchar("Automated ('un-targeted') Screening of 'MALDI' Cell Based Assays Based on Dose-Response Curve Fitting")
nchar("Automated Screening of 'MALDI' Cell Based Assays Using Dose-Response Curves")
nchar("Automated Screening of 'MALDI' Cell Based Assays Using Dose-Response Curves")
nchar("Screening of 'MALDI' Cell Based Assays Using Dose-Response Curves")
nchar("Automated MALDI Cell Assays Using Dose-Response Curve Fitting"")
nchar("Automated MALDI Cell Assays Using Dose-Response Curve Fitting")
nchar("Automated 'MALDI' Cell Assays Using Dose-Response Curve Fitting")
urlchecker::url_check()
devtools::document()
pkgload::dev_help('loadSpectra')
pkgload::dev_help('loadSpectra')
devtools::document()
pkgload::dev_help('loadSpectra')
install.packages("retractcheck")
usethis::use_release_issue()
usethis::use_cran_comments()
spelling::spell_check_package()
spelling::spell_check_package()
spelling::spell_check_package()
devtools::document()
spelling::spell_check_package()
devtools::document()
spelling::spell_check_package()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
nchar("Automated 'MALDI' Cell Assays Using Dose-Response Curve Fitting")
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
usethis::use_version(which = "patch")
devtools::submit_cran()
usethis::use_github_release()
usethis::use_dev_version(push = TRUE)
library(MALDIquant)
data("Blank2022peaks")
map_vec(Blank2022peaks,
function(x) {
mz <- mass(x)
idx <- match.closest(760.585,
table = mz,
tolerance = tol,
nomatch = NA_integer_)
mzdiff <- targetMz-mz[idx]
return(mzdiff)
})
library(tidyverse)
map_vec(Blank2022peaks,
function(x) {
mz <- mass(x)
idx <- match.closest(760.585,
table = mz,
tolerance = tol,
nomatch = NA_integer_)
mzdiff <- targetMz-mz[idx]
return(mzdiff)
})
map_vec(Blank2022peaks,
function(x) {
mz <- mass(x)
idx <- match.closest(760.585,
table = mz,
tolerance = 0.1,
nomatch = NA_integer_)
mzdiff <- targetMz-mz[idx]
return(mzdiff)
})
map_vec(Blank2022peaks,
function(x) {
mz <- mass(x)
idx <- match.closest(760.585,
table = mz,
tolerance = 0.1,
nomatch = NA_integer_)
mzdiff <- 760.585-mz[idx]
return(mzdiff)
})
getMzShift(Blank2022peaks, targetMz = 760.585, tol = 0.1, tolppm = FALSE)
library(MALDIcellassay)
getMzShift(Blank2022peaks, targetMz = 760.585, tol = 0.1, tolppm = FALSE)
#' @return
#' List with two entries:
#' `MzShift` The mass shift for each spectrum
#' `specIdx` The index of the spectra with a match for targetMz
#' @export
#' @importFrom MALDIquant match.closest
#'
#' @examples
#' data(Blank2022peaks)
#' getMzShift(Blank2022peaks, targetMz = 760.585, tol = 0.1, tolppm = FALSE)
getMzShift <- function(peaks,
targetMz,
tol,
tolppm = FALSE,
verbose = TRUE) {
stopifnot(isMassPeaksList(peaks))
nm <- names(peaks)
stopifnot(!is.null(nm))
stopifnot(all(!is.na((as.numeric(nm)))))
plot_idx <- 1:length(peaks)
if(tolppm) {
tol <- tol * targetMz / 1e6
}
mzShift <- map_vec(peaks,
function(x) {
mz <- mass(x)
idx <- match.closest(targetMz,
table = mz,
tolerance = tol,
nomatch = NA_integer_)
mzdiff <- targetMz-mz[idx]
return(mzdiff)
})
specIdx <- which(!is.na(mzShift))
mzShift <- na.omit(mzShift)
if (!all(plot_Idx %in% specIdx)) {
if (!allowNoMatch) {
stop("Could not find ", targetMz, " for all spectra! Consider adjusting tol.\n")
}
warning("Could not find ", targetMz, " in spectrum ", paste(which(!(plot_Idx %in% specIdx)), collapse = ", "), ".\n")
specIdx <- sort(which(plot_Idx %in% specIdx))
} else {
specIdx <- plot_Idx
}
if (length(specIdx) < 1) {
stop("Could not find targetMz in any spectrum! Consider adjusting tol.\n")
}
if(verbose) {
cat("found mz", targetMz, "in", length(mzShift$specIdx), "/",
length(peaks), "spectra\n")
cat(timeNow(), "mzshift was", mean(mzShift$mzshift),
"in mean and", max(abs(mzShift$mzshift)), " abs. max.\n")
}
if(length(unique(nm)) != length(unique(nm[mzShift$specIdx]))) {
# stop if a single condition got filtered completely
u_nm <- unique(nm)
u_fil <- unique(nm[mzShift$specIdx])
label_removed <- u_nm[which(!(u_nm %in% u_fil))]
stop("Could not find ", targetMz, " in any spectrum with label ",
paste0(label_removed, collapse = ", "),
".\n Consider increasing tol.\n")
}
return(list(mzShift = mzShift,
specIdx = SpecIdx))
}
getMzShift(Blank2022peaks, targetMz = 760.585, tol = 0.1, tolppm = FALSE)
#' @return
#' List with two entries:
#' `MzShift` The mass shift for each spectrum
#' `specIdx` The index of the spectra with a match for targetMz
#' @export
#' @importFrom MALDIquant match.closest
#'
#' @examples
#' data(Blank2022peaks)
#' getMzShift(Blank2022peaks, targetMz = 760.585, tol = 0.1, tolppm = FALSE)
getMzShift <- function(peaks,
targetMz,
tol,
tolppm = FALSE,
verbose = TRUE) {
stopifnot(isMassPeaksList(peaks))
nm <- names(peaks)
stopifnot(!is.null(nm))
stopifnot(all(!is.na((as.numeric(nm)))))
allIdx <- 1:length(peaks)
if(tolppm) {
tol <- tol * targetMz / 1e6
}
mzShift <- map_vec(peaks,
function(x) {
mz <- mass(x)
idx <- match.closest(targetMz,
table = mz,
tolerance = tol,
nomatch = NA_integer_)
mzdiff <- targetMz-mz[idx]
return(mzdiff)
})
specIdx <- which(!is.na(mzShift))
mzShift <- na.omit(mzShift)
if (!all(allIdx %in% specIdx)) {
if (!allowNoMatch) {
stop("Could not find ", targetMz, " for all spectra! Consider adjusting tol.\n")
}
warning("Could not find ", targetMz, " in spectrum ", paste(which(!(allIdx %in% specIdx)), collapse = ", "), ".\n")
specIdx <- sort(which(allIdx %in% specIdx))
} else {
specIdx <- allIdx
}
if (length(specIdx) < 1) {
stop("Could not find targetMz in any spectrum! Consider adjusting tol.\n")
}
if(verbose) {
cat("found mz", targetMz, "in", length(mzShift$specIdx), "/",
length(peaks), "spectra\n")
cat(timeNow(), "mzshift was", mean(mzShift$mzshift),
"in mean and", max(abs(mzShift$mzshift)), " abs. max.\n")
}
if(length(unique(nm)) != length(unique(nm[mzShift$specIdx]))) {
# stop if a single condition got filtered completely
u_nm <- unique(nm)
u_fil <- unique(nm[mzShift$specIdx])
label_removed <- u_nm[which(!(u_nm %in% u_fil))]
stop("Could not find ", targetMz, " in any spectrum with label ",
paste0(label_removed, collapse = ", "),
".\n Consider increasing tol.\n")
}
return(list(mzShift = mzShift,
specIdx = SpecIdx))
}
getMzShift(Blank2022peaks, targetMz = 760.585, tol = 0.1, tolppm = FALSE)
#' @return
#' List with two entries:
#' `MzShift` The mass shift for each spectrum
#' `specIdx` The index of the spectra with a match for targetMz
#' @export
#' @importFrom MALDIquant match.closest
#'
#' @examples
#' data(Blank2022peaks)
#' getMzShift(Blank2022peaks, targetMz = 760.585, tol = 0.1, tolppm = FALSE)
getMzShift <- function(peaks,
targetMz,
tol,
tolppm = FALSE,
verbose = TRUE) {
stopifnot(isMassPeaksList(peaks))
nm <- names(peaks)
stopifnot(!is.null(nm))
stopifnot(all(!is.na((as.numeric(nm)))))
allIdx <- 1:length(peaks)
if(tolppm) {
tol <- tol * targetMz / 1e6
}
mzShift <- map_vec(peaks,
function(x) {
mz <- mass(x)
idx <- match.closest(targetMz,
table = mz,
tolerance = tol,
nomatch = NA_integer_)
mzdiff <- targetMz-mz[idx]
return(mzdiff)
})
specIdx <- which(!is.na(mzShift))
mzShift <- na.omit(mzShift)
if (!all(allIdx %in% specIdx)) {
if (!allowNoMatch) {
stop("Could not find ", targetMz, " for all spectra! Consider adjusting tol.\n")
}
warning("Could not find ", targetMz, " in spectrum ", paste(which(!(allIdx %in% specIdx)), collapse = ", "), ".\n")
specIdx <- sort(which(allIdx %in% specIdx))
} else {
specIdx <- allIdx
}
if (length(specIdx) < 1) {
stop("Could not find targetMz in any spectrum! Consider adjusting tol.\n")
}
if(verbose) {
cat("found mz", targetMz, "in", length(specIdx), "/",
length(peaks), "spectra\n")
cat(timeNow(), "mzshift was", mean(mzshift),
"in mean and", max(abs(mzshift)), " abs. max.\n")
}
if(length(unique(nm)) != length(unique(nm[specIdx]))) {
# stop if a single condition got filtered completely
u_nm <- unique(nm)
u_fil <- unique(nm[specIdx])
label_removed <- u_nm[which(!(u_nm %in% u_fil))]
stop("Could not find ", targetMz, " in any spectrum with label ",
paste0(label_removed, collapse = ", "),
".\n Consider increasing tol.\n")
}
return(list(mzShift = mzShift,
specIdx = SpecIdx))
}
getMzShift(Blank2022peaks, targetMz = 760.585, tol = 0.1, tolppm = FALSE)
devtools::load_all()
rm(getMzShift)
devtools::load_all()
getMzShift(Blank2022peaks, targetMz = 760.585, tol = 0.1, tolppm = FALSE)
debugonce(getMzShift)
getMzShift(Blank2022peaks, targetMz = 760.585, tol = 0.1, tolppm = FALSE)
devtools::load_all()
getMzShift(Blank2022peaks, targetMz = 760.585, tol = 0.1, tolppm = FALSE)
devtools::load_all()
getMzShift(Blank2022peaks, targetMz = 760.585, tol = 0.1, tolppm = FALSE)
# helper
spectraListConstructor <- function(n = 3, metaData = list(test = "test")) {
l <- lapply(1:n,
function(x)
{MALDIquant::createMassSpectrum(mass = 1:10,
intensity = abs(rnorm(10, 0, 1)),
metaData = metaData)
})
return(l)
}
peakListConstructor <- function(n = 3, metaData = list(test = "test")) {
l <- lapply(1:n,
function(x)
{MALDIquant::createMassPeaks(mass = 1:10,
intensity = abs(rnorm(10, 0, 1)),
snr = 1:10,
metaData = metaData)
})
return(l)
}
data("Blank2022peaks")
# successful shift
dummyPeaks <- peakListConstructor()
names(dummyPeaks) <- 1:3
shift <- getMzShift(dummyPeaks, targetMz = 5.1, tol = 0.15, verbose = TRUE)
names(shift)
devtools::document()
devtools::load_all()
View(shift)
1:3 == 1
data("Blank2022peaks")
# successful shift
dummyPeaks <- peakListConstructor()
names(dummyPeaks) <- 1:3
shift <- getMzShift(dummyPeaks, targetMz = 5.1, tol = 0.15, verbose = TRUE)
expect_equal(names(shift), c("mzshift", "specIdx"))
shift$mzshift == 0.1
shift$mzshift
shift$mzshift == 0.1
shift$mzshift
shift$mzshift+1
shift$mzshift == 0.1
shift$mzshift+1
shift$mzshift
shift$mzshift==0.1
shift$mzshift%in% 0.1
shift$mzshift %in% 0.1
View(shift)
shift[["mzshift"]][["1"]]
shift[["mzshift"]][["1"]]==0.1
shift[["mzshift"]][["1"]]==double(0.1)
double(0.1)
double(1)
shift[["mzshift"]][["1"]]==as.double(0.1)
as.double(shift[["mzshift"]][["1"]])==as.double(0.1)
shift[["mzshift"]][["1"]]< 0.2
shift[["mzshift"]][["1"]]< 0.1
shift[["mzshift"]][["1"]]< 0.99
shift[["mzshift"]][["1"]]< 0.0999
as.numeric(shift[["mzshift"]][["1"]])
as.numeric(shift[["mzshift"]][["1"]])==0.1
shift$mzshift <= 0.1 & shift$mzshift >=0.099
shift <- getMzShift(dummyPeaks, targetMz = 5.001, tol = 1000, verbose = FALSE, tolppm = TRUE)
shift$mzshift <= 0.001 & shift$mzshift >=0.00099
shift$mzshift
shift$mzshift <= 0.00101 & shift$mzshift >=0.00099)
shift$mzshift <= 0.00101 & shift$mzshift >=0.00099
