coord_fixed() +
labs(x = "True concentration",
y = "Predicted concentration")
vi %>%
filter(Importance > 0) %>%
slice_max(Importance, n = 50) %>%
ggplot(aes(x = Variable, y = imp, fill = Sign)) +
geom_col(show.legend = FALSE) +
coord_flip() +
theme_light(base_size = 16) +
labs(x = "m/z",
y = "Feature importance")
vi <- final %>%
extract_fit_parsnip() %>%
vi_model(lambda =par$penalty) %>%
mutate(Variable = factor(round(as.numeric(Variable),1)),
mz = as.numeric(as.character(Variable))) %>%
mutate(Variable = fct_reorder(Variable, Importance),
imp = ifelse(Sign == "NEG", -Importance, Importance))
vi %>%
filter(Importance > 0) %>%
slice_max(Importance, n = 50) %>%
ggplot(aes(x = Variable, y = imp, fill = Sign)) +
geom_col(show.legend = FALSE) +
coord_flip() +
theme_light(base_size = 16) +
labs(x = "m/z",
y = "Feature importance")
par
final
collect_metrics(final, summarize = FALSE)
vi <- final %>%
extract_fit_parsnip() %>%
vi_model(lambda =par$penalty) %>%
mutate(Variable = factor(round(as.numeric(Variable),1)),
mz = as.numeric(as.character(Variable))) %>%
mutate(Variable = fct_reorder(Variable, Importance),
imp = ifelse(Sign == "NEG", -Importance, Importance))
vi %>%
filter(Importance > 0) %>%
slice_max(Importance, n = 50) %>%
ggplot(aes(x = Variable, y = imp, fill = Sign)) +
geom_col(show.legend = FALSE) +
coord_flip() +
theme_light(base_size = 16) +
labs(x = "m/z",
y = "Feature importance")
vi %>%
filter(Importance > 0) %>%
ggplot(aes(x = as.numeric(as.character(Variable)), y = imp, ymax = imp, col = Sign)) +
geom_linerange(aes(ymin = 0), show.legend = FALSE) +
theme_light(base_size = 16) +
labs(x = "m/z",
y = "Variable importance") +
geom_text(data = vi %>%
filter(Importance > 0) %>%
slice_max(Importance, n = 25),
aes(label = Variable),
col = "black", vjust = -0.2,
check_overlap = TRUE)
final %>%
collect_predictions() %>%
ggplot(aes(x = 10^conc, y = 10^.pred)) +
ggpubr::stat_cor() +
scale_x_log10() +
scale_y_log10() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
theme_light(base_size = 16) +
coord_fixed() +
labs(x = "True concentration",
y = "Predicted concentration")
devtools::document()
library(MALDIcellassay)
devtools::document()
library(MALDIcellassay)
devtools::document()
library(MALDIcellassay)
install.packages("styler")
library(styler)
colourpicker:::plotHelperAddin()
styler:::style_active_pkg()
install.packages("lintr")
library(lintr)
lintr:::addin_lint_package()
seq_len(3)
seq_len(1:3)
help("styler_addins")
browseVignettes("PlaquePicker")
devtools::document()
library(MALDIcellassay)
library(MALDIcellassay)
library(MALDIcellassay)
devtools::document()
library(MALDIcellassay)
library(MALDIcellassay)
library(MALDIquant)
library(MALDIquantForeign)
library(tidyverse)
library(PlaquePicker)
library(MALDIcellassay)
library(MALDIcellassay)
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", encoding = 'UTF-8', echo=TRUE)
# fit curves
res <- fitCurve(spec = spec_fil,
conc = names(spec_fil),
unit = "µM",
dir = dir,
SNR = SNR,
varFilterMethod = varFilterMethod,
normMeth = normMeth,
normMz = normMz,
normTol = normTol,
alignTol = alignTol,
binTol = binTol,
markValue = externalIC50,
fc_thresh = fc_thresh,
plot = FALSE, saveIntensityMatrix = FALSE)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/calculateCurveFit.R", echo=TRUE)
# fit curves
res <- fitCurve(spec = spec_fil,
conc = names(spec_fil),
unit = "µM",
dir = dir,
SNR = SNR,
varFilterMethod = varFilterMethod,
normMeth = normMeth,
normMz = normMz,
normTol = normTol,
alignTol = alignTol,
binTol = binTol,
markValue = externalIC50,
fc_thresh = fc_thresh,
plot = FALSE, saveIntensityMatrix = FALSE)
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", echo=TRUE)
# fit curves
res <- fitCurve(spec = spec_fil,
conc = names(spec_fil),
unit = "M",
dir = dir,
SNR = SNR,
varFilterMethod = varFilterMethod,
normMeth = normMeth,
normMz = normMz,
normTol = normTol,
alignTol = alignTol,
binTol = binTol,
markValue = externalIC50,
fc_thresh = fc_thresh,
plot = FALSE, saveIntensityMatrix = FALSE)
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", echo=TRUE)
res
plotCurves(res, mzIdx = 153)
# fit curves
res <- fitCurve(spec = spec_fil,
conc = names(spec_fil),
unit = "µM",
dir = dir,
SNR = SNR,
varFilterMethod = varFilterMethod,
normMeth = normMeth,
normMz = normMz,
normTol = normTol,
alignTol = alignTol,
binTol = binTol,
markValue = externalIC50,
fc_thresh = fc_thresh,
plot = FALSE, saveIntensityMatrix = FALSE)
plotCurves(res, mzIdx = 153)
plotPeak(res, mzIdx = 153)
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", encoding = 'UTF-8', echo=TRUE)
library(MALDIcellassay)
library(MALDIcellassay)
library(MALDIquant)
#### config ####
# change variables to your liking
SNR <- 3 #signal to noise ratio for peak detection
varFilterMethod <- "none" # Variance filtering method can be "mean", "median", "q25", "q75" or "none" (no filtering).
normMz <- 760.585 # mz to recalibrate and normalize to (if normMeth is set to "mz")
normMeth <- "mz" #normalization method. Can either be "TIC", "PQN", "median" or "mz". If "mz" then the normMz is used. If none no normalization is done.
normTol <- 0.1 # tolerance to find recalibration and normalization peak (if normMeth is set to "mz")
alignTol <- 0.01 # tolerance for alignment (done after recalibration, should only make slight adjustments)
binTol <- 0.25 # tolerance for binning (last step of preprocessing before fitting curves)
externalIC50 <- NA # this value will be displayed in the curves. If set to NA no value will be displayed.
fc_thresh <- 1.5 # threshold for fold change above which curves are plotted. The fold-chage is calculated as max/min for a given m/z.
dir <- "Z:/17-Thomas Enzlein/@Thomas/von Stefan/Data_HBL1/"
#### main script ####
# dont change anything from here on
# load spectra
spec <- loadSpectra(dir)
conc <- names(spec)
spec <- removeBaseline(spec, method = "TopHat")
spec <- smoothIntensity(spec, method = "SavitzkyGolay", halfWindowSize = 3)
# filter out spectra with no peaks
peaks <- detectPeaks(spec, SNR = SNR, method = "MAD")
filPeaks <- vapply(peaks,
function(x) {
ifelse(length(mz(x)) > 0, TRUE, FALSE)
},
FUN.VALUE = TRUE)
peaks_fil <- peaks[filPeaks]
spec_fil <- spec[filPeaks]
names(spec_fil) <- conc[filPeaks]
View(spec_fil)
metaData(spec_fil[[1]])
metaData(spec_fil[[1]])$patch
library(MALDIquant)
metaData(spec_fil)$patch
lapply(spec_fil, metaData)
lapply(spec_fil, function(x) {metaData(x)$patch})
vapply(spec_fil, function(x) {metaData(x)$patch}, FUN.VALUE = character())
vapply(spec_fil, function(x) {metaData(x)$patch}, FUN.VALUE = character(1))
avg <- averageMassSpectra(spec_fil, names(spec_fil))
vapply(avg, function(x) {metaData(x)$patch}, FUN.VALUE = character(1))
vapply(avg, function(x) {metaData(x)$patch}, FUN.VALUE = character(24))
lapply(avg, function(x) {metaData(x)$patch})
lapply(avg, function(x) {paste(metaData(x)$patch}))
lapply(avg, function(x) {paste(metaData(x)$patch})
lapply(avg, function(x) {paste(metaData(x)$patch)})
paste(1:5)
paste(1:5, collapse = TRUE)
paste(1:5, collapse = " ")
getSpots <- function(spec) {
if(!isMassSpectrumList(spec)) {
if(!isMassPeaksListt(spec)) {
stop("spec needs to be either a list of MassSpectra or MassPeaks.\n")
}
}
spot <- vapply(spec,
function(x) {
paste(metaData(x)$patch, collapse = " ")
}, FUN.VALUE = character(1))
return(spot)
}
getSpots(spec_fil)
getSpots(avg)
devtools::document()
devtools::document()
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", encoding = 'UTF-8', echo=TRUE)
View(res)
getSpots(res)
#' Get the spot coordinates of spectra
#'
#' @param object      Object of class MALDIassay
#' @param singleSpec  Logical, extract the spot coordinates of single spectra (default) or from average spectra.
#'
#' @return
#' character vector of spot coordinates. In case of average spectra multiple spots are concatenated.
#' @export
getSpots <- function(object, singleSpec = TRUE) {
stopIfNotIsMALDIassay(object)
if(singleSpec) {
spots <- object@singleSpecSpots
return(spots)
} else {
spots <- extractSpots(getAvgSpectra(object))
return(spots)
}
}
getSpots(res)
getSpots(res) %>% as.numeric()
as.numeric(getSpots(res))
as.character(getSpots(res))
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", encoding = 'UTF-8', echo=TRUE)
nplr::getPar(res@fits$`239.937065736271`)
nplr::getPar(res@fits$`239.937065736271`$model)
MALDIcellassay::getCurveFits(res)
fits <- MALDIcellassay::getCurveFits(res)
fits[[1]]
res_list <- lapply(fits, function(x) {
nplr::getPar(x$model)
})
View(res_list)
library(tidyverse)
bind_rows(res_list)
bind_rows(res_list, .id = "mz")
df <- bind_rows(res_list, .id = "mz")
View(df)
getPeakStatistics(res)
getPeakStatistics(res, TRUE)
getPeakStatistics(res, TRUE) %>% left_join(df)
#' Get fitting parameters
#'
#' @param object      Object of class MALDIassay
#'
#' @return
#' tibble of fitting parameters for each fitted m/z-value
#' @export
#' @importFrom nplr getPar
getFittingParameters <- function(object, singleSpec = TRUE) {
stopIfNotIsMALDIassay(object)
fits <- getCurveFits(object)
res_list <- lapply(fits, function(x) {
getPar(x$model)
})
df <- bind_rows(res_list, .id = "mz") %>%
mutate(mz = as.numeric(mz))
return(df)
}
df <- getFittingParameters(res)
library(nplr)
df <- getFittingParameters(res)
df
getPeakStatistics(res, TRUE) %>% left_join(df)
getPeakStatistics(res, TRUE)
#' Get fitting parameters
#'
#' @param object      Object of class MALDIassay
#'
#' @return
#' tibble of fitting parameters for each fitted m/z-value
#' @export
#' @importFrom nplr getPar
getFittingParameters <- function(object, summarise = TRUE) {
stopIfNotIsMALDIassay(object)
fits <- getCurveFits(object)
res_list <- lapply(fits, function(x) {
getPar(x$model)
})
df <- bind_rows(res_list, .id = "mz")
if(summarise) {
df <- df %>%
mutate(mz = round(as.numeric(mz), 3)) %>%
select(mz, par)
}
return(df)
}
getPeakStatistics(res, TRUE) %>% left_join(df)
#' Get fitting parameters
#'
#' @param object      Object of class MALDIassay
#'
#' @return
#' tibble of fitting parameters for each fitted m/z-value
#' @export
#' @importFrom nplr getPar
getFittingParameters <- function(object, summarise = TRUE) {
stopIfNotIsMALDIassay(object)
fits <- getCurveFits(object)
res_list <- lapply(fits, function(x) {
getPar(x$model)
})
df <- bind_rows(res_list, .id = "mz")
if(summarise) {
df <- df %>%
mutate(mz = round(as.numeric(mz), 3)) %>%
select(mz, par)
}
return(df)
}
getPeakStatistics(res, TRUE) %>% left_join(df)
getPeakStatistics(res, TRUE) %>% left_join(getFittingParameters(res))
#' Get fitting parameters
#'
#' @param object      Object of class MALDIassay
#'
#' @return
#' tibble of fitting parameters for each fitted m/z-value
#' @export
#' @importFrom nplr getPar
getFittingParameters <- function(object, summarise = TRUE) {
stopIfNotIsMALDIassay(object)
fits <- getCurveFits(object)
res_list <- lapply(fits, function(x) {
getPar(x$model)
})
df <- bind_rows(res_list, .id = "mz")
if(summarise) {
df <- df %>%
mutate(mz = round(as.numeric(mz), 3)) %>%
select(mz, npar)
}
return(df)
}
getPeakStatistics(res, TRUE) %>% left_join(getFittingParameters(res))
#' Extract peak statistics
#'
#' @param object Object of class MALDIassay
#' @param summarise Logical, return summarised results (one result per mz and not per mz and spectra)
#'
#' @return
#' A tibble with peak statistics (R², fold-change, CV%, etc.)
#' @export
getPeakStatistics <- function(object, summarise = FALSE) {
stopIfNotIsMALDIassay(object)
stats <- object@stats
if (summarise) {
stats <- stats %>%
mutate(mz = round(as.numeric(mz), 3)) %>%
group_by(mz, mzIdx) %>%
summarise(
pIC50 = first(pIC50),
R2 = first(R2),
wgof = first(wgof),
FC = first(fc_window)
) %>%
left_join(getFittingParameters(res, summarise = TRUE)) %>%
mutate(symetric = ifelse(npar < 5, TRUE, FALSE)) %>%
select(-npar)
}
return(stats)
}
getPeakStatistics(res, TRUE)
getPeakStatistics(res, TRUE) %>% filter(!symetric)
plotCurves(res, mzIdx = 3)
plotCurves(res, mzIdx = 5)
plotCurves(res, mzIdx = 7)
plotCurves(res, mzIdx = 8)
plotCurves(res, mzIdx = 9)
plotCurves(res, mzIdx = 10)
plotCurves(res, mzIdx = 11)
plotCurves(res, mzIdx = 12)
plotCurves(res, mzIdx = 13)
test <- function(x) {if(!x) {stop("fail!")}}
test(FALSE)
test(TRUE)
test2 <- function(x) [tryCatch(test(x), finally = "it failed!")]
test2 <- function(x) {tryCatch(test(x), finally = "it failed!")}
test2(TRUE)
test2(FALSE)
test2 <- function(x) {tryCatch(test(x), finally = print("it failed!"))}
test2(FALSE)
test2 <- function(x) {tryCatch(test(x), finally = x)}
test2(FALSE)
tryCatch(1, finally = print("Hello"))
error("1")
test2 <- function(x) {tryCatch(test(x), error = x)}
test2(FALSE)
test2 <- function(x) {tryCatch(test(x), error = function(x) x)}
test2(FALSE)
library(MALDIcellassay)
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", encoding = 'UTF-8', echo=TRUE)
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", encoding = 'UTF-8', echo=TRUE)
library(MALDIcellassay)
getPeakStatistics(res, TRUE)
getPeakStatistics(res, TRUE) %>% View()
devtools::document()
library(MALDIcellassay)
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", encoding = 'UTF-8', echo=TRUE)
getPeakStatistics(res, TRUE) %>% View()
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", encoding = 'UTF-8', echo=TRUE)
getPeakStatistics(res, TRUE) %>% View()
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", encoding = 'UTF-8', echo=TRUE)
getPeakStatistics(res, TRUE) %>% View()
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", encoding = 'UTF-8', echo=TRUE)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/calculateCurveFit.R", echo=TRUE)
# fit curves
res <- fitCurve(spec = spec_fil,
conc = NA,
unit = "µM",
dir = dir,
SNR = SNR,
varFilterMethod = varFilterMethod,
normMeth = normMeth,
normMz = normMz,
normTol = normTol,
alignTol = alignTol,
binTol = binTol,
markValue = externalIC50,
fc_thresh = fc_thresh,
plot = FALSE, saveIntensityMatrix = FALSE)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/calculateCurveFit.R", echo=TRUE)
# fit curves
res <- fitCurve(spec = spec_fil,
conc = NA,
unit = "µM",
dir = dir,
SNR = SNR,
varFilterMethod = varFilterMethod,
normMeth = normMeth,
normMz = normMz,
normTol = normTol,
alignTol = alignTol,
binTol = binTol,
markValue = externalIC50,
fc_thresh = fc_thresh,
plot = FALSE, saveIntensityMatrix = FALSE)
library(MALDIcellassay)
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", encoding = 'UTF-8', echo=TRUE)
library(MALDIcellassay)
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", encoding = 'UTF-8', echo=TRUE)
getPeakStatistics(res, TRUE)
getPeakStatistics(res, TRUE) %>% View()
getPeakStatistics(res, FALSE)
getFittingParameters(res)
getFittingParameters(res) %>% pull(npar) %>% table()
getFittingParameters(res) %>% filter(npar =! 4)
getFittingParameters(res) %>% filter(npar != 4)
library(MALDIcellassay)
labs <- LETTERS[1:8]
labs
labs <- rep(LETTERS[1:3], 4)
labs
rep(LETTERS[1:3], each = 3)
labs <-rep(LETTERS[1:3], each = 3)
idx <- 1:6
labs[idx]
u <- unique(labs)
u_idx <- unique(labs[idx])
u[which(!(u %in% u_idx))]
3 != 3
3 != 2
devtools::document()
devtools::document()
devtools::document()
library(MALDIcellassay)
devtools::document()
library(MALDIcellassay)
devtools::document()
library(MALDIcellassay)
devtools::document()
library(MALDIcellassay)
