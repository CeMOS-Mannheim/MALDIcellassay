scale_x_log10() +
scale_y_log10() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
theme_light(base_size = 16) +
coord_fixed() +
labs(x = "True concentration",
y = "Predicted concentration")
wf <- workflow(rec, spec = linear_reg(penalty = 0.2, mixture = 1) %>%
set_engine("glmnet") %>%
set_mode("regression"))
#par <- select_by_one_std_err(tune_res, desc(penalty), metric = "rsq")
final <- wf %>%
finalize_workflow(par) %>%
last_fit(split,
metrics = metrics)
collect_metrics(final, summarize = FALSE)
wf <- workflow(rec, spec = linear_reg(penalty = 0.5, mixture = 1) %>%
set_engine("glmnet") %>%
set_mode("regression"))
#par <- select_by_one_std_err(tune_res, desc(penalty), metric = "rsq")
final <- wf %>%
finalize_workflow(par) %>%
last_fit(split,
metrics = metrics)
collect_metrics(final, summarize = FALSE)
vi <- final %>%
extract_fit_parsnip() %>%
vi() %>%
mutate(Variable = factor(round(as.numeric(Variable),1)),
mz = as.numeric(as.character(Variable))) %>%
mutate(Variable = fct_reorder(Variable, Importance),
imp = ifelse(Sign == "NEG", -Importance, Importance))
vi %>%
filter(Importance > 0) %>%
slice_max(Importance, n = 50) %>%
ggplot(aes(x = Variable, y = imp, fill = Sign)) +
geom_col(show.legend = FALSE) +
coord_flip() +
theme_light(base_size = 16)
vi %>%
ggplot(aes(x = as.numeric(as.character(Variable)), y = imp, ymax = imp, col = Sign)) +
geom_linerange(aes(ymin = 0), show.legend = FALSE) +
theme_light(base_size = 16) +
labs(x = "m/z",
y = "Variable importance") +
geom_text(data = vi %>%
slice_max(Importance, n = 25),
aes(label = Variable),
col = "black", vjust = -0.2,
check_overlap = TRUE)
final %>%
collect_predictions() %>%
ggplot(aes(x = 10^conc, y = 10^.pred)) +
scale_x_log10() +
scale_y_log10() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
theme_light(base_size = 16) +
coord_fixed() +
labs(x = "True concentration",
y = "Predicted concentration")
final %>% extract_fit_engine() %>%
glmnet:::plot.glmnet(xvar = "lambda", label = TRUE)
wf <- workflow(rec, spec = linear_reg(penalty = 1, mixture = 1) %>%
set_engine("glmnet") %>%
set_mode("regression"))
#par <- select_by_one_std_err(tune_res, desc(penalty), metric = "rsq")
final <- wf %>%
finalize_workflow(par) %>%
last_fit(split,
metrics = metrics)
collect_metrics(final, summarize = FALSE)
vi <- final %>%
extract_fit_parsnip() %>%
vi() %>%
mutate(Variable = factor(round(as.numeric(Variable),1)),
mz = as.numeric(as.character(Variable))) %>%
mutate(Variable = fct_reorder(Variable, Importance),
imp = ifelse(Sign == "NEG", -Importance, Importance))
vi %>%
filter(Importance > 0) %>%
slice_max(Importance, n = 50) %>%
ggplot(aes(x = Variable, y = imp, fill = Sign)) +
geom_col(show.legend = FALSE) +
coord_flip() +
theme_light(base_size = 16)
vi %>%
ggplot(aes(x = as.numeric(as.character(Variable)), y = imp, ymax = imp, col = Sign)) +
geom_linerange(aes(ymin = 0), show.legend = FALSE) +
theme_light(base_size = 16) +
labs(x = "m/z",
y = "Variable importance") +
geom_text(data = vi %>%
slice_max(Importance, n = 25),
aes(label = Variable),
col = "black", vjust = -0.2,
check_overlap = TRUE)
final %>%
collect_predictions() %>%
ggplot(aes(x = 10^conc, y = 10^.pred)) +
scale_x_log10() +
scale_y_log10() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
theme_light(base_size = 16) +
coord_fixed() +
labs(x = "True concentration",
y = "Predicted concentration")
final %>% extract_fit_engine() %>%
glmnet:::plot.glmnet(xvar = "lambda", label = TRUE)
log(1)
final %>% extract_fit_engine()
vi %>%
ggplot(aes(x = as.numeric(as.character(Variable)), y = imp, ymax = imp, col = Sign)) +
geom_linerange(aes(ymin = 0), show.legend = FALSE) +
theme_light(base_size = 16) +
labs(x = "m/z",
y = "Variable importance") +
geom_text(data = vi %>%
slice_max(Importance, n = 25),
aes(label = Variable),
col = "black", vjust = -0.2,
check_overlap = TRUE)
final %>%
extract_fit_parsnip()
vi <- final %>%
extract_fit_parsnip() %>% View()
fittedModel <- vi <- final %>%
extract_fit_parsnip()
parameters(fittedModel)
parameters(final)
wf <- workflow(rec, spec = linear_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet") %>%
set_mode("regression"))
library(doParallel)
registerDoParallel(cores = 3)
tune_res <- tune_grid(wf, resamples = boot, grid = grid, metrics = metrics)
collect_metrics(tune_res, summarize = TRUE)
par <- select_by_one_std_err(tune_res, desc(penalty), metric = "rsq")
par
par
final <- wf %>%
finalize_workflow(par) %>%
last_fit(split,
metrics = metrics)
collect_metrics(final, summarize = FALSE)
par
par$penalty
par$penalty[[1]]
vi <- final %>%
extract_fit_parsnip() %>%
vi_model(lambda =par$penalty) %>%
mutate(Variable = factor(round(as.numeric(Variable),1)),
mz = as.numeric(as.character(Variable))) %>%
mutate(Variable = fct_reorder(Variable, Importance),
imp = ifelse(Sign == "NEG", -Importance, Importance))
vi %>%
filter(Importance > 0) %>%
slice_max(Importance, n = 50) %>%
ggplot(aes(x = Variable, y = imp, fill = Sign)) +
geom_col(show.legend = FALSE) +
coord_flip() +
theme_light(base_size = 16)
vi %>%
ggplot(aes(x = as.numeric(as.character(Variable)), y = imp, ymax = imp, col = Sign)) +
geom_linerange(aes(ymin = 0), show.legend = FALSE) +
theme_light(base_size = 16) +
labs(x = "m/z",
y = "Variable importance") +
geom_text(data = vi %>%
slice_max(Importance, n = 25),
aes(label = Variable),
col = "black", vjust = -0.2,
check_overlap = TRUE)
vi %>%
filter(Importance > 0) %>%
ggplot(aes(x = as.numeric(as.character(Variable)), y = imp, ymax = imp, col = Sign)) +
geom_linerange(aes(ymin = 0), show.legend = FALSE) +
theme_light(base_size = 16) +
labs(x = "m/z",
y = "Variable importance") +
geom_text(data = vi %>%
slice_max(Importance, n = 25),
aes(label = Variable),
col = "black", vjust = -0.2,
check_overlap = TRUE)
vi %>%
filter(Importance > 0)
vi %>%
filter(Importance > 0) %>%
ggplot(aes(x = as.numeric(as.character(Variable)), y = imp, ymax = imp, col = Sign)) +
geom_linerange(aes(ymin = 0), show.legend = FALSE) +
theme_light(base_size = 16) +
labs(x = "m/z",
y = "Variable importance") +
geom_text(data = vi %>%
slice_max(Importance, n = 25),
aes(label = Variable),
col = "black", vjust = -0.2,
check_overlap = TRUE)
vi %>%
filter(Importance > 0) %>%
ggplot(aes(x = as.numeric(as.character(Variable)), y = imp, ymax = imp, col = Sign)) +
geom_linerange(aes(ymin = 0), show.legend = FALSE) +
theme_light(base_size = 16) +
labs(x = "m/z",
y = "Variable importance") +
geom_text(data = vi %>%
filter(Importance > 0) %>%
slice_max(Importance, n = 25),
aes(label = Variable),
col = "black", vjust = -0.2,
check_overlap = TRUE)
final %>%
collect_predictions() %>%
ggplot(aes(x = 10^conc, y = 10^.pred)) +
scale_x_log10() +
scale_y_log10() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
theme_light(base_size = 16) +
coord_fixed() +
labs(x = "True concentration",
y = "Predicted concentration")
final %>% extract_fit_engine() %>%
glmnet:::plot.glmnet(xvar = "lambda", label = TRUE)
grid <- grid_max_entropy(penalty(range = c(-10, 0)), size = 15)
wf <- workflow(rec, spec = linear_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet") %>%
set_mode("regression"))
library(doParallel)
registerDoParallel(cores = 3)
tune_res <- tune_grid(wf, resamples = boot, grid = grid, metrics = metrics)
collect_metrics(tune_res, summarize = TRUE)
par <- select_by_one_std_err(tune_res, desc(penalty), metric = "rsq")
par
final <- wf %>%
finalize_workflow(par) %>%
last_fit(split,
metrics = metrics)
collect_metrics(final, summarize = FALSE)
vi <- final %>%
extract_fit_parsnip() %>%
vi_model(lambda =par$penalty) %>%
mutate(Variable = factor(round(as.numeric(Variable),1)),
mz = as.numeric(as.character(Variable))) %>%
mutate(Variable = fct_reorder(Variable, Importance),
imp = ifelse(Sign == "NEG", -Importance, Importance))
vi %>%
filter(Importance > 0) %>%
slice_max(Importance, n = 50) %>%
ggplot(aes(x = Variable, y = imp, fill = Sign)) +
geom_col(show.legend = FALSE) +
coord_flip() +
theme_light(base_size = 16)
final %>%
collect_predictions() %>%
ggplot(aes(x = 10^conc, y = 10^.pred)) +
scale_x_log10() +
scale_y_log10() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
theme_light(base_size = 16) +
coord_fixed() +
labs(x = "True concentration",
y = "Predicted concentration")
final %>%
collect_predictions() %>%
ggpubr::ggscatter(x = "conc", y = ".pred")
final %>%
collect_predictions() %>%
ggpubr::ggscatter(x = "conc", y = ".pred", add = "reg.line")
final %>%
collect_predictions() %>%
ggplot(aes(x = 10^conc, y = 10^.pred)) +
scale_x_log10() +
scale_y_log10() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
theme_light(base_size = 16) +
coord_fixed() +
labs(x = "True concentration",
y = "Predicted concentration")
final %>%
collect_predictions() %>%
ggplot(aes(x = 10^conc, y = 10^.pred)) +
ggpubr::stat_cor()
final %>%
collect_predictions() %>%
ggplot(aes(x = 10^conc, y = 10^.pred)) +
ggpubr::stat_cor() +
scale_x_log10() +
scale_y_log10() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
theme_light(base_size = 16) +
coord_fixed() +
labs(x = "True concentration",
y = "Predicted concentration")
final %>% extract_fit_engine() %>%
glmnet:::plot.glmnet(xvar = "lambda", label = TRUE)
par
vi %>%
filter(Importance > 0) %>%
slice_max(Importance, n = 50) %>%
ggplot(aes(x = Variable, y = imp, fill = Sign)) +
geom_col(show.legend = FALSE) +
coord_flip() +
theme_light(base_size = 16)
final %>% extract_fit_engine() %>%
glmnet:::plot.glmnet(xvar = "lambda", label = TRUE)
vi %>%
filter(Importance > 0) %>%
slice_max(Importance, n = 50) %>%
ggplot(aes(x = Variable, y = imp, fill = Sign)) +
geom_col(show.legend = FALSE) +
coord_flip() +
theme_light(base_size = 16)
vi %>%
filter(Importance > 0) %>%
slice_max(Importance, n = 50) %>%
ggplot(aes(x = Variable, y = imp, fill = Sign)) +
geom_col(show.legend = FALSE) +
coord_flip() +
theme_light(base_size = 16)
vi %>%
filter(Importance > 0) %>%
slice_max(Importance, n = 50) %>%
ggplot(aes(x = Variable, y = imp, fill = Sign)) +
geom_col(show.legend = FALSE) +
coord_flip() +
theme_light(base_size = 16) +
labs(x = "m/z",
y = "Feature importance")
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", echo=TRUE)
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/GLMNET.R", echo=TRUE)
vi %>%
filter(Importance > 0) %>%
ggplot(aes(x = as.numeric(as.character(Variable)), y = imp, ymax = imp, col = Sign)) +
geom_linerange(aes(ymin = 0), show.legend = FALSE) +
theme_light(base_size = 16) +
labs(x = "m/z",
y = "Variable importance") +
geom_text(data = vi %>%
filter(Importance > 0) %>%
slice_max(Importance, n = 25),
aes(label = Variable),
col = "black", vjust = -0.2,
check_overlap = TRUE)
vi %>%
filter(Importance > 0) %>%
slice_max(Importance, n = 50) %>%
ggplot(aes(x = Variable, y = imp, fill = Sign)) +
geom_col(show.legend = FALSE) +
coord_flip() +
theme_light(base_size = 16) +
labs(x = "m/z",
y = "Feature importance")
par$penalty
final %>% extract_fit_engine()
10^-5
grid <- grid_max_entropy(penalty(range = c(-5, 0)), size = 15)
collect_metrics(final, summarize = FALSE)
grid <- grid_max_entropy(penalty(range = c(-5, 0)), size = 15)
wf <- workflow(rec, spec = linear_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet") %>%
set_mode("regression"))
library(doParallel)
registerDoParallel(cores = 3)
tune_res <- tune_grid(wf, resamples = boot, grid = grid, metrics = metrics)
collect_metrics(tune_res, summarize = TRUE)
par <- select_by_one_std_err(tune_res, desc(penalty), metric = "rsq")
par
final <- wf %>%
finalize_workflow(par) %>%
last_fit(split,
metrics = metrics)
collect_metrics(final, summarize = FALSE)
vi <- final %>%
extract_fit_parsnip() %>%
vi_model(lambda =par$penalty) %>%
mutate(Variable = factor(round(as.numeric(Variable),1)),
mz = as.numeric(as.character(Variable))) %>%
mutate(Variable = fct_reorder(Variable, Importance),
imp = ifelse(Sign == "NEG", -Importance, Importance))
vi %>%
filter(Importance > 0) %>%
slice_max(Importance, n = 50) %>%
ggplot(aes(x = Variable, y = imp, fill = Sign)) +
geom_col(show.legend = FALSE) +
coord_flip() +
theme_light(base_size = 16) +
labs(x = "m/z",
y = "Feature importance")
vi <- final %>%
extract_fit_parsnip() %>%
vi_model(lambda =par$penalty)
vi %>% View()
vi <- final %>%
extract_fit_parsnip() %>%
vi_model(lambda =par$penalty) %>%
mutate(Variable = factor(round(as.numeric(Variable),1)),
mz = as.numeric(as.character(Variable))) %>%
mutate(Variable = fct_reorder(Variable, Importance),
imp = ifelse(Sign == "NEG", -Importance, Importance))
vi %>% View()
res
final %>%
collect_predictions() %>%
ggplot(aes(x = 10^conc, y = 10^.pred)) +
ggpubr::stat_cor() +
scale_x_log10() +
scale_y_log10() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
theme_light(base_size = 16) +
coord_fixed() +
labs(x = "True concentration",
y = "Predicted concentration")
vi %>%
filter(Importance > 0) %>%
slice_max(Importance, n = 50) %>%
ggplot(aes(x = Variable, y = imp, fill = Sign)) +
geom_col(show.legend = FALSE) +
coord_flip() +
theme_light(base_size = 16) +
labs(x = "m/z",
y = "Feature importance")
vi <- final %>%
extract_fit_parsnip() %>%
vi_model(lambda =par$penalty) %>%
mutate(Variable = factor(round(as.numeric(Variable),1)),
mz = as.numeric(as.character(Variable))) %>%
mutate(Variable = fct_reorder(Variable, Importance),
imp = ifelse(Sign == "NEG", -Importance, Importance))
vi %>%
filter(Importance > 0) %>%
slice_max(Importance, n = 50) %>%
ggplot(aes(x = Variable, y = imp, fill = Sign)) +
geom_col(show.legend = FALSE) +
coord_flip() +
theme_light(base_size = 16) +
labs(x = "m/z",
y = "Feature importance")
par
final
collect_metrics(final, summarize = FALSE)
vi <- final %>%
extract_fit_parsnip() %>%
vi_model(lambda =par$penalty) %>%
mutate(Variable = factor(round(as.numeric(Variable),1)),
mz = as.numeric(as.character(Variable))) %>%
mutate(Variable = fct_reorder(Variable, Importance),
imp = ifelse(Sign == "NEG", -Importance, Importance))
vi %>%
filter(Importance > 0) %>%
slice_max(Importance, n = 50) %>%
ggplot(aes(x = Variable, y = imp, fill = Sign)) +
geom_col(show.legend = FALSE) +
coord_flip() +
theme_light(base_size = 16) +
labs(x = "m/z",
y = "Feature importance")
vi %>%
filter(Importance > 0) %>%
ggplot(aes(x = as.numeric(as.character(Variable)), y = imp, ymax = imp, col = Sign)) +
geom_linerange(aes(ymin = 0), show.legend = FALSE) +
theme_light(base_size = 16) +
labs(x = "m/z",
y = "Variable importance") +
geom_text(data = vi %>%
filter(Importance > 0) %>%
slice_max(Importance, n = 25),
aes(label = Variable),
col = "black", vjust = -0.2,
check_overlap = TRUE)
final %>%
collect_predictions() %>%
ggplot(aes(x = 10^conc, y = 10^.pred)) +
ggpubr::stat_cor() +
scale_x_log10() +
scale_y_log10() +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
theme_light(base_size = 16) +
coord_fixed() +
labs(x = "True concentration",
y = "Predicted concentration")
devtools::document()
library(MALDIcellassay)
devtools::document()
library(MALDIcellassay)
devtools::document()
library(MALDIcellassay)
install.packages("styler")
library(styler)
colourpicker:::plotHelperAddin()
styler:::style_active_pkg()
install.packages("lintr")
library(lintr)
lintr:::addin_lint_package()
seq_len(3)
seq_len(1:3)
help("styler_addins")
browseVignettes("PlaquePicker")
devtools::document()
library(MALDIcellassay)
library(MALDIcellassay)
library(MALDIcellassay)
devtools::document()
library(MALDIcellassay)
