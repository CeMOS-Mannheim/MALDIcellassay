mz <- getAllMz(object, excludeNormMz = excludeNormMz)
idx <- match.closest(mz, all_mz, tolerance = 0.1)
intmat <- intmat[,idx]
return(intmat)
}
dim(getIntensityMatrix(res))
#' @details
#' Note that the returned matrix only contains *m/z* values that were actually fitted.
#' If a variance filtering step was applied this will not include **all** *m/z* values.
#' If you wish to get a matrix of **all** *m/z* values use ```MALDIquant::intensityMatrix(getSinglePeaks(object))```.
#' For average spectra intensity matrix with **all** *m/z* values use ```MALDIquant::intensityMatrix(getAvgPeaks(object), getAvgSpectra(object))```.
#'
#' @return
#' A matrix with columns as *m/z* values and rows as concentrations/spectra
#'
#' @export
getIntensityMatrix <- function(object, avg = FALSE, excludeNormMz =FALSE) {
if(avg) {
intmat <- intensityMatrix(getAvgPeaks(object), getAvgSpectra(object))
} else {
intmat <- intensityMatrix(getSinglePeaks(object))
}
all_mz <- as.numeric(colnames(intmat))
# filter fitted mz values
mz <- getAllMz(object, excludeNormMz = excludeNormMz)
idx <- match.closest(mz, all_mz, tolerance = 0.1)
intmat <- intmat[,idx]
# # filter out normalization mz if no var-filter was applied
# # otherwise it will be filtered out anyway
# normMz <- getNormMz(object)
#
# if(!is.null(normMz) & getVarFilterMethod(object) == "none") {
#   normMzIdx <- match.closest(normMz, all_mz)
#   intmat <- intmat[,-normMzIdx]
# }
return(intmat)
}
dim(getIntensityMatrix(res))
dim(getIntensityMatrix(res, excludeNormMz = TRUE))
dim(getIntensityMatrix(res, excludeNormMz = TRUE, avg = TRUE))
dim(getIntensityMatrix(res, excludeNormMz = FALSE, avg = TRUE))
devtools::document()
library(MALDIcellassay)
devtools::document()
source("Z:/17-Thomas Enzlein/R/MALDIassay/test_package.R", echo=TRUE)
calculateVPrime(res)
length(calculateVPrime(res))
getPeakStatistics(res) %>% dim()
dim(getPeakStatistics(res))
dim(getPeakStatistics(res, summarise = TRUE))
plotPeak(res, 1)
plotPeak(res, 1, tol = 1)
plotPeak(res, 1, tol = 0.1)
plotPeak(res, 1, tol = 0.5)
plotPeak(res, 1, tol = 0.5) + geom_rect(aes(xmin = 260, xmax = 260.1))
library(tidyverse)
plotPeak(res, 1, tol = 0.5) + geom_rect(aes(xmin = 260, xmax = 260.1))
plotPeak(res, 1, tol = 0.5) + geom_rect(aes(xmin = 260, xmax = 260.1, ymin = 0, ymax = NA))
plotPeak(res, 1, tol = 0.5) + geom_rect(aes(xmin = 260, xmax = 260.1, ymin = 0, ymax = Inf))
plotPeak(res, 1, tol = 0.5) + geom_rect(aes(xmin = 260, xmax = 260.1, ymin = 0, ymax = Inf, fill = "green"))
plotPeak(res, 1, tol = 0.5) + geom_rect(aes(xmin = 260, xmax = 260.1, ymin = 0, ymax = Inf), col = NA, fill = "green")
plotPeak(res, 1, tol = 0.5) + geom_rect(aes(xmin = 260, xmax = 260.1, ymin = 0, ymax = Inf), col = NA, fill = "green", alpha = 0.2)
plotPeak(res, 1, tol = 0.5) + geom_rect(aes(xmin = 260, xmax = 260.1, ymin = 0, ymax = Inf), col = NA, fill = "green", alpha = 0.1)
#'
#' @return
#' ggplot object
#'
#' @importFrom ggplot2 ggplot aes geom_line scale_y_continuous scale_color_viridis_d theme_minimal labs
#' @importFrom dplyr filter between bind_rows
#' @importFrom tibble tibble
#' @importFrom MALDIquant mass intensity
#' @importFrom forcats fct_reorder
#' @export
plotPeak <- function(object, mzIdx, tol = 0.8) {
if (missing(mzIdx)) {
stop("No mzIdx supplied.\n")
}
mz <- as.numeric(names(getCurveFits(object))[mzIdx])
spec <- getAvgSpectra(object)
conc <- unique(getConc(object))
idx <- 1:length(spec)
df_l <- lapply(X = idx, FUN = function(i) {
df <- tibble(
mass = mass(spec[[i]]),
intensity = intensity(spec[[i]])
)
})
names(df_l) <- conc[idx]
df <- bind_rows(df_l, .id = "idx")
title <- paste0("Profile of m/z ", round(mz, 2), " ± ", round(tol, 2), "Da")
center <- getMzFromMzIdx(object, mzIdx = mzIdx)
p <- df %>%
filter(between(mass, mz - tol, mz + tol)) %>%
mutate(conc = as.numeric(idx)) %>%
mutate(idx = fct_reorder(idx, conc)) %>%
ggplot(aes(x = mass, y = intensity)) +
geom_line(aes(col = idx)) +
scale_y_continuous(limits = c(0, NA)) +
scale_color_viridis_d(end = 0.75, option = "C") +
geom_rect(aes(xmin = center - tol*0.1,
xmax = center + tol*0.1,
ymin = 0,
ymax = Inf),
col = NA,
fill = "green",
alpha = 0.1) +
theme_minimal(base_size = 14) +
labs(
x = "m/z",
y = "Intensity",
col = "Conc.",
title = title
)
return(p)
}
plotPeak(res, 1, tol = 0.5)
getMzFromMzIdx(res, 1)
debugonce(plotPeak)
getMzFromMzIdx(res, 1)
plotPeak(res, 1, tol = 0.5)
df %>%
filter(between(mass, mz - tol, mz + tol)) %>%
mutate(conc = as.numeric(idx)) %>%
mutate(idx = fct_reorder(idx, conc))
df %>%
filter(between(mass, mz - tol, mz + tol)) %>%
mutate(conc = as.numeric(idx)) %>%
mutate(idx = fct_reorder(idx, conc)) %>%
ggplot(aes(x = mass, y = intensity))
df %>%
filter(between(mass, mz - tol, mz + tol)) %>%
mutate(conc = as.numeric(idx)) %>%
mutate(idx = fct_reorder(idx, conc)) %>%
ggplot(aes(x = mass, y = intensity)) +
geom_line(aes(col = idx))
df %>%
filter(between(mass, mz - tol, mz + tol)) %>%
mutate(conc = as.numeric(idx)) %>%
mutate(idx = fct_reorder(idx, conc)) %>%
ggplot(aes(x = mass, y = intensity)) +
geom_line(aes(col = idx)) +
scale_y_continuous(limits = c(0, NA))
df %>%
filter(between(mass, mz - tol, mz + tol)) %>%
mutate(conc = as.numeric(idx)) %>%
mutate(idx = fct_reorder(idx, conc)) %>%
ggplot(aes(x = mass, y = intensity)) +
geom_line(aes(col = idx)) +
scale_y_continuous(limits = c(0, NA)) +
scale_color_viridis_d(end = 0.75, option = "C")
df %>%
filter(between(mass, mz - tol, mz + tol)) %>%
mutate(conc = as.numeric(idx)) %>%
mutate(idx = fct_reorder(idx, conc)) %>%
ggplot(aes(x = mass, y = intensity)) +
geom_line(aes(col = idx)) +
scale_y_continuous(limits = c(0, NA)) +
scale_color_viridis_d(end = 0.75, option = "C") +
geom_rect(aes(xmin = center - tol*0.1,
xmax = center + tol*0.1,
ymin = 0,
ymax = Inf),
col = NA,
fill = "green",
alpha = 0.1)
#'
#' @return
#' ggplot object
#'
#' @importFrom ggplot2 ggplot aes geom_line scale_y_continuous scale_color_viridis_d theme_minimal labs
#' @importFrom dplyr filter between bind_rows
#' @importFrom tibble tibble
#' @importFrom MALDIquant mass intensity
#' @importFrom forcats fct_reorder
#' @export
plotPeak <- function(object, mzIdx, tol = 0.8) {
if (missing(mzIdx)) {
stop("No mzIdx supplied.\n")
}
mz <- as.numeric(names(getCurveFits(object))[mzIdx])
spec <- getAvgSpectra(object)
conc <- unique(getConc(object))
idx <- 1:length(spec)
df_l <- lapply(X = idx, FUN = function(i) {
df <- tibble(
mass = mass(spec[[i]]),
intensity = intensity(spec[[i]])
)
})
names(df_l) <- conc[idx]
df <- bind_rows(df_l, .id = "idx")
title <- paste0("Profile of m/z ", round(mz, 2), " ± ", round(tol, 2), "Da")
center <- getMzFromMzIdx(object, mzIdx = mzIdx)
p <- df %>%
filter(between(mass, mz - tol, mz + tol)) %>%
mutate(conc = as.numeric(idx)) %>%
mutate(idx = fct_reorder(idx, conc)) %>%
ggplot(aes(x = mass, y = intensity)) +
geom_line(aes(col = idx)) +
scale_y_continuous(limits = c(0, NA)) +
scale_color_viridis_d(end = 0.75, option = "C") +
annotate("rect",
xmin = center - tol*0.1,
xmax = center + tol*0.1,
ymin=0, ymax=Inf,
alpha=0.2, fill="midnightblue") +
theme_minimal(base_size = 14) +
labs(
x = "m/z",
y = "Intensity",
col = "Conc.",
title = title
)
return(p)
}
#'
#' @return
#' ggplot object
#'
#' @importFrom ggplot2 ggplot aes geom_line scale_y_continuous scale_color_viridis_d theme_minimal labs
#' @importFrom dplyr filter between bind_rows
#' @importFrom tibble tibble
#' @importFrom MALDIquant mass intensity
#' @importFrom forcats fct_reorder
#' @export
plotPeak <- function(object, mzIdx, tol = 0.8) {
if (missing(mzIdx)) {
stop("No mzIdx supplied.\n")
}
mz <- as.numeric(names(getCurveFits(object))[mzIdx])
spec <- getAvgSpectra(object)
conc <- unique(getConc(object))
idx <- 1:length(spec)
df_l <- lapply(X = idx, FUN = function(i) {
df <- tibble(
mass = mass(spec[[i]]),
intensity = intensity(spec[[i]])
)
})
names(df_l) <- conc[idx]
df <- bind_rows(df_l, .id = "idx")
title <- paste0("Profile of m/z ", round(mz, 2), " ± ", round(tol, 2), "Da")
center <- getMzFromMzIdx(object, mzIdx = mzIdx)
p <- df %>%
filter(between(mass, mz - tol, mz + tol)) %>%
mutate(conc = as.numeric(idx)) %>%
mutate(idx = fct_reorder(idx, conc)) %>%
ggplot(aes(x = mass, y = intensity)) +
geom_line(aes(col = idx)) +
scale_y_continuous(limits = c(0, NA)) +
scale_color_viridis_d(end = 0.75, option = "C") +
annotate("rect",
xmin = center - tol*0.1,
xmax = center + tol*0.1,
ymin=0,
ymax=Inf,
alpha=0.2,
fill="midnightblue") +
theme_minimal(base_size = 14) +
labs(
x = "m/z",
y = "Intensity",
col = "Conc.",
title = title
)
return(p)
}
plotPeak(res, 1, tol = 0.5)
#'
#' @return
#' ggplot object
#'
#' @importFrom ggplot2 ggplot aes geom_line scale_y_continuous scale_color_viridis_d theme_minimal labs
#' @importFrom dplyr filter between bind_rows
#' @importFrom tibble tibble
#' @importFrom MALDIquant mass intensity
#' @importFrom forcats fct_reorder
#' @export
plotPeak <- function(object, mzIdx, tol = 0.8) {
if (missing(mzIdx)) {
stop("No mzIdx supplied.\n")
}
mz <- as.numeric(names(getCurveFits(object))[mzIdx])
spec <- getAvgSpectra(object)
conc <- unique(getConc(object))
idx <- 1:length(spec)
df_l <- lapply(X = idx, FUN = function(i) {
df <- tibble(
mass = mass(spec[[i]]),
intensity = intensity(spec[[i]])
)
})
names(df_l) <- conc[idx]
df <- bind_rows(df_l, .id = "idx")
title <- paste0("Profile of m/z ", round(mz, 2), " ± ", round(tol, 2), "Da")
center <- getMzFromMzIdx(object, mzIdx = mzIdx)
p <- df %>%
filter(between(mass, mz - tol, mz + tol)) %>%
mutate(conc = as.numeric(idx)) %>%
mutate(idx = fct_reorder(idx, conc)) %>%
ggplot(aes(x = mass, y = intensity)) +
geom_line(aes(col = idx)) +
scale_y_continuous(limits = c(0, NA)) +
scale_color_viridis_d(end = 0.75, option = "C") +
# annotate("rect",
#          xmin = center - tol*0.1,
#          xmax = center + tol*0.1,
#          ymin=0,
#          ymax=Inf,
#          alpha=0.2,
#          fill="midnightblue") +
theme_minimal(base_size = 14) +
labs(
x = "m/z",
y = "Intensity",
col = "Conc.",
title = title
)
return(p)
}
plotPeak(res, 1, tol = 0.5)
debugonce(plotPeak)
plotPeak(res, 1, tol = 0.5)
mzIdx
getMzFromMzIdx(object, mzIdx = mzIdx)
getMzFromMzIdx(object, mzIdx = 1)
getMzFromMzIdx(object, mzIdx = mzIdx)
getMzFromMzIdx(object, mzIdx = as.numeric(mzIdx))
mzIdx
getMzFromMzIdx(object, mzIdx)
debugonce(getMzFromMzIdx)
getMzFromMzIdx(object, mzIdx)
mzIdx
getPeakStatistics(object, TRUE)
getPeakStatistics(object, TRUE) %>%
filter(mzIdx == {{mzIdx}})
getPeakStatistics(object, TRUE) %>%
filter(mzIdx == {{mzIdx}}) %>%
pull(mz)
getMzFromMzIdx(object, mzIdx = mzIdx)
debugonce(getMzFromMzIdx)
getMzFromMzIdx(object, mzIdx = mzIdx)
mzIdx
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5)
plotPeak(res, 1, tol = 0.1)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5)
plotPeak(res, 1, tol = 0.5)
library(plotly)
plotPeak(res, 1, tol = 0.5) %>% ggplotly()
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5) %>% ggplotly()
plotPeak(res, 1, tol = 0.5)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5)
debugonce(plotPeak)
plotPeak(res, 1, tol = 0.5)
View(df)
ggplot()
ggplot() +
geom_line(data = df, aes(x = mass, y = intensity, col = idx))
ggplot() +
geom_line(data = df, aes(x = mass, y = intensity, col = idx)) +
scale_y_continuous(limits = c(0, NA))
ggplot() +
geom_line(data = df, aes(x = mass, y = intensity, col = idx)) +
scale_y_continuous(limits = c(0, NA)) +
scale_color_viridis_d(end = 0.75, option = "C")
ggplot() +
geom_line(data = df, aes(x = mass, y = intensity, col = idx)) +
scale_y_continuous(limits = c(0, NA)) +
scale_color_viridis_d(end = 0.75, option = "C") +
geom_rect(data = rect_df,
aes(xmin = xmin[1],
xmax = xmax[1],
ymin = ymin[1],
ymax = ymax[1],
x = x,
y = y),
alpha=0.2,
fill="black")
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5)
plotPeak(res, 1, tol = 0.5)
debugonce(plotPeak)
plotPeak(res, 1, tol = 0.5)
View(rect_df)
ggplot() +
geom_rect(data = rect_df,
aes(xmin = xmin[1],
xmax = xmax[1],
ymin = ymin[1],
ymax = ymax[1],
x = x,
y = y),
alpha=0.2,
fill="black")
ggplot() +
geom_rect(data = rect_df,
aes(xmin = xmin[1],
xmax = xmax[1],
ymin = ymin[1],
ymax = ymax[1],
x = x,
y = y),
alpha=0.9,
fill="black")
xmin[1]
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5)
plotPeak(res, 1, tol = 0.5)
debugonce(plotPeak)
plotPeak(res, 1, tol = 0.5)
View(rect_df)
ggplot() +
geom_rect(data = rect_df,
aes(xmin = xmin,
xmax = xmax,
ymin = ymin,
ymax = ymax,
x = x,
y = y),
alpha=0.2,
fill="black")
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5)
plotPeak(res, 1, tol = 0.5) %>% ggplotly()
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5) %>% ggplotly()
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5) %>% ggplotly()
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5) %>% ggplotly()
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5) %>% ggplotly()
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5) %>% ggplotly()
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5) %>% ggplotly()
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5) %>% ggplotly()
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5) %>% ggplotly()
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5) %>% ggplotly()
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5) %>% ggplotly()
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5) %>% ggplotly()
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5) %>% ggplotly()
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5) %>% ggplotly()
devtools::load_all(".")
plotPeak(res, 1, tol = 0.5) %>% ggplotly()
rm(plotPeak)
devtools::load_all(".")
plotPeak(res, 1, tol = 0.5) %>% ggplotly()
plotPeak(res, 1, tol = 0.5)
debugonce(plotPeak)
plotPeak(res, 1, tol = 0.5)
getBinTol(object)
# fit curves
res <- fitCurve(spec = spec_fil,
conc = NA,
unit = "M",
dir = dir,
SNR = SNR,
varFilterMethod = varFilterMethod,
normMeth = normMeth,
normMz = normMz,
normTol = normTol,
alignTol = alignTol,
binTol = binTol,
markValue = externalIC50,
fc_thresh = fc_thresh,
plot = FALSE, saveIntensityMatrix = FALSE)
plotPeak(res, 1, tol = 0.5)
getBinTol(res)
source("Z:/17-Thomas Enzlein/R/MALDIassay/test_package.R", echo=TRUE)
getBinTol(res)
plotPeak(res, 1, tol = 0.5)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/plotPeak.R", encoding = 'UTF-8', echo=TRUE)
plotPeak(res, 1, tol = 0.5)  %>% ggplotly()
