for (size_t i = 0; i < mass.size(); ++i) {
if (keep[i]) {
filteredMass.push_back(mass[i]);
filteredIntensities.push_back(intensities[i]);
filteredSnr.push_back(snr[i]);
filteredSamples.push_back(samples[i]);
}
}
// Reconstruct the MassPeak objects with the new vectors
for (int i = 0, j = 0; i < n; ++i) {
if (nonEmpty[i]) {
S4 massPeak = l[i];
size_t len = std::count(filteredSamples.begin(), filteredSamples.end(), i + 1);
massPeak.slot("mass") = NumericVector(filteredMass.begin() + j, filteredMass.begin() + j + len);
massPeak.slot("intensity") = NumericVector(filteredIntensities.begin() + j, filteredIntensities.begin() + j + len);
massPeak.slot("snr") = NumericVector(filteredSnr.begin() + j, filteredSnr.begin() + j + len);
l[i] = massPeak;
j += len;
}
}
return l;
}
')
library(Rcpp)
Rcpp::sourceCpp(code='
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
List binPeaksRcpp(List l, String method, double tolerance) {
if (method != "strict") {
stop("Only 'strict' method is implemented in binPeaksRcpp");
}
int n = l.size();
std::vector<bool> nonEmpty(n);
std::vector<int> samples;
std::vector<double> mass, intensities, snr;
// Populate vectors
for (int i = 0; i < n; ++i) {
S4 massPeak = l[i];
NumericVector currentMass = massPeak.slot("mass");
NumericVector currentIntensity = massPeak.slot("intensity");
NumericVector currentSnr = massPeak.slot("snr");
if (currentMass.size() > 0) {
nonEmpty[i] = true;
samples.insert(samples.end(), currentMass.size(), i + 1);  // 1-based index for R compatibility
mass.insert(mass.end(), currentMass.begin(), currentMass.end());
intensities.insert(intensities.end(), currentIntensity.begin(), currentIntensity.end());
snr.insert(snr.end(), currentSnr.begin(), currentSnr.end());
} else {
nonEmpty[i] = false;
}
}
// Loop to discard close peaks
std::vector<bool> keep(mass.size(), true);
int lastSample = samples[0];
double lastMass = mass[0];
for (size_t i = 1; i < mass.size(); ++i) {
if (samples[i] == lastSample && std::abs(mass[i] - lastMass) <= tolerance) {
keep[i] = false;  // Discard subsequent peak within tolerance
} else {
lastSample = samples[i];
lastMass = mass[i];
}
}
// Filtering based on the 'keep' vector
std::vector<double> filteredMass, filteredIntensities, filteredSnr;
std::vector<int> filteredSamples;
for (size_t i = 0; i < mass.size(); ++i) {
if (keep[i]) {
filteredMass.push_back(mass[i]);
filteredIntensities.push_back(intensities[i]);
filteredSnr.push_back(snr[i]);
filteredSamples.push_back(samples[i]);
}
}
// Reconstruct the MassPeak objects with the new vectors
for (int i = 0, j = 0; i < n; ++i) {
if (nonEmpty[i]) {
S4 massPeak = l[i];
size_t len = std::count(filteredSamples.begin(), filteredSamples.end(), i + 1);
massPeak.slot("mass") = NumericVector(filteredMass.begin() + j, filteredMass.begin() + j + len);
massPeak.slot("intensity") = NumericVector(filteredIntensities.begin() + j, filteredIntensities.begin() + j + len);
massPeak.slot("snr") = NumericVector(filteredSnr.begin() + j, filteredSnr.begin() + j + len);
l[i] = massPeak;
j += len;
}
}
return l;
}
')
Rcpp::sourceCpp(code=`
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
List binPeaksRcpp(List l, String method, double tolerance) {
if (method != "strict") {
stop("Only 'strict' method is implemented in binPeaksRcpp");
}
int n = l.size();
std::vector<bool> nonEmpty(n);
std::vector<int> samples;
std::vector<double> mass, intensities, snr;
// Populate vectors
for (int i = 0; i < n; ++i) {
S4 massPeak = l[i];
NumericVector currentMass = massPeak.slot("mass");
NumericVector currentIntensity = massPeak.slot("intensity");
NumericVector currentSnr = massPeak.slot("snr");
if (currentMass.size() > 0) {
nonEmpty[i] = true;
samples.insert(samples.end(), currentMass.size(), i + 1);  // 1-based index for R compatibility
mass.insert(mass.end(), currentMass.begin(), currentMass.end());
intensities.insert(intensities.end(), currentIntensity.begin(), currentIntensity.end());
snr.insert(snr.end(), currentSnr.begin(), currentSnr.end());
} else {
nonEmpty[i] = false;
}
}
// Loop to discard close peaks
std::vector<bool> keep(mass.size(), true);
int lastSample = samples[0];
double lastMass = mass[0];
for (size_t i = 1; i < mass.size(); ++i) {
if (samples[i] == lastSample && std::abs(mass[i] - lastMass) <= tolerance) {
keep[i] = false;  // Discard subsequent peak within tolerance
} else {
lastSample = samples[i];
lastMass = mass[i];
}
}
// Filtering based on the 'keep' vector
std::vector<double> filteredMass, filteredIntensities, filteredSnr;
std::vector<int> filteredSamples;
for (size_t i = 0; i < mass.size(); ++i) {
if (keep[i]) {
filteredMass.push_back(mass[i]);
filteredIntensities.push_back(intensities[i]);
filteredSnr.push_back(snr[i]);
filteredSamples.push_back(samples[i]);
}
}
// Reconstruct the MassPeak objects with the new vectors
for (int i = 0, j = 0; i < n; ++i) {
if (nonEmpty[i]) {
S4 massPeak = l[i];
size_t len = std::count(filteredSamples.begin(), filteredSamples.end(), i + 1);
massPeak.slot("mass") = NumericVector(filteredMass.begin() + j, filteredMass.begin() + j + len);
massPeak.slot("intensity") = NumericVector(filteredIntensities.begin() + j, filteredIntensities.begin() + j + len);
massPeak.slot("snr") = NumericVector(filteredSnr.begin() + j, filteredSnr.begin() + j + len);
l[i] = massPeak;
j += len;
}
}
return l;
}
`)
Rcpp::sourceCpp(code='
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
List binPeaksRcpp(List l, String method, double tolerance) {
if (method != "strict") {
stop("Only strict method is implemented in binPeaksRcpp");
}
int n = l.size();
std::vector<bool> nonEmpty(n);
std::vector<int> samples;
std::vector<double> mass, intensities, snr;
// Populate vectors
for (int i = 0; i < n; ++i) {
S4 massPeak = l[i];
NumericVector currentMass = massPeak.slot("mass");
NumericVector currentIntensity = massPeak.slot("intensity");
NumericVector currentSnr = massPeak.slot("snr");
if (currentMass.size() > 0) {
nonEmpty[i] = true;
samples.insert(samples.end(), currentMass.size(), i + 1);  // 1-based index for R compatibility
mass.insert(mass.end(), currentMass.begin(), currentMass.end());
intensities.insert(intensities.end(), currentIntensity.begin(), currentIntensity.end());
snr.insert(snr.end(), currentSnr.begin(), currentSnr.end());
} else {
nonEmpty[i] = false;
}
}
// Loop to discard close peaks
std::vector<bool> keep(mass.size(), true);
int lastSample = samples[0];
double lastMass = mass[0];
for (size_t i = 1; i < mass.size(); ++i) {
if (samples[i] == lastSample && std::abs(mass[i] - lastMass) <= tolerance) {
keep[i] = false;  // Discard subsequent peak within tolerance
} else {
lastSample = samples[i];
lastMass = mass[i];
}
}
// Filtering based on the 'keep' vector
std::vector<double> filteredMass, filteredIntensities, filteredSnr;
std::vector<int> filteredSamples;
for (size_t i = 0; i < mass.size(); ++i) {
if (keep[i]) {
filteredMass.push_back(mass[i]);
filteredIntensities.push_back(intensities[i]);
filteredSnr.push_back(snr[i]);
filteredSamples.push_back(samples[i]);
}
}
// Reconstruct the MassPeak objects with the new vectors
for (int i = 0, j = 0; i < n; ++i) {
if (nonEmpty[i]) {
S4 massPeak = l[i];
size_t len = std::count(filteredSamples.begin(), filteredSamples.end(), i + 1);
massPeak.slot("mass") = NumericVector(filteredMass.begin() + j, filteredMass.begin() + j + len);
massPeak.slot("intensity") = NumericVector(filteredIntensities.begin() + j, filteredIntensities.begin() + j + len);
massPeak.slot("snr") = NumericVector(filteredSnr.begin() + j, filteredSnr.begin() + j + len);
l[i] = massPeak;
j += len;
}
}
return l;
}
')
Rcpp::sourceCpp(code='
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
List binPeaksRcpp(List l, String method, double tolerance) {
if (method != "strict") {
stop("Only strict method is implemented in binPeaksRcpp");
}
int n = l.size();
std::vector<bool> nonEmpty(n);
std::vector<int> samples;
std::vector<double> mass, intensities, snr;
// Populate vectors
for (int i = 0; i < n; ++i) {
S4 massPeak = l[i];
NumericVector currentMass = massPeak.slot("mass");
NumericVector currentIntensity = massPeak.slot("intensity");
NumericVector currentSnr = massPeak.slot("snr");
if (currentMass.size() > 0) {
nonEmpty[i] = true;
samples.insert(samples.end(), currentMass.size(), i + 1);  // 1-based index for R compatibility
mass.insert(mass.end(), currentMass.begin(), currentMass.end());
intensities.insert(intensities.end(), currentIntensity.begin(), currentIntensity.end());
snr.insert(snr.end(), currentSnr.begin(), currentSnr.end());
} else {
nonEmpty[i] = false;
}
}
// Loop to discard close peaks
std::vector<bool> keep(mass.size(), true);
int lastSample = samples[0];
double lastMass = mass[0];
for (size_t i = 1; i < mass.size(); ++i) {
if (samples[i] == lastSample && std::abs(mass[i] - lastMass) <= tolerance) {
keep[i] = false;  // Discard subsequent peak within tolerance
} else {
lastSample = samples[i];
lastMass = mass[i];
}
}
// Filtering based on the 'keep' vector
std::vector<double> filteredMass, filteredIntensities, filteredSnr;
std::vector<int> filteredSamples;
for (size_t i = 0; i < mass.size(); ++i) {
if (keep[i]) {
filteredMass.push_back(mass[i]);
filteredIntensities.push_back(intensities[i]);
filteredSnr.push_back(snr[i]);
filteredSamples.push_back(samples[i]);
}
}
// Reconstruct the MassPeak objects with the new vectors
for (int i = 0, j = 0; i < n; ++i) {
if (nonEmpty[i]) {
S4 massPeak = l[i];
size_t len = std::count(filteredSamples.begin(), filteredSamples.end(), i + 1);
massPeak.slot("mass") = NumericVector(filteredMass.begin() + j, filteredMass.begin() + j + len);
massPeak.slot("intensity") = NumericVector(filteredIntensities.begin() + j, filteredIntensities.begin() + j + len);
massPeak.slot("snr") = NumericVector(filteredSnr.begin() + j, filteredSnr.begin() + j + len);
l[i] = massPeak;
j += len;
}
}
return l;
}
')
Rcpp::sourceCpp(code='
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
List binPeaksRcpp(List l, String method, double tolerance) {
if (method != "strict") {
stop("Only strict method is implemented in binPeaksRcpp");
}
int n = l.size();
std::vector<bool> nonEmpty(n);
std::vector<int> samples;
std::vector<double> mass, intensities, snr;
// Populate vectors
for (int i = 0; i < n; ++i) {
S4 massPeak = l[i];
NumericVector currentMass = massPeak.slot("mass");
NumericVector currentIntensity = massPeak.slot("intensity");
NumericVector currentSnr = massPeak.slot("snr");
if (currentMass.size() > 0) {
nonEmpty[i] = true;
samples.insert(samples.end(), currentMass.size(), i + 1);  // 1-based index for R compatibility
mass.insert(mass.end(), currentMass.begin(), currentMass.end());
intensities.insert(intensities.end(), currentIntensity.begin(), currentIntensity.end());
snr.insert(snr.end(), currentSnr.begin(), currentSnr.end());
} else {
nonEmpty[i] = false;
}
}
// Loop to discard close peaks
std::vector<bool> keep(mass.size(), true);
int lastSample = samples[0];
double lastMass = mass[0];
for (size_t i = 1; i < mass.size(); ++i) {
if (samples[i] == lastSample && std::abs(mass[i] - lastMass) <= tolerance) {
keep[i] = false;  // Discard subsequent peak within tolerance
} else {
lastSample = samples[i];
lastMass = mass[i];
}
}
// Filtering based on the keep vector
std::vector<double> filteredMass, filteredIntensities, filteredSnr;
std::vector<int> filteredSamples;
for (size_t i = 0; i < mass.size(); ++i) {
if (keep[i]) {
filteredMass.push_back(mass[i]);
filteredIntensities.push_back(intensities[i]);
filteredSnr.push_back(snr[i]);
filteredSamples.push_back(samples[i]);
}
}
// Reconstruct the MassPeak objects with the new vectors
for (int i = 0, j = 0; i < n; ++i) {
if (nonEmpty[i]) {
S4 massPeak = l[i];
size_t len = std::count(filteredSamples.begin(), filteredSamples.end(), i + 1);
massPeak.slot("mass") = NumericVector(filteredMass.begin() + j, filteredMass.begin() + j + len);
massPeak.slot("intensity") = NumericVector(filteredIntensities.begin() + j, filteredIntensities.begin() + j + len);
massPeak.slot("snr") = NumericVector(filteredSnr.begin() + j, filteredSnr.begin() + j + len);
l[i] = massPeak;
j += len;
}
}
return l;
}
')
Rcpp::sourceCpp(code='
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
List binPeaksRcpp(List l, String method, double tolerance) {
if (method != "strict") {
stop("Only strict method is implemented in binPeaksRcpp");
}
int n = l.size();
std::vector<bool> nonEmpty(n);
std::vector<int> samples;
std::vector<double> mass, intensities, snr;
// Populate vectors
for (int i = 0; i < n; ++i) {
S4 massPeak = l[i];
NumericVector currentMass = massPeak.slot("mass");
NumericVector currentIntensity = massPeak.slot("intensity");
NumericVector currentSnr = massPeak.slot("snr");
if (currentMass.size() > 0) {
nonEmpty[i] = true;
samples.insert(samples.end(), currentMass.size(), i + 1);  // 1-based index for R compatibility
mass.insert(mass.end(), currentMass.begin(), currentMass.end());
intensities.insert(intensities.end(), currentIntensity.begin(), currentIntensity.end());
snr.insert(snr.end(), currentSnr.begin(), currentSnr.end());
} else {
nonEmpty[i] = false;
}
}
// Loop to discard close peaks
std::vector<bool> keep(mass.size(), true);
int lastSample = samples[0];
double lastMass = mass[0];
for (size_t i = 1; i < mass.size(); ++i) {
if (samples[i] == lastSample && std::abs(mass[i] - lastMass) <= tolerance) {
keep[i] = false;  // Discard subsequent peak within tolerance
} else {
lastSample = samples[i];
lastMass = mass[i];
}
}
// Filtering based on the keep vector
std::vector<double> filteredMass, filteredIntensities, filteredSnr;
std::vector<int> filteredSamples;
for (size_t i = 0; i < mass.size(); ++i) {
if (keep[i]) {
filteredMass.push_back(mass[i]);
filteredIntensities.push_back(intensities[i]);
filteredSnr.push_back(snr[i]);
filteredSamples.push_back(samples[i]);
}
}
// Reconstruct the MassPeak objects with the new vectors
for (int i = 0, j = 0; i < n; ++i) {
if (nonEmpty[i]) {
S4 massPeak = l[i];
size_t len = std::count(filteredSamples.begin(), filteredSamples.end(), i + 1);
massPeak.slot("mass") = NumericVector(filteredMass.begin() + j, filteredMass.begin() + j + len);
massPeak.slot("intensity") = NumericVector(filteredIntensities.begin() + j, filteredIntensities.begin() + j + len);
massPeak.slot("snr") = NumericVector(filteredSnr.begin() + j, filteredSnr.begin() + j + len);
l[i] = massPeak;
j += len;
}
}
return l;
}
')
benchmark <- microbenchmark::microbenchmark(
binPeaksRcpp(peaks, method = "strict", tolerance = 0.002),
binPeaksOptimizedV3(peaks, tolerance=0.002, method = "strict"),
binPeaksOptimizedV2(peaks, tolerance=0.002, method = "strict"),
binPeaksOptimized(peaks, tolerance=0.002, method = "strict"),
binPeaks(peaks, tolerance=0.002, method = "strict"),
times=25L
)
benchmark
# check if result is the same from binPeaks and binPeaksRcpp
identical(binPeaks(peaks, tolerance=0.002, method = "strict"), binPeaksRcpp(peaks, method = "strict", tolerance = 0.002))
org <-  binPeaks(peaks, tolerance=0.002, method = "strict")
rcpp <- binPeaksRcpp(peaks, method = "strict", tolerance = 0.002)
dim(intensityMatrix(org))
dim(intensityMatrix(rcpp))
dim(intensityMatrix(binPeaksOptimizedV2(peaks, tolerance=0.002, method = "strict")))
dim(intensityMatrix(binPeaksOptimized(peaks, tolerance=0.002, method = "strict")))
Rcpp::sourceCpp(code = '
#include <Rcpp.h>
using namespace Rcpp;
// Function to check if all elements are in the tolerated range
bool allInTolerance(const std::vector<double>& mass, double meanMass, double tolerance) {
return std::all_of(mass.begin(), mass.end(), [&](double m) {
return std::abs(m - meanMass) / meanMass <= tolerance;
});
}
// [[Rcpp::export]]
List binPeaksRcpp(List l, String method, double tolerance) {
// Validating method and converting to C++ types
if(method != "strict") {
throw std::range_error("Only strict method is implemented in binPeaksRcpp.");
}
int n = l.size();
std::vector<int> samples;
std::vector<double> allMass, allIntensities, allSnr;
// Store original mass sample number/ID and consolidate mass, intensities, and snr
for (int i = 0; i < n; ++i) {
S4 massPeaks = l[i];
NumericVector mass = massPeaks.slot("mass");
NumericVector intensity = massPeaks.slot("intensity");
NumericVector snr = massPeaks.slot("snr");
allMass.insert(allMass.end(), mass.begin(), mass.end());
allIntensities.insert(allIntensities.end(), intensity.begin(), intensity.end());
allSnr.insert(allSnr.end(), snr.begin(), snr.end());
samples.insert(samples.end(), mass.size(), i + 1);  // using 1-based indexing for R compatibility
}
// Sort all vectors by mass
IntegerVector order = match(allMass, sort_unique(allMass));
// Sort masses, intensities, snr, and samples based on the sorted order of mass
std::vector<double> mass = as<std::vector<double> >(allMass[order]);
std::vector<double> intensities = as<std::vector<double> >(allIntensities[order]);
std::vector<double> snr = as<std::vector<double> >(allSnr[order]);
std::vector<int> sortedSamples = as<std::vector<int> >(samples[order]);
// Vectors to track updated mass values
std::vector<double> updatedMass, updatedIntensities, updatedSnr;
std::vector<int> updatedSamples;
// Translating the binning logic (assuming .grouperStrict does similar work here)
size_t left = 0;
while (left < mass.size()) {
size_t right = left + 1;
while (right < mass.size() && mass[right] - mass[right - 1] <= tolerance) {
++right;
}
std::vector<double> currentMass(mass.begin() + left, mass.begin() + right);
double meanMass = std::accumulate(currentMass.begin(), currentMass.end(), 0.0) / currentMass.size();
if (allInTolerance(currentMass, meanMass, tolerance)) {
updatedMass.insert(updatedMass.end(), currentMass.size(), meanMass);
updatedIntensities.insert(updatedIntensities.end(), intensities.begin() + left, intensities.begin() + right);
updatedSnr.insert(updatedSnr.end(), snr.begin() + left, snr.begin() + right);
updatedSamples.insert(updatedSamples.end(), sortedSamples.begin() + left, sortedSamples.begin() + right);
}
left = right;
}
// Regroup mass, intensities, snr, and samples by sample ID and return a list of adjusted MassPeaks objects
List adjustedPeaks(n);
for (int i = 0; i < n; ++i) {
// Find indices corresponding to the current sample and create a subvector for mass, intensity, and snr
std::vector<int>::iterator sIt, eIt;
sIt = std::lower_bound(updatedSamples.begin(), updatedSamples.end(), i + 1);
eIt = std::upper_bound(updatedSamples.begin(), updatedSamples.end(), i + 1);
NumericVector sampleMass(sIt - updatedSamples.begin(), eIt - updatedSamples.begin());
NumericVector sampleIntensity(sIt - updatedSamples.begin(), eIt - updatedSamples.begin());
NumericVector sampleSnr(sIt - updatedSamples.begin(), eIt - updatedSamples.begin());
S4 thisPeak(l[i]);  // Original S4 object
thisPeak.slot("mass") = sampleMass;
thisPeak.slot("intensity") = sampleIntensity;
thisPeak.slot("snr") = sampleSnr;
adjustedPeaks[i] = thisPeak;
}
return adjustedPeaks;
}
')
