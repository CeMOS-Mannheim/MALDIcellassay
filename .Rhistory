View(df)
getPeakStatistics(res)
getPeakStatistics(res, TRUE)
getPeakStatistics(res, TRUE) %>% left_join(df)
#' Get fitting parameters
#'
#' @param object      Object of class MALDIassay
#'
#' @return
#' tibble of fitting parameters for each fitted m/z-value
#' @export
#' @importFrom nplr getPar
getFittingParameters <- function(object, singleSpec = TRUE) {
stopIfNotIsMALDIassay(object)
fits <- getCurveFits(object)
res_list <- lapply(fits, function(x) {
getPar(x$model)
})
df <- bind_rows(res_list, .id = "mz") %>%
mutate(mz = as.numeric(mz))
return(df)
}
df <- getFittingParameters(res)
library(nplr)
df <- getFittingParameters(res)
df
getPeakStatistics(res, TRUE) %>% left_join(df)
getPeakStatistics(res, TRUE)
#' Get fitting parameters
#'
#' @param object      Object of class MALDIassay
#'
#' @return
#' tibble of fitting parameters for each fitted m/z-value
#' @export
#' @importFrom nplr getPar
getFittingParameters <- function(object, summarise = TRUE) {
stopIfNotIsMALDIassay(object)
fits <- getCurveFits(object)
res_list <- lapply(fits, function(x) {
getPar(x$model)
})
df <- bind_rows(res_list, .id = "mz")
if(summarise) {
df <- df %>%
mutate(mz = round(as.numeric(mz), 3)) %>%
select(mz, par)
}
return(df)
}
getPeakStatistics(res, TRUE) %>% left_join(df)
#' Get fitting parameters
#'
#' @param object      Object of class MALDIassay
#'
#' @return
#' tibble of fitting parameters for each fitted m/z-value
#' @export
#' @importFrom nplr getPar
getFittingParameters <- function(object, summarise = TRUE) {
stopIfNotIsMALDIassay(object)
fits <- getCurveFits(object)
res_list <- lapply(fits, function(x) {
getPar(x$model)
})
df <- bind_rows(res_list, .id = "mz")
if(summarise) {
df <- df %>%
mutate(mz = round(as.numeric(mz), 3)) %>%
select(mz, par)
}
return(df)
}
getPeakStatistics(res, TRUE) %>% left_join(df)
getPeakStatistics(res, TRUE) %>% left_join(getFittingParameters(res))
#' Get fitting parameters
#'
#' @param object      Object of class MALDIassay
#'
#' @return
#' tibble of fitting parameters for each fitted m/z-value
#' @export
#' @importFrom nplr getPar
getFittingParameters <- function(object, summarise = TRUE) {
stopIfNotIsMALDIassay(object)
fits <- getCurveFits(object)
res_list <- lapply(fits, function(x) {
getPar(x$model)
})
df <- bind_rows(res_list, .id = "mz")
if(summarise) {
df <- df %>%
mutate(mz = round(as.numeric(mz), 3)) %>%
select(mz, npar)
}
return(df)
}
getPeakStatistics(res, TRUE) %>% left_join(getFittingParameters(res))
#' Extract peak statistics
#'
#' @param object Object of class MALDIassay
#' @param summarise Logical, return summarised results (one result per mz and not per mz and spectra)
#'
#' @return
#' A tibble with peak statistics (R², fold-change, CV%, etc.)
#' @export
getPeakStatistics <- function(object, summarise = FALSE) {
stopIfNotIsMALDIassay(object)
stats <- object@stats
if (summarise) {
stats <- stats %>%
mutate(mz = round(as.numeric(mz), 3)) %>%
group_by(mz, mzIdx) %>%
summarise(
pIC50 = first(pIC50),
R2 = first(R2),
wgof = first(wgof),
FC = first(fc_window)
) %>%
left_join(getFittingParameters(res, summarise = TRUE)) %>%
mutate(symetric = ifelse(npar < 5, TRUE, FALSE)) %>%
select(-npar)
}
return(stats)
}
getPeakStatistics(res, TRUE)
getPeakStatistics(res, TRUE) %>% filter(!symetric)
plotCurves(res, mzIdx = 3)
plotCurves(res, mzIdx = 5)
plotCurves(res, mzIdx = 7)
plotCurves(res, mzIdx = 8)
plotCurves(res, mzIdx = 9)
plotCurves(res, mzIdx = 10)
plotCurves(res, mzIdx = 11)
plotCurves(res, mzIdx = 12)
plotCurves(res, mzIdx = 13)
test <- function(x) {if(!x) {stop("fail!")}}
test(FALSE)
test(TRUE)
test2 <- function(x) [tryCatch(test(x), finally = "it failed!")]
test2 <- function(x) {tryCatch(test(x), finally = "it failed!")}
test2(TRUE)
test2(FALSE)
test2 <- function(x) {tryCatch(test(x), finally = print("it failed!"))}
test2(FALSE)
test2 <- function(x) {tryCatch(test(x), finally = x)}
test2(FALSE)
tryCatch(1, finally = print("Hello"))
error("1")
test2 <- function(x) {tryCatch(test(x), error = x)}
test2(FALSE)
test2 <- function(x) {tryCatch(test(x), error = function(x) x)}
test2(FALSE)
library(MALDIcellassay)
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", encoding = 'UTF-8', echo=TRUE)
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", encoding = 'UTF-8', echo=TRUE)
library(MALDIcellassay)
getPeakStatistics(res, TRUE)
getPeakStatistics(res, TRUE) %>% View()
devtools::document()
library(MALDIcellassay)
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", encoding = 'UTF-8', echo=TRUE)
getPeakStatistics(res, TRUE) %>% View()
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", encoding = 'UTF-8', echo=TRUE)
getPeakStatistics(res, TRUE) %>% View()
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", encoding = 'UTF-8', echo=TRUE)
getPeakStatistics(res, TRUE) %>% View()
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", encoding = 'UTF-8', echo=TRUE)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/calculateCurveFit.R", echo=TRUE)
# fit curves
res <- fitCurve(spec = spec_fil,
conc = NA,
unit = "µM",
dir = dir,
SNR = SNR,
varFilterMethod = varFilterMethod,
normMeth = normMeth,
normMz = normMz,
normTol = normTol,
alignTol = alignTol,
binTol = binTol,
markValue = externalIC50,
fc_thresh = fc_thresh,
plot = FALSE, saveIntensityMatrix = FALSE)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/calculateCurveFit.R", echo=TRUE)
# fit curves
res <- fitCurve(spec = spec_fil,
conc = NA,
unit = "µM",
dir = dir,
SNR = SNR,
varFilterMethod = varFilterMethod,
normMeth = normMeth,
normMz = normMz,
normTol = normTol,
alignTol = alignTol,
binTol = binTol,
markValue = externalIC50,
fc_thresh = fc_thresh,
plot = FALSE, saveIntensityMatrix = FALSE)
library(MALDIcellassay)
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", encoding = 'UTF-8', echo=TRUE)
library(MALDIcellassay)
source("Z:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", encoding = 'UTF-8', echo=TRUE)
getPeakStatistics(res, TRUE)
getPeakStatistics(res, TRUE) %>% View()
getPeakStatistics(res, FALSE)
getFittingParameters(res)
getFittingParameters(res) %>% pull(npar) %>% table()
getFittingParameters(res) %>% filter(npar =! 4)
getFittingParameters(res) %>% filter(npar != 4)
library(MALDIcellassay)
labs <- LETTERS[1:8]
labs
labs <- rep(LETTERS[1:3], 4)
labs
rep(LETTERS[1:3], each = 3)
labs <-rep(LETTERS[1:3], each = 3)
idx <- 1:6
labs[idx]
u <- unique(labs)
u_idx <- unique(labs[idx])
u[which(!(u %in% u_idx))]
3 != 3
3 != 2
devtools::document()
devtools::document()
devtools::document()
library(MALDIcellassay)
devtools::document()
library(MALDIcellassay)
devtools::document()
library(MALDIcellassay)
devtools::document()
library(MALDIcellassay)
library(MALDIcellassay)
library(MALDIcellassay)
library(MALDIcellassay)
devtools::install_github("CeMOS-Mannheim/MALDIcellassay")
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
devtools::install_github("CeMOS-Mannheim/MALDIcellassay")
library(MALDIquant)
devtools::document()
library(MALDIcellassay)
match.closest(3, 1:10)
match.closest(c(3,2), 1:10)
library(MALDIcellassay)
devtools::document()
devtools::document()
library(tidyverse)
devtools::document()
library(MALDIcellassay)
source("Z:/17-Thomas Enzlein/R/MALDIassay/test_package.R", echo=TRUE)
devtools::document()
source("Z:/17-Thomas Enzlein/R/MALDIassay/test_package.R", echo=TRUE)
res
res
devtools::document()
library(MALDIcellassay)
source("Z:/17-Thomas Enzlein/R/MALDIassay/R/MALDIassay_Class.R", encoding = 'UTF-8', echo=TRUE)
source("Z:/17-Thomas Enzlein/R/MALDIassay/test_package.R", echo=TRUE)
plotCurves(res, mzIdx = 2)
plotCurves(res, mzIdx = 2, errorbars = TRUE)
plotCurves(res, mzIdx = 4, errorbars = TRUE)
plotCurves(res, mzIdx = 8, errorbars = TRUE)
plotCurves(res, mzIdx = 10, errorbars = TRUE)
plotCurves(res, mzIdx = 12, errorbars = TRUE)
plotCurves(res, mzIdx = 20, errorbars = TRUE)
View(res)
View(res)
res@fits[["376.001775052708"]][["df"]][["value"]]
res@fits[["376.001775052708"]][["df"]]
convertToProp(res@fits[["376.001775052708"]][["df"]]$value)
nplr::convertToProp(res@fits[["376.001775052708"]][["df"]]$value)
plotCurves(res, mzIdx = 20, errorbars = TRUE)
#' @param errorbars logical, add errorbars to plot representing standard deviation in regards to the measurment replicates.
#'
#' @return
#' list of ggplot objects
#'
#' @importFrom ggplot2 geom_errorbar geom_point ggplot aes geom_line scale_x_continuous theme_bw theme element_text labs
#' @importFrom dplyr group_by summarise
#' @importFrom tibble tibble
#' @importFrom nplr getGoodness getEstimates getXcurve getYcurve getX getY convertToProp
#' @export
plotCurves <- function(object, fc_thresh = 1, R2_tresh = 0, markValue = NA, mzIdx = NULL, errorbars = FALSE) {
stopIfNotIsMALDIassay(object)
if (is.null(mzIdx)) {
res_list <- getCurveFits(object)
} else {
res_list <- getCurveFits(object)[mzIdx]
}
len <- length(names(res_list))
mz_vals <- as.numeric(names(res_list))
p_list <- vector("list", length = len)
for (i in 1:len) {
mz <- mz_vals[i]
model <- res_list[[as.character(mz)]]$model
df <- res_list[[as.character(mz)]]$df
ic50 <- 10^getEstimates(model, targets = 0.5)[, 3]
min <- min(df$value)
max <- max(df$value)
fc_window <- MALDIcellassay:::calculateFC(df)
R2 <- getGoodness(model)[[1]]
if ((abs(fc_window) >= fc_thresh & R2 >= R2_tresh) | !is.null(mzIdx)) {
df_C <- tibble(xC = getXcurve(model), yC = getYcurve(model))
df_P <- tibble(x = getX(model), y = getY(model))
int <- vapply(getSinglePeaks(object), function(x) {
targetmass <- mz
mass <- mass(x)
idx <- match.closest(targetmass, mass, tolerance = 0.01)
int <- intensity(x)
return(int[idx])
}, numeric(1))
df_singlePeaks <- tibble(
x = getConc(object),
int = convertToProp(
y = int
)
# int = convertToProp(
#   y = int,
#   T0 = min,
#   Ctrl = max
# )
) %>%
group_by(x) %>%
summarise(
sem = sd(int)/sqrt(n()),
)
df_P <- df_P %>%
mutate(sem = pull(df_singlePeaks, sem))
p <- ggplot(data = df_P, aes(x = x, y = y)) +
geom_line(data = df_C, aes(x = xC, y = yC)) +
geom_point() +
scale_x_continuous(labels = c(0, 10^df_P$x[-1]), breaks = df_P$x) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(
x = "Conc.",
y = "relative Int. [% of max Int.]",
title = paste0(
"mz ", round(mz, 2), " Da, R\u00B2=", round(R2, 3), "\n",
"pIC50=", round(-log10(ic50), 3),
" min=", round(min, 3),
" max=", round(max, 3),
" FC=", round(fc_window, 2)
)
)
if (errorbars) {
p <- p +
geom_errorbar(
aes(
y = y,
ymin = y - sem,
ymax = y + sem
),
alpha = 0.5
)
}
if (!is.na(markValue)) {
p <- p + geom_vline(aes(xintercept = markValue), linetype = "dashed")
}
p_list[[i]] <- p
names(p_list) <- mz_vals
}
}
# check for empty entries (result of filtering for FC or R2) and remove them
idx <- vapply(p_list, function(x) {
length(x) > 0
}, FUN.VALUE = TRUE)
if (sum(!idx) == len) {
stop("Nothing to plot. Condsider decreasing fc_thresh or R2_tresh.\n")
}
if (length(p_list) == 1) {
return(p_list[[1]])
}
return(p_list[idx])
}
plotCurves(res, mzIdx = 20, errorbars = TRUE)
plotCurves(res, mzIdx = 20, errorbars = TRUE)
library(MALDIcellassay)
plotCurves(res, mzIdx = 20, errorbars = TRUE)
library(nplr)
plotCurves(res, mzIdx = 20, errorbars = TRUE)
library(tidyverse)
plotCurves(res, mzIdx = 20, errorbars = TRUE)
source("Z:/17-Thomas Enzlein/R/MALDIassay/test_package.R", echo=TRUE)
plotCurves(res, mzIdx = 20, errorbars = TRUE)
dplyr::n()
devtools::document()
library(MALDIcellassay)
source("Z:/17-Thomas Enzlein/R/MALDIassay/test_package.R", echo=TRUE)
plotCurves(res, mzIdx = 20, errorbars = TRUE)
devtools::document()
remove.packages("MALDIcellassay", lib="~/R/win-library/4.1")
devtools::install_github("CeMOS-Mannheim/MALDIcellassay")
library(MALDIcellassay)
library(MALDIquant)
dir <- "C:/0100/"
spec <- loadSpectra(dir)
metaData(spec[[1]])
library(MALDIcellassay)
library(MALDIquant)
dir <- "C:/0100/"
spec <- loadSpectra(dir)
conc <- as.numeric(names(spec))
spec <- spec[order(conc)]
cat("check for empty spectra...\n")
conc <- names(spec)
peaks <- detectPeaks(spec, SNR = 3, method = "SuperSmoother")
filPeaks <- vapply(peaks,
function(x) {
ifelse(length(mz(x)) > 0, TRUE, FALSE)
},
FUN.VALUE = TRUE)
cat(sum(filPeaks), "/", length(spec), "spectra retained.\n")
peaks_fil <- peaks[filPeaks]
spec <- spec[filPeaks]
names(spec) <- conc[filPeaks]
plot(peaks[[1]])
plot(peaks[[2]])
View(peaks)
plot(peaks[[3]])
plot(peaks[[1]])
plot(peaks[[1]], xlim = c(400, 500))
plot(peaks[[1]], xlim = c(700, 800))
labelPeaks(peaks[[1]])
plot(peaks[[1]], xlim = c(750, 770))
labelPeaks(peaks[[1]])
p <- trim(peaks[[1]], range = c(750, 770))
plot(p)
label_parse(p)
labelPeaks(p)
monoisotopicPeaks(p)
plot(p, main = "before filter")
labelPeaks(p)
plot(monoisotopicPeaks(p), main = "after filter")
labelPeaks(monoisotopicPeaks(p))
plot(monoisotopicPeaks(p, size = 2L:10L), main = "after filter")
labelPeaks(monoisotopicPeaks(p))
m <- monoisotopicPeaks(p, size = 2L:10L)
plot(p)
m <- monoisotopicPeaks(p, size = 2L:10L)
lines(m, col = "red")
labelPeaks(m)
p <- trim(peaks[[1]], range = c(720, 780))
plot(p)
m <- monoisotopicPeaks(p, size = 2L:10L)
lines(m, col = "red")
labelPeaks(m)
p <- trim(peaks[[1]], range = c(730, 780))
plot(p)
m <- monoisotopicPeaks(p, size = 2L:10L)
lines(m, col = "red")
labelPeaks(m)
devtools::document()
devtools::document()
peaks[[1]]
p <- trim(peaks[[1]], range = c(260, 300))
plot(p)
m <- monoisotopicPeaks(p, size = 2L:10L)
lines(m, col = "red")
labelPeaks(m)
plot(p)
m <- monoisotopicPeaks(p, size = 3L:10L)
lines(m, col = "red")
labelPeaks(m)
plot(p)
m <- monoisotopicPeaks(p, size = 2L:10L)
lines(m, col = "red")
labelPeaks(m)
plot(p)
m <- monoisotopicPeaks(p, size = 2L:10L, minCor = 0.9)
lines(m, col = "red")
labelPeaks(m)
m <- monoisotopicPeaks(p, size = 2L:10L, minCor = 0.85)
lines(m, col = "red")
labelPeaks(m)
plot(p)
m <- monoisotopicPeaks(p, size = 2L:10L, minCor = 0.85)
lines(m, col = "red")
labelPeaks(m)
plot(p)
m <- monoisotopicPeaks(p, size = 2L:10L, minCor = 0.85, tolerance = 1e-3)
lines(m, col = "red")
labelPeaks(m)
library(MALDIcellassay)
tibble(a =1:3, b = LETTERS(3))
tibble(a =1:3, b = LETTERS[1:3])
library(tidyverse)
tibble(a =1:3, b = LETTERS(3))
tibble(a =1:3, b = LETTERS[1:3])
dim(tibble(a =1:3, b = LETTERS[1:3]))
f <- function(x) {log(x)}
f(1)
f("a")
f <- function(x) {try(log(x))}
f(1)
f("a")
a<- f("a")
a
a <- 1:10
b <- 2:10
union(a,b)
interaction(a,b)
interact(a,b)
intersect(a,b)
intersect(1:5,3:10)
