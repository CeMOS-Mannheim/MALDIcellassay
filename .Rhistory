load_p
pca_df %>%
ungroup() %>%
left_join(aoo %>%
select(Substrate, AOO_mean),by = "Substrate") %>%
mutate(AOO_mean = ifelse(is.na(AOO_mean), NA, AOO_mean)) %>%
mutate(PC1 = pca$x[,1],
PC2 = pca$x[,2],
PC3 = pca$x[,3],
PC4 = pca$x[,4])-> pca_df2
ggplot_pca(pca, points_alpha = 0.01,
arrows_size = 1.3,
arrows_colour = "red",
labels_text_placement = 1.9,
arrows_textsize = 7) +
scale_x_continuous(limits = c(-3,3)) +
scale_y_continuous(limits = c(-3,3)) +
geom_point(aes(color = pca_df2$AOO_mean), alpha = 0.7, size = 5) +
scale_color_viridis_c() +
ggrepel::geom_text_repel(aes(label = pca_df2$Substrate),
size = 5,
force = 2,
segment.colour = "gray20",
min.segment.length = 0.5, max.overlaps = 20) +
theme_pubr() +
theme(axis.title = element_text(size = 16, face = "bold"),
legend.title = element_text(size = 16, face = "bold"),
legend.text = element_text(size = 12, face = "bold"),
axis.line = element_blank()) +
geom_hline(aes(yintercept = 0), linetype = "dotted") +
geom_vline(aes(xintercept = 0), linetype = "dotted") +
labs(color = "AOO (years)") -> pca_p
pca_p
View(pca)
df3 %>%
filter(!is.na(Ab43)) -> pca_df
prcomp(scale(pca_df[,-1])) -> pca
pca$rotation %>%
as_tibble(rownames = NA) %>%
rownames_to_column("Species") %>%
gather(PC, val, -Species) %>%
ggplot(aes(x = PC, y = val, fill = Species)) +
scale_fill_discrete(type = c("#0000FF", "#FF6000", "#00C000", "#AD07E3", "#808080")) + # pretty ugly...
geom_col(position = "dodge") +
scale_y_continuous(limits = c(-0.8, 0.8)) +
geom_hline(yintercept = 0) +
coord_flip() +
theme_pubr() +
theme(axis.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 16, face = "bold"),
legend.title = element_text(size = 16, face = "bold"),
legend.text = element_text(size = 12, face = "bold")) +
labs(x = "",
y = "PC loading") -> load_p
load_p
pca_df %>%
ungroup() %>%
left_join(aoo %>%
select(Substrate, AOO_mean),by = "Substrate") %>%
mutate(AOO_mean = ifelse(is.na(AOO_mean), NA, AOO_mean)) %>%
mutate(PC1 = pca$x[,1],
PC2 = pca$x[,2],
PC3 = pca$x[,3],
PC4 = pca$x[,4])-> pca_df2
ggplot_pca(pca, points_alpha = 0.01,
arrows_size = 1.3,
arrows_colour = "red",
labels_text_placement = 1.9,
arrows_textsize = 7) +
scale_x_continuous(limits = c(-3,3)) +
scale_y_continuous(limits = c(-3,3)) +
geom_point(aes(color = pca_df2$AOO_mean), alpha = 0.7, size = 5) +
scale_color_viridis_c() +
ggrepel::geom_text_repel(aes(label = pca_df2$Substrate),
size = 5,
force = 2,
segment.colour = "gray20",
min.segment.length = 0.5, max.overlaps = 20) +
theme_pubr() +
theme(axis.title = element_text(size = 16, face = "bold"),
legend.title = element_text(size = 16, face = "bold"),
legend.text = element_text(size = 12, face = "bold"),
axis.line = element_blank()) +
geom_hline(aes(yintercept = 0), linetype = "dotted") +
geom_vline(aes(xintercept = 0), linetype = "dotted") +
labs(color = "AOO (years)") -> pca_p
pca_p
ggsave(filename = "Fig3_PCA.png", dpi = 600, width = 9, height = 6, plot = pca_p)
library(MALDIcellassay)
library(MALDIcellassay)
knitr::opts_chunk$set(fig.width=8,
fig.height=4,
collapse = TRUE,
comment = "#>"
)
library(MALDIcellassay)
data("spec")
concLog <- log10(unique(conc))
fitCurve(spec = spec,
dir = getwd(),
conc = conc,
saveIntensityMatrix = TRUE,
SinglePointRecal = TRUE,
normMz = 760.585,
alignTol = 500,
normTol = 100,
markValue= log10(0.5))
conc <- as.numeric(names(spec))
spec_prc <- MALDIquant::removeBaseline(spec)
avg <- MALDIquant::averageMassSpectra(spec_prc, labels = conc)
MALDIquant::plot(avg[[1]], main = "Overview of mean spectra", xlim = c(755, 765))
for(i in 2:length(avg)) {
MALDIquant::lines(avg[[i]], col = i)
}
legend("topright", legend = paste0(names(avg), "uM"), col = 1:8, lty=1)
concLog <- log10(unique(conc))
if(any(concLog == -Inf)) {
concLog[which(concLog == -Inf)] <- (min(concLog[which(!concLog == -Inf)])-1)
}
resp <- nplr::convertToProp(y = intmat[,10])
fitCurve(spec = spec,
dir = getwd(),
conc = conc,
saveIntensityMatrix = TRUE,
SinglePointRecal = TRUE,
normMz = 760.585,
alignTol = 500,
normTol = 100,
markValue= log10(0.5))
devtools::document()
library(MALDIcellassay)
head(1:100)
v <- 0.1
switch (v,
is.numeric = {quantile(1:100, v)}
)
switch (v,
is.numeric = {x = quantile(1:100, v)}
)
switch (v,
is.numeric = {x = quantile(1:100, v)}
)
switch (v,
is.numeric(v) = {x = quantile(1:100, v)}
)
library(MALDIcellassay)
devtools::document()
library(MALDIcellassay)
source("Y:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", echo=TRUE)
devtools::document()
library(MALDIcellassay)
library(MALDIquant)
# fit curves
fitCurve(spec = spec_fil,
conc = names(spec_fil),
dir = dir,
SNR = SNR,
normMeth = normMeth, normMz = normMz, normTol = normTol,
alignTol = alignTol, binTol = binTol,
markValue = externalIC50,
fc_thresh = fc_thresh)
devtools::document()
# fit curves
fitCurve(spec = spec_fil,
conc = names(spec_fil),
dir = dir,
SNR = SNR,
normMeth = normMeth, normMz = normMz, normTol = normTol,
alignTol = alignTol, binTol = binTol,
markValue = externalIC50,
fc_thresh = fc_thresh)
devtools::install_github("CeMOS-Mannheim/MALDIcellassay")
devtools::document()
install.packages("svMisc")
devtools::document()
usethis::git_credentials()
usethis::use_git_config(user.name = "Thomas-enzlein", user.email = "t.enzlein@hs-mannheim.de")
usethis::create_github_token()
usethis::browse_github_token()
install.packages("credentials")
credentials::set_github_pat("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")
credentials::set_github_pat()
usethis::git_sitrep()
credentials::set_github_pat()
usethis::edit_r_environ()
usethis::git_sitrep()
usethis::use_git_config(user.name = "thomas-enzlein", user.email = "t.enzlein@hs-mannheim.de")
credentials::set_github_pat()
usethis::git_sitrep()
install.packages("gitcreds")
library(gitcreds)
gitcreds_set()
gitcreds_fill()
gitcreds_get()
gitcreds_set()
load("data/spec.rda")
View(spec)
devtools::document()
library(MALDIcellassay)
res <- fitCurve(spec,saveIntensityMatrix = FALSE)
library(MALDIcellassay)
res <- fitCurve(spec,saveIntensityMatrix = FALSE, plot = FALSE)
library(MALDIcellassay)
library(MALDIcellassay)
res <- fitCurve(spec,saveIntensityMatrix = FALSE, plot = FALSE)
library(MALDIcellassay)
res <- fitCurve(spec,saveIntensityMatrix = FALSE, plot = FALSE)
library(MALDIcellassay)
res <- fitCurve(spec,saveIntensityMatrix = FALSE, plot = FALSE)
res
View(res)
res@settings$varFilterMethod
res@settings$varFilterMethod[[1]]
res@settings$varFilterMethod[1]
res@settings$varFilterMethod %>% pull()
res@settings$varFilterMethod
debugonce(show.MALDIassay)
debugonce(show)
res
library(MALDIcellassay)
library(MALDIcellassay)
res
debugonce(MALDIcellassay:::show_MALDIassay)
res
res
res@avgSpectra
res@settings
library(MALDIcellassay)
res
class(res)
MALDIcellassay:::show_MALDIassay(res)
debugonce(MALDIcellassay:::show_MALDIassay)
MALDIcellassay:::show_MALDIassay(res)
object@settings$varFilterMethod
debugonce(MALDIcellassay:::show_MALDIassay)
MALDIcellassay:::show_MALDIassay(res)
library(MALDIcellassay)
class(res)
res
checkRecalibration(res, 1)
checkRecalibration <- function(object, idx) {
if(!class(object) == "MALDIassay") {
stop("object needs to be of class MALDIassay.")
}
conc <- unique(getConc(object))
normMz <- object@settings$normMz
tol <- object@settings$normTol
df <- tibble(mass = mass(object@avgSpectra[[idx]]),
intensity = intensity(object@avgSpectra[[idx]]))
peakdf <- tibble(mass = mass(object@avgPeaks[[idx]]),
intensity = intensity(object@avgPeaks[[idx]]))
ggplot(df, aes(x = mass, y = intensity)) +
geom_line() +
geom_linerange(data = peakdf, aes(x = mass, ymin = 0, ymax = intensity), col = "red") +
geom_vline(aes(xintercept = normMz - tol), alpha = 0.6, linetype = "dashed") +
geom_vline(aes(xintercept = normMz + tol), alpha = 0.6, linetype = "dashed") +
geom_vline(aes(xintercept = normMz), alpha = 0.6, linetype = "dashed", col = "red") +
scale_x_continuous(limits = c(normMz - 10 * tol, normMz + 10*tol)) +
scale_y_continuous(limits = c(0, 1.5)) +
labs(title = paste("Avg. Spectrum of concentration", scales::comma(conc[idx], 0.0000001)),
subtitle = paste("Dashed lines:", normMz, "Â±", tol, "m/z")) +
theme_minimal() -> p
return(p)
}
checkRecalibration(res, 1)
rm(checkRecalibration)
checkRecalibration(res, 1)
library(MALDIcellassay)
checkRecalibration(res, 2)
checkRecalibration(res, 3)
checkRecalibration(res, 3)
library(MALDIcellassay)
library(MALDIcellassay)
checkRecalibration(res, 3)
checkRecalibration(res, c(1,2))
library(MALDIcellassay)
checkRecalibration(res, 3)
checkRecalibration(res, c(1,2))
checkRecalibration(res, 1:5)
checkRecalibration(res, 1:5)
library(MALDIcellassay)
checkRecalibration(res, 1)
library(MALDIcellassay)
checkRecalibration(res, 1)
checkRecalibration(res, 2)
checkRecalibration(res, 1:5)
res@settings
devtools::document()
library(MALDIcellassay)
library(MALDIcellassay)
checkRecalibration(res, 1:5)
res
res <- fitCurve(spec, plot = FALSE, saveIntensityMatrix = FALSE, varFilterMethod = "median")
res <- fitCurve(spec, plot = FALSE, saveIntensityMatrix = FALSE, varFilterMethod = "median", fc_thresh = 10)
res <- fitCurve(spec, plot = TRUE, saveIntensityMatrix = FALSE, varFilterMethod = "q25", fc_thresh = 10)
res <- fitCurve(spec, saveIntensityMatrix = FALSE, varFilterMethod = "q25")
res <- fitCurve(spec, plot = FALSE, saveIntensityMatrix = FALSE, varFilterMethod = "q25")
res <- fitCurve(spec, plot = FALSE, saveIntensityMatrix = FALSE, varFilterMethod = "q75")
res <- fitCurve(spec, plot = FALSE, saveIntensityMatrix = FALSE, varFilterMethod = "mean")
gitcreds_get()
gitcreds_set()
credentials::set_github_pat()
gitcreds::gitcreds_set()
gitcreds_get()
gitcreds_list_helpers()
credentials::set_github_pat()
gitcreds::gitcreds_get()
credentials::credential_helper_list()
credentials::credential_fill()
credentials::credential_helper_set()
credentials::credential_helper_set()
usethis::git_sitrep()
gitcreds::gitcreds_set()
usethis::git_sitrep()
credentials::git_credentials_forget()
credentials::git_credential_forget()
credentials::set_github_pat()
usethis::git_sitrep()
usethis::use_git_credentials()
git2r::cred_env()
cred <- git2r::cred_env("thomas-enzlein", "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")
usethis::use_git_credentials(credentials = cred)
res
res@fits
a <- res@fits
View(a)
View(a)
isMALDIassay <- function(object) {
if(!class(object) == "MALDIassay") {
return(FALSE)
}
retrun(TRUE)
}
library(MALDIcellassay)
devtools::document()
rm(isMALDIassay)
devtools::document()
library(MALDIcellassay)
plotCurves(res)
library(MALDIcellassay)
plotCurves(res)
library(MALDIcellassay)
plotCurves(res)
a <- plotCurves(res)
print(a[[1]])
print(a[[2]])
ggpubr::ggarrange(plotlist = a)
Sys.Date()
#' Write ggplot objects to disk as png
#'
#' @param object object of class MALDIassay
#'
savePlots <- function(object) {
p_list <- plotCurves(object)
normMeth <- getNormMethod(object)
for(i in 1:length(p_list)) {
p <- p_list[[i]]
mz <- name(p_list[i])
ggsave(filename = file.path(dir, paste0(as.character(Sys.Date()),"_plotR2_",
normMeth, "norm_", round(mz,2),".png")),
plot = p)
}
}
savePlots(res)
#' Write ggplot objects to disk as png
#'
#' @param object object of class MALDIassay
#'
savePlots <- function(object) {
p_list <- plotCurves(object)
normMeth <- getNormMethod(object)
for(i in 1:length(p_list)) {
p <- p_list[[i]]
mz <- names(p_list[i])
ggsave(filename = file.path(dir, paste0(as.character(Sys.Date()),"_plotR2_",
normMeth, "norm_", round(mz,2),".png")),
plot = p)
}
}
savePlots(res)
library(tidyverse)
savePlots(res)
#' Write ggplot objects to disk as png
#'
#' @param object object of class MALDIassay
#'
savePlots <- function(object) {
p_list <- plotCurves(object)
normMeth <- getNormMethod(object)
for(i in 1:length(p_list)) {
p <- p_list[[i]]
mz <- as.numeric(names(p_list[i]))
ggsave(filename = file.path(dir, paste0(as.character(Sys.Date()),"_plotR2_",
normMeth, "norm_", round(mz,2),".png")),
plot = p)
}
}
savePlots(res)
debugonce(savePlots)
savePlots(res)
devtools::document()
rm(savePlots())
rm(savePlots
)
devtools::document()
library(MALDIcellassay)
savePlot(MALDIcellassay:::savePlots(res))
devtools::document()
library(MALDIcellassay)
savePlot(MALDIcellassay:::savePlots(res))
res <- fitCurve(spec, dir = "C:/Users/Thomas/Downloads/0/", plot = FALSE, saveIntensityMatrix = FALSE)
devtools::document()
library(MALDIcellassay)
res <- fitCurve(spec, dir = "C:/Users/Thomas/Downloads/0/", plot = FALSE, saveIntensityMatrix = FALSE)
MALDIcellassay:::savePlots(res)
library(MALDIcellassay)
res <- fitCurve(spec, dir = "C:/Users/Thomas/Downloads/0/", plot = TRUE, saveIntensityMatrix = FALSE)
res <- fitCurve(spec, dir = "C:/Users/Thomas/Downloads/0/", plot = FALSE, saveIntensityMatrix = TRUE)
res <- fitCurve(spec, dir = "C:/Users/Thomas/Downloads/0/", plot = TRUE, saveIntensityMatrix = TRUE)
res
View(res)
View(res@stats)
res
res@stats
library(MALDIcellassay)
devtools::document()
library(MALDIcellassay)
getPeakStatistics(res)
getPeakStatistics(res) %>% filter(R2 > 0.9)
getPeakStatistics(res) %>% filter(R2 > 0.9, fc_window > 5)
getPeakStatistics(res) %>% filter(R2 > 0.9, fc_window > 2)
getPeakStatistics(res) %>% filter(mz %in% unique(mz), R2 > 0.9, fc_window > 2)
getPeakStatistics(res) %>% filter(mz, R2 > 0.9, fc_window > 2) %>% distinct(mz)
getPeakStatistics(res) %>% filter(distinct(mz), R2 > 0.9, fc_window > 2)
getPeakStatistics(res) %>% filter(R2 > 0.9, fc_window > 2)
getPeakStatistics(res) %>% filter(R2 > 0.9, fc_window > 2) %>% distinct(mz)
getPeakStatistics(res) %>% filter(R2 > 0.9, fc_window > 2)
getPeakStatistics(res) %>% filter(R2 > 0.95, fc_window > 2)
getPeakStatistics(res) %>% filter(R2 > 0.95, fc_window > 3)
getPeakStatistics(res) %>% filter(R2 > 0.95, fc_window > 4)
getPeakStatistics(res) %>% filter(R2 > 0.95, fc_window > 3)
getPeakStatistics(res) %>% filter(R2 > 0.95, fc_window > 3) %>% group_by(mz) %>% summarise(R2 = first(R2), fc = first(fc_windoww))
getPeakStatistics(res) %>% filter(R2 > 0.95, fc_window > 3) %>% group_by(mz) %>% summarise(R2 = first(R2), fc = first(fc_window))
getPeakStatistics(res) %>% filter(R2 > 0.95, fc_window > 2) %>% group_by(mz) %>% summarise(R2 = first(R2), fc = first(fc_window))
getPeakStatistics(res) %>% filter(R2 > 0.9, fc_window > 2) %>% group_by(mz) %>% summarise(R2 = first(R2), fc = first(fc_window))
getPeakStatistics(res) %>% filter(R2 > 0.8, fc_window > 1.5) %>% group_by(mz) %>% summarise(R2 = first(R2), fc = first(fc_window))
getPeakStatistics(res) %>% filter(R2 > 0.7, fc_window > 1.2) %>% group_by(mz) %>% summarise(R2 = first(R2), fc = first(fc_window))
res
getPeakStatistics(res) %>% filter(2) %>% group_by(mz) %>% summarise(R2 = first(R2), fc = first(fc_window))
getPeakStatistics(res) %>% filter() %>% group_by(mz) %>% summarise(R2 = first(R2), fc = first(fc_window))
devtools::document()
library(MALDIcellassay)
credentials::git_credential_ask()
usethis::browse_github_pat()
usethis::edit_r_environ()
p <- plotCurves(res)
View(p)
plotOverview <- function(plotList) {
if(!is.list(plotList)) {
stop("plotList needs to be a list of ggplot objects")
}
mz <- round(as.numeric(names(plotList)), 2)
len <- length(plotList)
p_new <- vector("list", length = len)
for(i in 1:len) {
p_new[[i]] <- plotList[[i]] + labs(title = mz[i]) +
theme(title = element_text(size = 12))
}
ggpubr::ggarrange(plotlist = p_new)
}
plotOverview(p)
plotOverview <- function(plotList) {
if(!is.list(plotList)) {
stop("plotList needs to be a list of ggplot objects")
}
mz <- round(as.numeric(names(plotList)), 2)
len <- length(plotList)
p_new <- vector("list", length = len)
for(i in 1:len) {
p_new[[i]] <- plotList[[i]] +
labs(title = mz[i],
y = "norm. Int.") +
theme(title = element_text(size = 10))
}
ggpubr::ggarrange(plotlist = p_new)
}
plotOverview(p)
#' Generate an overview of a fitted curves from a list of ggplot objects
#'
#' @param plotList list of ggplot objects
#'
#' @return
#' arranged plots
#' @export
plotOverview <- function(plotList) {
if(!is.list(plotList)) {
stop("plotList needs to be a list of ggplot objects")
}
mz <- round(as.numeric(names(plotList)), 2)
len <- length(plotList)
p_new <- vector("list", length = len)
for(i in 1:len) {
p_new[[i]] <- plotList[[i]] +
labs(title = mz[i],
y = "norm. Int.") +
theme(title = element_text(size = 10))
}
ggpubr::ggarrange(plotlist = p_new)
}
rm(plotOverview())
rm(plotOverview)
devtools::document()
