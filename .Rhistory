plotCurves(res, 87, errorbars = "sd")
stats <- getPeakStatistics(res, TRUE) %>%
mutate(z = round(calculateZPrime(res),2),
v = round(calculateVPrime(res),2))
View(stats)
plotCurves(res, 297, errorbars = "sd")
plotCurves(res, 298, errorbars = "sd")
plotCurves(res, 12, errorbars = "sd")
plotCurves(res, 309, errorbars = "sd")
plotCurves(res, 207, errorbars = "sd")
intmat <- getIntensityMatrix(res,
avg = FALSE,
excludeNormMz = FALSE)
View(intmat)
plotCurves(res, 207, errorbars = "sd")
plotCurves(res, 307, errorbars = "sd")
plotCurves(res, 299, errorbars = "sd")
plotCurves(res, 34, errorbars = "sd")
plotCurves(res, 27, errorbars = "sd")
plotCurves(res, 324, errorbars = "sd")
plotCurves(res, 125, errorbars = "sd")
spec <- loadSpectra("c:/Data/m2ara_figshare/Curve/")
source("~/.active-rstudio-document", echo=TRUE)
View(stats)
View(stats %>% arrange(z))
View(stats %>% arrange(desc(z))) %>% filter(v<0.1)
library(tidyverse)
View(stats %>% arrange(desc(z))) %>% filter(v<0.1)
View(stats %>% arrange(desc(z)) %>% filter(v<0.1))
View(stats %>% arrange(desc(v)) %>% filter(z>0))
plotCurves(res, 3, errorbars = "sd")
intmat <-  getIntensityMatrix(res)
intmat[,3]
top <- intmat[81:88,3]
bot <- intmat[1:8,3]
MALDIcellassay:::.calculateZPrime(top, bot)
MALDIcellassay:::.getTopAndBottomIntensityMatrix(res)
MALDIcellassay:::.getTopAndBottomIntensityMatrix(res, 2)
a <- MALDIcellassay:::.getTopAndBottomIntensityMatrix(res, 2)
View(a)
a$pos
debugonce(MALDIcellassay:::.getTopAndBottomIntensityMatrix)
a <- MALDIcellassay:::.getTopAndBottomIntensityMatrix(res, 2)
concs[1:nConc]
length(concs)
nConc+1
(length(concs)-nConc+1)
concs[(length(concs)-nConc+1):length(concs)])
concs[(length(concs)-nConc+1):length(concs)]
range(concs)
concs[1:nConc])
concs[1:nConc]
concs[(length(concs)-nConc+1):length(concs)]
range(concs)
getIntensityMatrix(res,
avg = FALSE,
excludeNormMz = FALSE)
stats %>% arrange(desc(v))) %>% filter(z>0)
stats %>% arrange(desc(v)) %>% filter(z>0)
stats %>% arrange(desc(v)) %>% filter(z>0) %>% View()
topBot < MALDIcellassay:::.getTopAndBottomIntensityMatrix(res, nConc = 2)
topBot <- MALDIcellassay:::.getTopAndBottomIntensityMatrix(res, nConc = 2)
MALDIcellassay:::.calculateZPrime(topBot$pos[,3], topBot$neg[,3])
View(spec)
bot <- intmat[1:18,3]
top <- intmat[72:88,3]
MALDIcellassay:::.calculateZPrime(top, bot)
stats %>% arrange(desc(v)) %>% filter(z>0) %>% View()
plotCurves(res, 3, errorbars = "sd")
intmat <-  getIntensityMatrix(res)
View(intmat)
MALDIcellassay:::.calculateZPrime(top, bot)
mean(bot)
mean(top)
sd(bot)
sd(top)
sd(top)+sd(bot)
(sd(top)+sd(bot))(abs(mean(bot)-mean(top)))
(sd(top)+sd(bot))/(abs(mean(bot)-mean(top)))
rownames(intmat) <- getConc(res)
bot <- intmat[1:18,3]
bot1 <- intmat[1:9,3]
bot2 <- intmat[10:18,3]
top <- intmat[72:88,3]
top1 <- intmat[72:81,3]
top2 <- intmat[82:88,3]
sd(bot)
mean(c(sd(bot1), sd(bot2)))
sd(top)
mean(c(sd(top1), sd(top2)))
MALDIcellassay:::.calculateZPrime(top, bot)
1 - (3 * (mean(c(sd(top1), sd(top2))) + mean(c(sd(bot1), sd(bot2)))) / (abs(mean(top) - mean(bot))))
View(stats)
stats %>% arrange(desc(v)) %>% filter(z>0) %>% View()
plotCurves(res, 92, "sd")
plotCurves(res, 103, "sd")
View(stats)
devtools::docu
devtools::document()
library(MALDIquant)
library(MALDIcellassay)
spec <- loadSpectra("c:/Data/m2ara_figshare/Curve/")
nm <- names(spec)
spec <- suppressWarnings(
smoothIntensity(spec,
method = "SavitzkyGolay",
halfWindowSize = 10)
)
spec <- suppressWarnings(
removeBaseline(spec,
method = "TopHat")
)
names(spec) <- nm
res <- fitCurve(spec = spec,
unit = "nM",
varFilterMethod = "none",
normMeth = "TIC",
normMz = 760.5851,
binTol = 100*1e-6,
SinglePointRecal = TRUE,
alignTol = 0,
halfWindowSize = 20)
plotCurves(res, 1, errorbars = "sd")
devtools::document()
library(MALDIquant)
for(x in 1:10) {
for(y in 11:20)
createMassPeaks(mass = 1:100, intensity = rnorm(100), snr = intensity)
}
for(x in 1:10) {
for(y in 11:20)
spec <- createMassPeaks(mass = 1:100, intensity = abs(rnorm(100)), snr = intensity)
metaData(spec) <- list(imaging = list(x = x, y = x))
}
for(x in 1:10) {
for(y in 11:20)
spec <- createMassPeaks(mass = 1:100, intensity = abs(rnorm(100)), snr = 3)
metaData(spec) <- list(imaging = list(x = x, y = x))
}
}
for(x in 1:10) {
for(y in 11:20) {
spec <- createMassPeaks(mass = 1:100, intensity = abs(rnorm(100)), snr = rep(x = 3, 100))
metaData(spec) <- list(imaging = list(x = x, y = x))
}
}
plotMsiSlice(spec, center = 1, tol= 0.1)
for(i in in 1:10)  {
for(i  in 1:10)  {
peaks[[i]] <- createMassPeaks(mass = 1:100,
intensity = abs(rnorm(100)),
snr = rep(x = 3, 100))
}
peaks <- vector("list", 10)
for(i  in 1:10)  {
peaks[[i]] <- createMassPeaks(mass = 1:100,
intensity = abs(rnorm(100)),
snr = rep(x = 3, 100))
}
plotMsiSlice(spec, center = 1, tol= 0.1)
recal <- function(peaks, targetMz, tol) {
peaks_recal <- lapply(peaks,
function(x) {
axis_old <- mass(x)
idx <- match.closest(axis_old, targetMz, tolerance = tol)
})
}
recal <- function(peaks, targetMz, tol) {
peaks_recal <- lapply(peaks,
function(x) {
axis_old <- mass(x)
idx <- match.closest(axis_old,
targetMz,
tolerance = tol)
return(idx)
})
}
recal(peaks, 2, 0.1)
recal <- function(peaks, targetMz, tol) {
peaks_recal <- lapply(peaks,
function(x) {
axis_old <- mass(x)
idx <- match.closest(axis_old,
targetMz,
tolerance = tol)
return(idx)
})
return(peak_recal)
}
recal(peaks, 2, 0.1)
recal <- function(peaks, targetMz, tol) {
peaks_recal <- lapply(peaks,
function(x) {
axis_old <- mass(x)
idx <- match.closest(axis_old,
targetMz,
tolerance = tol)
return(idx)
})
return(peaks_recal)
}
recal(peaks, 2, 0.1)
}
recal <- function(peaks, targetMz, tol) {
peaks_recal <- lapply(peaks,
function(x) {
axis_old <- mass(x)
idx <- which(!is.na(match.closest(axis_old,
targetMz,
tolerance = tol)))
return(idx)
})
return(peaks_recal)
}
recal(peaks, 2, 0.1)
recal <- function(peaks, targetMz, tol) {
peaks_recal <- lapply(peaks,
function(x) {
axis_old <- mass(x)
idx <- which(!is.na(match.closest(axis_old,
targetMz,
tolerance = tol)))
mz_old <- axis_old[idx]
diff <- mz_old - targetMz
# please check if + is correct here!
axis_new <- axis_old + diff
mass(x) <- axis_new
return(x)
})
return(peaks_recal)
}
plot(peaks[[1]])
peaks_recal <- recal(peaks, 1.1, tol = 0.12)
plot(peaks[[1]])
mass(peaks[[1]])
plot(peaks_recal[[1]])
mass(peaks_recal[[1]])
recal <- function(peaks, targetMz, tol) {
peaks_recal <- lapply(peaks,
function(x) {
axis_old <- mass(x)
idx <- which(!is.na(match.closest(axis_old,
targetMz,
tolerance = tol)))
mz_old <- axis_old[idx]
diff <- mz_old - targetMz
# please check if + is correct here!
axis_new <- axis_old - diff
mass(x) <- axis_new
return(x)
})
return(peaks_recal)
}
plot(peaks[[1]])
mass(peaks[[1]])
peaks_recal <- recal(peaks, 1.1, tol = 0.12)
plot(peaks_recal[[1]])
mass(peaks_recal[[1]])
rhub::rhub_check()
devtools::check_win_devel()
devtools::submit_cran()
library(MALDIcellassay)
system.file("example-raw-spectra", package="MALDIcellassay")
system.file("data-raw", package="MALDIcellassay")
system.file("data-raw", package="MALDIcellassay")
system.file("data", package="MALDIcellassay")
system.file("data-raw", package="MALDIcellassay")
system.file("data", package="MALDIcellassay")
dataDir <- system.file("data", package="MALDIcellassay")
loadSpectra(file.path(dataDir, "example-raw-spectra"))
dataDir <- system.file("data", package="MALDIcellassay")
loadSpectra(file.path(dataDir, "example-raw-spectra"))
dataDir
file.path(dataDir, "example-raw-spectra")
unz(file.path(dataDir, "example-raw-spectra"))
unz(filename = file.path(dataDir, "example-raw-spectra"))
unz(description = "open", filename = file.path(dataDir, "example-raw-spectra"))
con <- unz(description = "open", filename = file.path(dataDir, "example-raw-spectra"))
con
loadSpectra(unz(description = "open", filename = file.path(dataDir, "example-raw-spectra")))
con <- unz(description = "0.0001", filename = file.path(dataDir, "example-raw-spectra"))
con
con <- loadSpectra(unz(description = "0.0001", filename = file.path(dataDir, "example-raw-spectra")))
loadSpectra(unzip(file.path(dataDir, "example-raw-spectra".zip)))
loadSpectra(unzip(file.path(dataDir, "example-raw-spectra.zip")))
unzip(file.path(dataDir, "example-raw-spectra.zip")
unzip(file.path(dataDir, "example-raw-spectra.zip"))
source("~/.active-rstudio-document", echo=TRUE)
unzip(file.path(dataDir, "example-raw-spectra.zip"))
getwd()
loadSpectra("example-raw-spectra/")
unlink("example-raw-spectra/")
unlink("example-raw-spectra/", recursive = TRUE)
devtools::document()
install.packages("roxygen2")
devtools::document()
devtools::document()
system.file("extdata", package="MALDIcellassay")
dataDir <- system.file("extdata", package="MALDIcellassay")
unzip(file.path(dataDir, "example-raw-spectra.zip"))
loadSpectra("example-raw-spectra/")
unlink("example-raw-spectra/", recursive = TRUE)
list.files("man")
library(readr)
read_file("man/Blank2022intmat.Rd")
f <- list.files("man",full.names = TRUE)
f
library(stringr)
read_file("man/Blank2022intmat.Rd")
read_file("man/calculateChauvenetCriterion.Rd")
str_detect(read_file("man/calculateChauvenetCriterion.Rd"), "export")
str_detect(read_file("man/calculateChauvenetCriterion.Rd"), "examples")
lapply(files, function(x) {
f <- read_file(x)
has_example <- str_detect(f, "examples")
return(data.frame(file = basename(f),
has_example = has_example))
})
files <- list.files("man",full.names = TRUE)
library(tidyverse)
lapply(files, function(x) {
f <- read_file(x)
has_example <- str_detect(f, "examples")
return(data.frame(file = basename(f),
has_example = has_example))
}) %>% bind_rows()
lapply(files, function(x) {
f <- read_file(x)
has_example <- str_detect(f, "examples")
data.frame(file = f,
has_example = has_example)
return()
}) %>% bind_rows()
return(df)
lapply(files, function(x) {
f <- read_file(x)
has_example <- str_detect(f, "examples")
df <- tibble(file = f,
has_example = has_example)
return(df)
}) %>% bind_rows()
lapply(files, function(x) {
f <- read_file(x)
has_example <- str_detect(f, "examples")
df <- tibble(file = x,
has_example = has_example)
return(df)
}) %>% bind_rows()
lapply(files, function(x) {
f <- read_file(x)
has_example <- str_detect(f, "examples")
df <- tibble(file = basename(x),
has_example = has_example)
return(df)
}) %>% bind_rows() %>% View()
lapply(files, function(x) {
f <- read_file(x)
has_example <- str_detect(f, "examples")
df <- tibble(func = tools::file_path_sans_ext(basename(x)),
has_example = has_example)
return(df)
}) %>% bind_rows()
df <- lapply(files, function(x) {
f <- read_file(x)
has_example <- str_detect(f, "examples")
df <- tibble(func = tools::file_path_sans_ext(basename(x)),
has_example = has_example)
return(df)
}) %>% bind_rows()
read.csv(file = "NAMESPACE")
read.csv(file = "NAMESPACE", header = FALSE)
read.csv(file = "NAMESPACE") %>%
filter(str_detect(V1, "export"))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export"))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_remove(V1, "export(|)"))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_remove(V1, "export("))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_remove(V1, "export("))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_remove(V1, "export\("))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_remove(V1, "export"))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_extract(V1, "/\(([^)]+)\)/"))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_extract(V1, "\(([^)]+)\)/"))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_extract(V1, "\(([^)]+)\)"))
mutate(V1 = str_extract(V1, "\\(.*?\\)))
read.csv(file = "NAMESPACE", FALSE) %>%
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_extract(V1, "\\(.*?\\)"))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_extract(V1, "\\([^()]+\\)"))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_remove(V1, "export"))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_remove(V1, "export")) %>%
mutate(V1 = substring(V1, 2, nchar(k)-1))
read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_remove(V1, "export")) %>%
mutate(V1 = substring(V1, 2, nchar(V1)-1))
exports <- read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_remove(V1, "export")) %>%
mutate(V1 = substring(V1, 2, nchar(V1)-1))
left_join(exports, df)
left_join(exports, df, by = c("V1", "func"))
df <- lapply(files, function(x) {
f <- read_file(x)
has_example <- str_detect(f, "examples")
df <- tibble(func = tools::file_path_sans_ext(basename(x)),
has_example = has_example)
return(df)
}) %>%
bind_rows()
exports <- read.csv(file = "NAMESPACE", FALSE) %>%
filter(str_detect(V1, "export")) %>%
mutate(V1 = str_remove(V1, "export")) %>%
mutate(V1 = substring(V1, 2, nchar(V1)-1))
left_join(exports, df, by = c("V1", "func"))
df <- lapply(files, function(x) {
f <- read_file(x)
has_example <- str_detect(f, "examples")
df <- tibble(V1 = tools::file_path_sans_ext(basename(x)),
has_example = has_example)
return(df)
}) %>%
bind_rows()
left_join(exports, df, by = join_by("V1"))
exports
df
left_join(exports, df, by = join_by("V1"))
dataDir <- system.file("extdata", package="MALDIcellassay")
unzip(file.path(dataDir, "example-raw-spectra.zip"))
spec <- loadSpectra("example-raw-spectra/")
unlink("example-raw-spectra/", recursive = TRUE)
usethis::use_data_raw("Koch2024_mzML")
source("~/R/MALDIcellassay/data-raw/Koch2024mzML.R", echo=TRUE)
MALDIquantForeign::exportMzMl(spec, file = "inst/extdata/Koch2024mzML.mzML")
source("~/R/MALDIcellassay/data-raw/Koch2024mzML.R", echo=TRUE)
source("~/R/MALDIcellassay/data-raw/Koch2024mzML.R", echo=TRUE)
devtools::document()
devtools::document()
devtools::run_examples()
source("~/.active-rstudio-document", echo=TRUE)
devtools::document()
source("~/.active-rstudio-document", echo=TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
urlchecker::url_update()
devtools::document()
devtools::document()
devtools::run_examples()
usethis::use_data(Blank2022res, overwrite = TRUE, compress = "xz")
rhub::rhub_check()
devtools::document()
usethis::use_version()
devtools::check_win_devel()
cran <- tools::CRAN_package_db()
desc_with_doi <- grep("doi:", cran$Description, value = TRUE)
desc_with_doi[[1]]
View(cran)
devtools::check_win_devel()
usethis::use_release_issue()
revdepcheck::revdep_check()
checkhelper::find_missing_tags()
install.packages("checkhelper")
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
checkhelper::find_missing_tags()
a<-checkhelper::find_missing_tags()
View(a)
View(a[["functions"]])
checkhelper::check_clean_userspace()
all_files_remaining <- checkhelper::check_clean_userspace()
urlchecker::url_check()
devtools::revdep()
usethis::use_release_issue(version = "0.4.46")
usethis::use_cran_comments()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::document()
Sys.which("makeindex")
tinytex::tlmgr_install("makeindex")
tinytex::reinstall_tinytex(repository = "illinois")
tinytex::tlmgr_install("makeindex")
Sys.which("makeindex")
Sys.which("makeindex")
devtools::check(remote = TRUE, manual = TRUE)
devtools::submit_cran()
withr::with_options(list(repos = c(CRAN = "https://cloud.r-project.org/")),
{callr::default_repos()
rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran")) })
