cat("Avg. mass shift:", round(mean(object@mzShifts), 4), "Da. Max abs. shift:", round(max(abs(object@mzShifts)), 4), "Da.\n")
cat("\n")
}
cat("Top-features based on R² and max/min-Fold-chage\n")
print(object@stats %>%
group_by(mz) %>%
summarise(R2 = first(R2),
wgof = first(wgof),
FC = first(fc_window)) %>%
arrange(desc(R2), desc(FC)))
})
res
unique(res@stats$mz)
unique(res@stats$mz) %>% length()
setMethod("show", signature(object = "MALDIassay"),
function(object) {
mz <- round(object@settings$normMz, digits = 2)
tol <-  object@settings$normTol
numPeaksTotal <- length(mass(object@singlePeaks[[1]]))
hiVarPeaks <- length(unique(object@stats$mz))
# Compose normalization information
if(normMeth == "mz") {
normStr <- paste("Normalization on m/z", mz, "±", tol, "Da.\n")
} else {
normStr <- paste("Normalization using", normMeth, "method.\n")
}
cat("------MALDIassay object------\n")
cat("\n")
cat(normStr)
cat("\n")
if(object@settings$SinglePointRecal) {
cat("Single point recalibation on", mz, "with", tol, "Da tolerance.\n")
cat("Avg. mass shift:", round(mean(object@mzShifts), 4), "Da. Max abs. shift:", round(max(abs(object@mzShifts)), 4), "Da.\n")
cat("\n")
}
cat("Found", numPeaksTotal, "peaks in total and", hiVarPeaks, "high variance peaks.")
cat("Top-features based on R² and max/min-Fold-chage\n")
print(object@stats %>%
group_by(mz) %>%
summarise(R2 = first(R2),
wgof = first(wgof),
FC = first(fc_window)) %>%
arrange(desc(R2), desc(FC)))
})
res
setMethod("show", signature(object = "MALDIassay"),
function(object) {
mz <- round(object@settings$normMz, digits = 2)
tol <-  object@settings$normTol
numPeaksTotal <- length(mass(object@singlePeaks[[1]]))
hiVarPeaks <- length(unique(object@stats$mz))
# Compose normalization information
if(normMeth == "mz") {
normStr <- paste("Normalization on m/z", mz, "±", tol, "Da.\n")
} else {
normStr <- paste("Normalization using", normMeth, "method.\n")
}
cat("------MALDIassay object------\n")
cat("\n")
cat(normStr)
cat("\n")
if(object@settings$SinglePointRecal) {
cat("Single point recalibation on", mz, "with", tol, "Da tolerance.\n")
cat("Avg. mass shift:", round(mean(object@mzShifts), 4), "Da. Max abs. shift:", round(max(abs(object@mzShifts)), 4), "Da.\n")
cat("\n")
}
cat("Found", numPeaksTotal, "peaks in total and", hiVarPeaks, "high variance peaks.\n")
cat("\n")
cat("Top-features based on R² and max/min-Fold-chage\n")
print(object@stats %>%
group_by(mz) %>%
summarise(R2 = first(R2),
wgof = first(wgof),
FC = first(fc_window)) %>%
arrange(desc(R2), desc(FC)))
})
res
View(res)
setMethod("show", signature(object = "MALDIassay"),
function(object) {
mz <- round(object@settings$normMz, digits = 2)
tol <-  object@settings$normTol
numPeaksTotal <- length(mass(object@singlePeaks[[1]]))
hiVarPeaks <- length(unique(object@stats$mz))
# Compose normalization information
if(normMeth == "mz") {
normStr <- paste("Normalization on m/z", mz, "±", tol, "Da.\n")
} else {
normStr <- paste("Normalization using", normMeth, "method.\n")
}
cat("------MALDIassay object------\n")
cat("\n")
cat(normStr)
cat("\n")
if(object@settings$SinglePointRecal) {
cat("Single point recalibation on", mz, "with", tol, "Da tolerance.\n")
cat("Avg. mass shift:", round(mean(object@mzShifts), 4), "Da. Max abs. shift:", round(max(abs(object@mzShifts)), 4), "Da.\n")
cat("\n")
}
cat("Found", numPeaksTotal, "peaks above SNR", object@settings$SNR,  "and", hiVarPeaks, "high variance peaks.\n")
cat("\n")
cat("Top-features based on R² and max/min-Fold-chage\n")
print(object@stats %>%
group_by(mz) %>%
summarise(R2 = first(R2),
wgof = first(wgof),
FC = first(fc_window)) %>%
arrange(desc(R2), desc(FC)))
})
res
intmat <- intensityMatrix(peaks = res@singlePeaks)
any(is.na(intmat))
pca <- prcomp(scale(intmat))
plot(pca)
plot(pca$x)
plot(pca$x, col = res@settings$Conc)
plot(pca$x, col = factor(res@settings$Conc))
View(intmat)
plot(pca$rotation, col = factor(res@settings$Conc))
plot(pca$rotation[,1])
plot(pca$rotation[,1], colnames(pca$rotation))
colnames(pca$rotation)
rownames(pca$rotation)
plot(pca$rotation[,1], rownames(pca$rotation))
plot(rownames(pca$rotation), pca$rotation[,1])
plot(as.numeric(rownames(pca$rotation)), pca$rotation[,1])
plot(as.numeric(rownames(pca$rotation)), pca$rotation[,2])
plot(pca$x, col = factor(res@settings$Conc))
res
intmat <- intensityMatrix(detectPeaks(res@avgSpectra))
View(intmat)
intmat <- intensityMatrix(detectPeaks(res@avgSpectra, method = "SuperSmoother", SNR = 3))
intmat <- intensityMatrix(detectPeaks(res@avgSpectra, method = "SuperSmoother", SNR = 3) %>% binPeaks())
devtools::document()
source("Y:/17-Thomas Enzlein/R/Alex_SpecExport/Alex_FitCurve.R", echo=TRUE)
res
devtools::document()
# fit curves
res <- fitCurve(spec = spec_fil,
conc = names(spec_fil),
dir = dir,
SNR = SNR,
normMeth = normMeth,
normMz = normMz,
normTol = normTol,
alignTol = alignTol,
binTol = binTol,
markValue = externalIC50,
fc_thresh = fc_thresh)
res
save(spec_fil, "spec.R")
save(spec_fil, file = "spec.R")
load("spec.R")
library(MALDIcellassay)
library(MALDIquant)
# fit curves
res <- fitCurve(spec = spec_fil,
conc = names(spec_fil),
dir = dir,
SNR = SNR,
normMeth = normMeth,
normMz = normMz,
normTol = normTol,
alignTol = alignTol,
binTol = binTol,
markValue = externalIC50,
fc_thresh = fc_thresh)
SNR <- 3 #signal to noise ratio for peak detection
normMz <- 760.585 # mz to recalibrate and normalize to (if normMeth is set to "mz")
normMeth <- "mz" #normalization method. Can either be "TIC", "PQM", "median" or "mz". If "mz" then the normMz is used. If none no normalization is done.
normTol <- 0.2 # tolerance to find recalibration and normalization peak (if normMeth is set to "mz")
alignTol <- 0.05 # tolerance for alignment (done after recalibration, should only make slight adjustments)
binTol <- 0.25 # tolerance for binning (last step of preprocessing before fitting curves)
externalIC50 <- NA # this value will be displayed in the curves. If set to NA no value will be displayed.
fc_thresh <- 1 # threshold for fold change above which curves are plotted. The fold-chage is calculated as max/min for a given m/z.
dir <- "Y:/17-Thomas Enzlein/@Thomas/Von Alex/2022DEZ01 1 8 Curve/"
# fit curves
res <- fitCurve(spec = spec_fil,
conc = names(spec_fil),
dir = dir,
SNR = SNR,
normMeth = normMeth,
normMz = normMz,
normTol = normTol,
alignTol = alignTol,
binTol = binTol,
markValue = externalIC50,
fc_thresh = fc_thresh)
res
# fit curves
res <- fitCurve(spec = spec_fil,
conc = names(spec_fil),
dir = dir,
SNR = SNR,
normMeth = "PQN",
normMz = normMz,
normTol = normTol,
alignTol = alignTol,
binTol = binTol,
markValue = externalIC50,
fc_thresh = fc_thresh)
# fit curves
res <- fitCurve(spec = spec_fil,
conc = names(spec_fil),
dir = dir,
SNR = SNR,
normMeth = "PQM",
normMz = normMz,
normTol = normTol,
alignTol = alignTol,
binTol = binTol,
markValue = externalIC50,
fc_thresh = fc_thresh)
# fit curves
res <- fitCurve(spec = spec_fil,
conc = names(spec_fil),
dir = dir,
SNR = SNR,
normMeth = "PQN",
normMz = normMz,
normTol = normTol,
alignTol = alignTol,
binTol = binTol,
markValue = externalIC50,
fc_thresh = fc_thresh)
res
setMethod("show", signature(object = "MALDIassay"),
function(object) {
mz <- round(object@settings$normMz, digits = 2)
tol <-  object@settings$normTol
numPeaksTotal <- length(mass(object@singlePeaks[[1]]))
hiVarPeaks <- length(unique(object@stats$mz))
# Compose normalization information
if(object@settings$normMeth == "mz") {
normStr <- paste("Normalization on m/z", mz, "±", tol, "Da.\n")
} else {
normStr <- paste("Normalization using", normMeth, "method.\n")
}
cat("------MALDIassay object------\n")
cat("\n")
cat(normStr)
cat("\n")
if(object@settings$SinglePointRecal) {
cat("Single point recalibation on", mz, "with", tol, "Da tolerance.\n")
cat("Avg. mass shift:", round(mean(object@mzShifts), 4), "Da. Max abs. shift:", round(max(abs(object@mzShifts)), 4), "Da.\n")
cat("\n")
}
cat("Found", numPeaksTotal, "peaks above SNR", object@settings$SNR,  "and", hiVarPeaks, "high variance peaks.\n")
cat("\n")
cat("Top-features based on R² and max/min-Fold-chage:\n")
print(object@stats %>%
group_by(mz) %>%
summarise(R2 = dplyr::first(R2),
wgof = dplyr::first(wgof),
FC = dplyr::first(fc_window)) %>%
arrange(desc(R2), desc(FC)))
})
res
library(dplyr)
res
setMethod("show", signature(object = "MALDIassay"),
function(object) {
mz <- round(object@settings$normMz, digits = 2)
tol <-  object@settings$normTol
numPeaksTotal <- length(mass(object@singlePeaks[[1]]))
hiVarPeaks <- length(unique(object@stats$mz))
# Compose normalization information
if(object@settings$normMeth == "mz") {
normStr <- paste("Normalization on m/z", mz, "±", tol, "Da.\n")
} else {
normStr <- paste("Normalization using", normMeth, "method.\n")
}
cat("------MALDIassay object------\n")
cat("\n")
cat(normStr)
cat("\n")
if(object@settings$SinglePointRecal) {
cat("Single point recalibation on", mz, "with", tol, "Da tolerance.\n")
cat("Avg. mass shift:", round(mean(object@mzShifts), 4), "Da. Max abs. shift:", round(max(abs(object@mzShifts)), 4), "Da.\n")
cat("\n")
}
cat("Found", numPeaksTotal, "peaks above SNR", object@settings$SNR,  "and", hiVarPeaks, "high variance peaks.\n")
cat("\n")
cat("Top-features based on R² and max/min-Fold-chage:\n")
print(object@stats %>%
group_by(mz) %>%
summarise(R2 = dplyr::first(R2),
wgof = dplyr::first(wgof),
FC = dplyr::first(fc_window)) %>%
arrange(desc(R2), desc(FC)))
})
res
res@settings$normMeth
setMethod("show", signature(object = "MALDIassay"),
function(object) {
mz <- round(object@settings$normMz, digits = 2)
tol <-  object@settings$normTol
numPeaksTotal <- length(mass(object@singlePeaks[[1]]))
hiVarPeaks <- length(unique(object@stats$mz))
# Compose normalization information
if(object@settings$normMeth == "mz") {
normStr <- paste("Normalization on m/z", mz, "±", tol, "Da.\n")
} else {
normStr <- paste("Normalization using", object@settings$normMeth, "method.\n")
}
cat("------MALDIassay object------\n")
cat("\n")
cat(normStr)
cat("\n")
if(object@settings$SinglePointRecal) {
cat("Single point recalibation on", mz, "with", tol, "Da tolerance.\n")
cat("Avg. mass shift:", round(mean(object@mzShifts), 4), "Da. Max abs. shift:", round(max(abs(object@mzShifts)), 4), "Da.\n")
cat("\n")
}
cat("Found", numPeaksTotal, "peaks above SNR", object@settings$SNR,  "and", hiVarPeaks, "high variance peaks.\n")
cat("\n")
cat("Top-features based on R² and max/min-Fold-chage:\n")
print(object@stats %>%
group_by(mz) %>%
summarise(R2 = dplyr::first(R2),
wgof = dplyr::first(wgof),
FC = dplyr::first(fc_window)) %>%
arrange(desc(R2), desc(FC)))
})
res@settings$normMeth
res
devtools::document()
res
plot(res)
res
plot(res@fits[[1]])
plot(res@fits[[1]]$model)
res@fits[[1]]
res
setMethod("show", signature(object = "MALDIassay"),
function(object) {
mz <- round(object@settings$normMz, digits = 2)
tol <-  object@settings$normTol
numPeaksTotal <- length(mass(object@singlePeaks[[1]]))
hiVarPeaks <- length(unique(object@stats$mz))
# Compose normalization information
if(object@settings$normMeth == "mz") {
normStr <- paste("Normalization on m/z", mz, "±", tol, "Da.\n")
} else {
normStr <- paste("Normalization using", object@settings$normMeth, "method.\n")
}
cat("------MALDIassay object------\n")
cat("\n")
cat(normStr)
cat("\n")
if(object@settings$SinglePointRecal) {
cat("Single point recalibation on", mz, "with", tol, "Da tolerance.\n")
cat("Avg. mass shift:", round(mean(object@mzShifts), 4), "Da. Max abs. shift:", round(max(abs(object@mzShifts)), 4), "Da.\n")
cat("\n")
}
cat("Found", numPeaksTotal, "peaks above SNR", object@settings$SNR,  "and", hiVarPeaks, "high variance peaks.\n")
cat("\n")
cat("Top-features based on R² and max/min-Fold-chage:\n")
print(head(object@stats %>%
group_by(mz) %>%
summarise(R2 = dplyr::first(R2),
wgof = dplyr::first(wgof),
FC = dplyr::first(fc_window)) %>%
arrange(desc(R2), desc(FC))))
})
res
setMethod("show", signature(object = "MALDIassay"),
function(object) {
mz <- round(object@settings$normMz, digits = 2)
tol <-  object@settings$normTol
numPeaksTotal <- length(mass(object@singlePeaks[[1]]))
hiVarPeaks <- length(unique(object@stats$mz))
# Compose normalization information
if(object@settings$normMeth == "mz") {
normStr <- paste("Normalization on m/z", mz, "±", tol, "Da.\n")
} else {
normStr <- paste("Normalization using", object@settings$normMeth, "method.\n")
}
cat("------MALDIassay object------\n")
cat("\n")
cat(normStr)
cat("\n")
if(object@settings$SinglePointRecal) {
cat("Single point recalibation on", mz, "with", tol, "Da tolerance.\n")
cat("Avg. mass shift:", round(mean(object@mzShifts), 4), "Da. Max abs. shift:", round(max(abs(object@mzShifts)), 4), "Da.\n")
cat("\n")
}
cat("Found", numPeaksTotal, "peaks above SNR", object@settings$SNR,  "and", hiVarPeaks, "high variance peaks.\n")
cat("\n")
cat("Top-features based on R² and max/min-Fold-chage:\n")
print(object@stats %>%
group_by(mz) %>%
summarise(R2 = dplyr::first(R2),
wgof = dplyr::first(wgof),
FC = dplyr::first(fc_window)) %>%
arrange(desc(R2), desc(FC)) %>%
as.data.frame() %>%
head())
})
res
setMethod("show", signature(object = "MALDIassay"),
function(object) {
mz <- round(object@settings$normMz, digits = 2)
tol <-  object@settings$normTol
numPeaksTotal <- length(mass(object@singlePeaks[[1]]))
hiVarPeaks <- length(unique(object@stats$mz))
# Compose normalization information
if(object@settings$normMeth == "mz") {
normStr <- paste("Normalization on m/z", mz, "±", tol, "Da.\n")
} else {
normStr <- paste("Normalization using", object@settings$normMeth, "method.\n")
}
cat("------MALDIassay object------\n")
cat("\n")
cat(normStr)
cat("\n")
if(object@settings$SinglePointRecal) {
cat("Single point recalibation on", mz, "with", tol, "Da tolerance.\n")
cat("Avg. mass shift:", round(mean(object@mzShifts), 4), "Da. Max abs. shift:", round(max(abs(object@mzShifts)), 4), "Da.\n")
cat("\n")
}
cat("Found", numPeaksTotal, "peaks above SNR", object@settings$SNR,  "and", hiVarPeaks, "high variance peaks.\n")
cat("\n")
cat("Top-features based on R² and max/min-Fold-chage:\n")
print(object@stats %>%
mutate(mz = round(mz, 3)) %>%
group_by(mz) %>%
summarise(R2 = dplyr::first(R2),
wgof = dplyr::first(wgof),
FC = dplyr::first(fc_window)) %>%
arrange(desc(R2), desc(FC)) %>%
as.data.frame() %>%
head())
})
res
setMethod("show", signature(object = "MALDIassay"),
function(object) {
mz <- round(object@settings$normMz, digits = 2)
tol <-  object@settings$normTol
numPeaksTotal <- length(mass(object@singlePeaks[[1]]))
hiVarPeaks <- length(unique(object@stats$mz))
# Compose normalization information
if(object@settings$normMeth == "mz") {
normStr <- paste("Normalization on m/z", mz, "±", tol, "Da.\n")
} else {
normStr <- paste("Normalization using", object@settings$normMeth, "method.\n")
}
cat("------MALDIassay object------\n")
cat("\n")
cat(normStr)
cat("\n")
if(object@settings$SinglePointRecal) {
cat("Single point recalibation on", mz, "with", tol, "Da tolerance.\n")
cat("Avg. mass shift:", round(mean(object@mzShifts), 4), "Da. Max abs. shift:", round(max(abs(object@mzShifts)), 4), "Da.\n")
cat("\n")
}
cat("Found", numPeaksTotal, "peaks above SNR", object@settings$SNR,  "and", hiVarPeaks, "high variance peaks.\n")
cat("\n")
cat("Top-features based on R² and max/min-Fold-chage:\n")
print(object@stats %>%
mutate(mz = round(as.numeric(mz), 3)) %>%
group_by(mz) %>%
summarise(R2 = dplyr::first(R2),
wgof = dplyr::first(wgof),
FC = dplyr::first(fc_window)) %>%
arrange(desc(R2), desc(FC)) %>%
as.data.frame() %>%
head())
})
res
setMethod("show", signature(object = "MALDIassay"),
function(object) {
mz <- round(object@settings$normMz, digits = 2)
tol <-  object@settings$normTol
numPeaksTotal <- length(mass(object@singlePeaks[[1]]))
hiVarPeaks <- length(unique(object@stats$mz))
# Compose normalization information
if(object@settings$normMeth == "mz") {
normStr <- paste("Normalization on m/z", mz, "±", tol, "Da.\n")
} else {
normStr <- paste("Normalization using", object@settings$normMeth, "method.\n")
}
cat("------MALDIassay object------\n")
cat("\n")
cat(normStr)
cat("\n")
if(object@settings$SinglePointRecal) {
cat("Single point recalibation on", mz, "with", tol, "Da tolerance.\n")
cat("Avg. mass shift:", round(mean(object@mzShifts), 4), "Da. Max abs. shift:", round(max(abs(object@mzShifts)), 4), "Da.\n")
cat("\n")
}
cat("Found", numPeaksTotal, "peaks above SNR", object@settings$SNR,  "and", hiVarPeaks, "high variance peaks.\n")
cat("\n")
cat("Top-features based on R² and max/min-Fold-chage:\n")
print(object@stats %>%
mutate(mz = round(as.numeric(mz), 3)) %>%
group_by(mz) %>%
summarise(R2 = dplyr::first(round(R2,4)),
wgof = dplyr::first(round(wgof,4)),
FC = dplyr::first(round(fc_window, 4))) %>%
arrange(desc(R2), desc(FC)) %>%
as.data.frame() %>%
head())
})
res
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(MALDIcellassay)
devtools::document()
library(MALDIcellassay)
